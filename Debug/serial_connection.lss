
serial_connection.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000172  00800100  00001326  000013da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001326  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000034  00800272  00800272  0000154c  2**0
                  ALLOC
  3 .eeprom       00000017  00810000  00810000  0000154c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00001563  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015c0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000002a0  00000000  00000000  00001600  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002565  00000000  00000000  000018a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000f31  00000000  00000000  00003e05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013a2  00000000  00000000  00004d36  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000540  00000000  00000000  000060d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000879  00000000  00000000  00006618  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001032  00000000  00000000  00006e91  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000190  00000000  00000000  00007ec3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e2       	ldi	r30, 0x26	; 38
      7c:	f3 e1       	ldi	r31, 0x13	; 19
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 37       	cpi	r26, 0x72	; 114
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a2 e7       	ldi	r26, 0x72	; 114
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a6 3a       	cpi	r26, 0xA6	; 166
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 b0 04 	call	0x960	; 0x960 <main>
      9e:	0c 94 91 09 	jmp	0x1322	; 0x1322 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_16>:
uint16_t timer_value;
int distance_cm;
uint8_t error;

ISR (TIMER0_OVF_vect)
{
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	0f b6       	in	r0, 0x3f	; 63
      ac:	0f 92       	push	r0
      ae:	11 24       	eor	r1, r1
      b0:	8f 93       	push	r24
      b2:	9f 93       	push	r25
	if(rising_edge==1) //Check if there was echo
      b4:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <rising_edge>
      b8:	81 30       	cpi	r24, 0x01	; 1
      ba:	99 f4       	brne	.+38     	; 0xe2 <__vector_16+0x3c>
	{
		timer_value++;
      bc:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <timer_value>
      c0:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <timer_value+0x1>
      c4:	01 96       	adiw	r24, 0x01	; 1
      c6:	90 93 76 02 	sts	0x0276, r25	; 0x800276 <timer_value+0x1>
      ca:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <timer_value>
		/*Check if isnt out of range*/
		if(timer_value > 91)
      ce:	8c 35       	cpi	r24, 0x5C	; 92
      d0:	91 05       	cpc	r25, r1
      d2:	38 f0       	brcs	.+14     	; 0xe2 <__vector_16+0x3c>
		{
			working = 0;
      d4:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <working>
			rising_edge = 0;
      d8:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <rising_edge>
			error = 1;
      dc:	81 e0       	ldi	r24, 0x01	; 1
      de:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <error>
		}
	}
}
      e2:	9f 91       	pop	r25
      e4:	8f 91       	pop	r24
      e6:	0f 90       	pop	r0
      e8:	0f be       	out	0x3f, r0	; 63
      ea:	0f 90       	pop	r0
      ec:	1f 90       	pop	r1
      ee:	18 95       	reti

000000f0 <__vector_2>:
ISR (INT1_vect)
{
      f0:	1f 92       	push	r1
      f2:	0f 92       	push	r0
      f4:	0f b6       	in	r0, 0x3f	; 63
      f6:	0f 92       	push	r0
      f8:	11 24       	eor	r1, r1
      fa:	2f 93       	push	r18
      fc:	3f 93       	push	r19
      fe:	6f 93       	push	r22
     100:	7f 93       	push	r23
     102:	8f 93       	push	r24
     104:	9f 93       	push	r25
     106:	af 93       	push	r26
     108:	bf 93       	push	r27
	if(working==1) //Check if echo is high, start timer
     10a:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <working>
     10e:	81 30       	cpi	r24, 0x01	; 1
     110:	31 f5       	brne	.+76     	; 0x15e <__vector_2+0x6e>
	{
		if(rising_edge==0)
     112:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <rising_edge>
     116:	81 11       	cpse	r24, r1
     118:	09 c0       	rjmp	.+18     	; 0x12c <__vector_2+0x3c>
		{
			rising_edge=1;
     11a:	81 e0       	ldi	r24, 0x01	; 1
     11c:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <rising_edge>
			TCNT0 = 0;
     120:	16 bc       	out	0x26, r1	; 38
			timer_value = 0;
     122:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <timer_value+0x1>
     126:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <timer_value>
     12a:	19 c0       	rjmp	.+50     	; 0x15e <__vector_2+0x6e>
		}
		else //Check if echo turned low, calculate distance
		{
			rising_edge = 0;
     12c:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <rising_edge>
			distance_cm = (timer_value*256 + TCNT0)/58;
     130:	86 b5       	in	r24, 0x26	; 38
     132:	20 e0       	ldi	r18, 0x00	; 0
     134:	30 e0       	ldi	r19, 0x00	; 0
     136:	30 91 75 02 	lds	r19, 0x0275	; 0x800275 <timer_value>
     13a:	28 0f       	add	r18, r24
     13c:	31 1d       	adc	r19, r1
     13e:	af e9       	ldi	r26, 0x9F	; 159
     140:	b6 e4       	ldi	r27, 0x46	; 70
     142:	0e 94 bf 04 	call	0x97e	; 0x97e <__umulhisi3>
     146:	92 95       	swap	r25
     148:	82 95       	swap	r24
     14a:	8f 70       	andi	r24, 0x0F	; 15
     14c:	89 27       	eor	r24, r25
     14e:	9f 70       	andi	r25, 0x0F	; 15
     150:	89 27       	eor	r24, r25
     152:	90 93 7a 02 	sts	0x027A, r25	; 0x80027a <distance_cm+0x1>
     156:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <distance_cm>
			working = 0;
     15a:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <working>
		}
	}
}
     15e:	bf 91       	pop	r27
     160:	af 91       	pop	r26
     162:	9f 91       	pop	r25
     164:	8f 91       	pop	r24
     166:	7f 91       	pop	r23
     168:	6f 91       	pop	r22
     16a:	3f 91       	pop	r19
     16c:	2f 91       	pop	r18
     16e:	0f 90       	pop	r0
     170:	0f be       	out	0x3f, r0	; 63
     172:	0f 90       	pop	r0
     174:	1f 90       	pop	r1
     176:	18 95       	reti

00000178 <initEEPROM>:
/* Initialises the eeprom with default values if this device never has booted yet.
/* Since all the EEPROM is filled with 1's, we take a random byte and read its value.
/* If its a one, we can safely assume we can set default values.
/************************************************************************/
void initEEPROM()
{
     178:	cf 93       	push	r28
     17a:	df 93       	push	r29
     17c:	cd b7       	in	r28, 0x3d	; 61
     17e:	de b7       	in	r29, 0x3e	; 62
     180:	28 97       	sbiw	r28, 0x08	; 8
     182:	0f b6       	in	r0, 0x3f	; 63
     184:	f8 94       	cli
     186:	de bf       	out	0x3e, r29	; 62
     188:	0f be       	out	0x3f, r0	; 63
     18a:	cd bf       	out	0x3d, r28	; 61
	uint8_t SRAMFirstBoot;
	
	SRAMFirstBoot = eeprom_read_word(&FirstBoot);
     18c:	84 e0       	ldi	r24, 0x04	; 4
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <eeprom_read_word>

	if (SRAMFirstBoot != 0) {
     194:	88 23       	and	r24, r24
     196:	09 f4       	brne	.+2      	; 0x19a <initEEPROM+0x22>
     198:	41 c0       	rjmp	.+130    	; 0x21c <initEEPROM+0xa4>
		char string[] = "NO-NAME";
     19a:	88 e0       	ldi	r24, 0x08	; 8
     19c:	ee e0       	ldi	r30, 0x0E	; 14
     19e:	f1 e0       	ldi	r31, 0x01	; 1
     1a0:	de 01       	movw	r26, r28
     1a2:	11 96       	adiw	r26, 0x01	; 1
     1a4:	01 90       	ld	r0, Z+
     1a6:	0d 92       	st	X+, r0
     1a8:	8a 95       	dec	r24
     1aa:	e1 f7       	brne	.-8      	; 0x1a4 <initEEPROM+0x2c>
		eeprom_write_block((const void*)string, DeviceName, 10);
     1ac:	4a e0       	ldi	r20, 0x0A	; 10
     1ae:	50 e0       	ldi	r21, 0x00	; 0
     1b0:	6d e0       	ldi	r22, 0x0D	; 13
     1b2:	70 e0       	ldi	r23, 0x00	; 0
     1b4:	ce 01       	movw	r24, r28
     1b6:	01 96       	adiw	r24, 0x01	; 1
     1b8:	0e 94 00 09 	call	0x1200	; 0x1200 <eeprom_write_block>
		eeprom_write_word((uint16_t *) &Mode, 0x1);
     1bc:	61 e0       	ldi	r22, 0x01	; 1
     1be:	70 e0       	ldi	r23, 0x00	; 0
     1c0:	82 e0       	ldi	r24, 0x02	; 2
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	0e 94 18 09 	call	0x1230	; 0x1230 <eeprom_write_word>
		eeprom_write_word((uint16_t *)&TempMin, 0x0);
     1c8:	60 e0       	ldi	r22, 0x00	; 0
     1ca:	70 e0       	ldi	r23, 0x00	; 0
     1cc:	89 e0       	ldi	r24, 0x09	; 9
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	0e 94 18 09 	call	0x1230	; 0x1230 <eeprom_write_word>
		eeprom_write_word((uint16_t *) &TempMax, 0x50);
     1d4:	60 e5       	ldi	r22, 0x50	; 80
     1d6:	70 e0       	ldi	r23, 0x00	; 0
     1d8:	8b e0       	ldi	r24, 0x0B	; 11
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	0e 94 18 09 	call	0x1230	; 0x1230 <eeprom_write_word>
		eeprom_write_word((uint16_t *) &LightThresholdMin, 0xDF);
     1e0:	6f ed       	ldi	r22, 0xDF	; 223
     1e2:	70 e0       	ldi	r23, 0x00	; 0
     1e4:	87 e0       	ldi	r24, 0x07	; 7
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	0e 94 18 09 	call	0x1230	; 0x1230 <eeprom_write_word>
		eeprom_write_word((uint16_t *) &LightThresholdMax, 0xEF);
     1ec:	6f ee       	ldi	r22, 0xEF	; 239
     1ee:	70 e0       	ldi	r23, 0x00	; 0
     1f0:	85 e0       	ldi	r24, 0x05	; 5
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	0e 94 18 09 	call	0x1230	; 0x1230 <eeprom_write_word>
		eeprom_write_word((uint16_t *) &LightThresholdMax, 0xEF);
     1f8:	6f ee       	ldi	r22, 0xEF	; 239
     1fa:	70 e0       	ldi	r23, 0x00	; 0
     1fc:	85 e0       	ldi	r24, 0x05	; 5
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	0e 94 18 09 	call	0x1230	; 0x1230 <eeprom_write_word>
		eeprom_write_word((uint16_t *) &MaxDistance, 0x96);
     204:	66 e9       	ldi	r22, 0x96	; 150
     206:	70 e0       	ldi	r23, 0x00	; 0
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	0e 94 18 09 	call	0x1230	; 0x1230 <eeprom_write_word>
		
		SRAMFirstBoot = 0x0;
		eeprom_write_word(&FirstBoot, SRAMFirstBoot);
     210:	60 e0       	ldi	r22, 0x00	; 0
     212:	70 e0       	ldi	r23, 0x00	; 0
     214:	84 e0       	ldi	r24, 0x04	; 4
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	0e 94 18 09 	call	0x1230	; 0x1230 <eeprom_write_word>
	}
}
     21c:	28 96       	adiw	r28, 0x08	; 8
     21e:	0f b6       	in	r0, 0x3f	; 63
     220:	f8 94       	cli
     222:	de bf       	out	0x3e, r29	; 62
     224:	0f be       	out	0x3f, r0	; 63
     226:	cd bf       	out	0x3d, r28	; 61
     228:	df 91       	pop	r29
     22a:	cf 91       	pop	r28
     22c:	08 95       	ret

0000022e <setMode>:
/************************************************************************/
/* Sets the mode either to automatic or manual, depending on value
/************************************************************************/
void setMode(uint16_t mode)
{
	eeprom_write_word((uint16_t *)&Mode, mode);
     22e:	bc 01       	movw	r22, r24
     230:	82 e0       	ldi	r24, 0x02	; 2
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	0e 94 18 09 	call	0x1230	; 0x1230 <eeprom_write_word>
     238:	08 95       	ret

0000023a <setTempMin>:
/************************************************************************/
/* Set the minimal temperature for the panel to go up in EEPROM
/************************************************************************/
void setTempMin(uint16_t temp)
{
	eeprom_write_word((uint16_t *)&TempMin, temp);
     23a:	bc 01       	movw	r22, r24
     23c:	89 e0       	ldi	r24, 0x09	; 9
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	0e 94 18 09 	call	0x1230	; 0x1230 <eeprom_write_word>
     244:	08 95       	ret

00000246 <setTempMax>:
/************************************************************************/
/* Set the maximal temperature for the panel to go up in EEPROM         
/************************************************************************/
void setTempMax(uint16_t temp)
{
	eeprom_write_word((uint16_t *)&TempMax, temp);
     246:	bc 01       	movw	r22, r24
     248:	8b e0       	ldi	r24, 0x0B	; 11
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	0e 94 18 09 	call	0x1230	; 0x1230 <eeprom_write_word>
     250:	08 95       	ret

00000252 <setLightMin>:
/************************************************************************/
/* Sets the minimal light threshold for the panel to down up in EEPROM
/************************************************************************/
void setLightMin(uint16_t light)
{
	eeprom_write_word((uint16_t *)&LightThresholdMin, light);
     252:	bc 01       	movw	r22, r24
     254:	87 e0       	ldi	r24, 0x07	; 7
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	0e 94 18 09 	call	0x1230	; 0x1230 <eeprom_write_word>
     25c:	08 95       	ret

0000025e <setLightMax>:
/************************************************************************/
/* Sets the maximal light threshold for the panel to down up in EEPROM                                                                     */
/************************************************************************/
void setLightMax(uint16_t light)
{
	eeprom_write_word((uint16_t *)&LightThresholdMax, light);
     25e:	bc 01       	movw	r22, r24
     260:	85 e0       	ldi	r24, 0x05	; 5
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0e 94 18 09 	call	0x1230	; 0x1230 <eeprom_write_word>
     268:	08 95       	ret

0000026a <setDeviceName>:
/************************************************************************/
/* Sets the device name in EEPROM. Device name can not be longer than 10 characters
/************************************************************************/
void setDeviceName(char* newName)
{
	int length = strlen(newName);
     26a:	fc 01       	movw	r30, r24
     26c:	01 90       	ld	r0, Z+
     26e:	00 20       	and	r0, r0
     270:	e9 f7       	brne	.-6      	; 0x26c <setDeviceName+0x2>
     272:	31 97       	sbiw	r30, 0x01	; 1
     274:	e8 1b       	sub	r30, r24
     276:	f9 0b       	sbc	r31, r25
	
	if (length > 10) {
     278:	3b 97       	sbiw	r30, 0x0b	; 11
     27a:	4c f0       	brlt	.+18     	; 0x28e <setDeviceName+0x24>
		printf("5:name_too_long \r");
     27c:	86 e1       	ldi	r24, 0x16	; 22
     27e:	91 e0       	ldi	r25, 0x01	; 1
     280:	9f 93       	push	r25
     282:	8f 93       	push	r24
     284:	0e 94 10 06 	call	0xc20	; 0xc20 <printf>
     288:	0f 90       	pop	r0
     28a:	0f 90       	pop	r0
     28c:	08 95       	ret
	} else {
		eeprom_write_block((const void*)newName, DeviceName, 10);
     28e:	4a e0       	ldi	r20, 0x0A	; 10
     290:	50 e0       	ldi	r21, 0x00	; 0
     292:	6d e0       	ldi	r22, 0x0D	; 13
     294:	70 e0       	ldi	r23, 0x00	; 0
     296:	0e 94 00 09 	call	0x1200	; 0x1200 <eeprom_write_block>
		printf("2\r\n");	
     29a:	88 e2       	ldi	r24, 0x28	; 40
     29c:	91 e0       	ldi	r25, 0x01	; 1
     29e:	0e 94 26 06 	call	0xc4c	; 0xc4c <puts>
     2a2:	08 95       	ret

000002a4 <setDistanceMax>:
/************************************************************************/
/* Sets the maximum distance the panel can go down in EEPROM
/************************************************************************/
void setDistanceMax(uint16_t distance)
{
	eeprom_write_word((uint16_t *)&MaxDistance, distance);
     2a4:	bc 01       	movw	r22, r24
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	0e 94 18 09 	call	0x1230	; 0x1230 <eeprom_write_word>
     2ae:	08 95       	ret

000002b0 <getDeviceName>:

/************************************************************************/
/* Sets the value of the device name stored in EEPROM in to the string variable
/************************************************************************/
void getDeviceName(char* string, int buffersize)
{
     2b0:	ef 92       	push	r14
     2b2:	ff 92       	push	r15
     2b4:	0f 93       	push	r16
     2b6:	1f 93       	push	r17
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	cd b7       	in	r28, 0x3d	; 61
     2be:	de b7       	in	r29, 0x3e	; 62
     2c0:	2a 97       	sbiw	r28, 0x0a	; 10
     2c2:	0f b6       	in	r0, 0x3f	; 63
     2c4:	f8 94       	cli
     2c6:	de bf       	out	0x3e, r29	; 62
     2c8:	0f be       	out	0x3f, r0	; 63
     2ca:	cd bf       	out	0x3d, r28	; 61
     2cc:	7c 01       	movw	r14, r24
     2ce:	8b 01       	movw	r16, r22
	char  SRAMDeviceName[10];
	
	eeprom_read_block((void*)&SRAMDeviceName, (const void*)&DeviceName, 10);
     2d0:	4a e0       	ldi	r20, 0x0A	; 10
     2d2:	50 e0       	ldi	r21, 0x00	; 0
     2d4:	6d e0       	ldi	r22, 0x0D	; 13
     2d6:	70 e0       	ldi	r23, 0x00	; 0
     2d8:	ce 01       	movw	r24, r28
     2da:	01 96       	adiw	r24, 0x01	; 1
     2dc:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <eeprom_read_block>
	
	strncpy(string, SRAMDeviceName, buffersize-1);
     2e0:	a8 01       	movw	r20, r16
     2e2:	41 50       	subi	r20, 0x01	; 1
     2e4:	51 09       	sbc	r21, r1
     2e6:	be 01       	movw	r22, r28
     2e8:	6f 5f       	subi	r22, 0xFF	; 255
     2ea:	7f 4f       	sbci	r23, 0xFF	; 255
     2ec:	c7 01       	movw	r24, r14
     2ee:	0e 94 01 06 	call	0xc02	; 0xc02 <strncpy>
	string[buffersize-1] = '\0';
     2f2:	0e 0d       	add	r16, r14
     2f4:	1f 1d       	adc	r17, r15
     2f6:	f8 01       	movw	r30, r16
     2f8:	31 97       	sbiw	r30, 0x01	; 1
     2fa:	10 82       	st	Z, r1
}
     2fc:	2a 96       	adiw	r28, 0x0a	; 10
     2fe:	0f b6       	in	r0, 0x3f	; 63
     300:	f8 94       	cli
     302:	de bf       	out	0x3e, r29	; 62
     304:	0f be       	out	0x3f, r0	; 63
     306:	cd bf       	out	0x3d, r28	; 61
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	1f 91       	pop	r17
     30e:	0f 91       	pop	r16
     310:	ff 90       	pop	r15
     312:	ef 90       	pop	r14
     314:	08 95       	ret

00000316 <get_config>:

/************************************************************************/
/* Prints a string with all the values stored in EEPROM
/************************************************************************/
void get_config()
{
     316:	4f 92       	push	r4
     318:	5f 92       	push	r5
     31a:	6f 92       	push	r6
     31c:	7f 92       	push	r7
     31e:	8f 92       	push	r8
     320:	9f 92       	push	r9
     322:	af 92       	push	r10
     324:	bf 92       	push	r11
     326:	cf 92       	push	r12
     328:	df 92       	push	r13
     32a:	ef 92       	push	r14
     32c:	ff 92       	push	r15
     32e:	0f 93       	push	r16
     330:	1f 93       	push	r17
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	cd b7       	in	r28, 0x3d	; 61
     338:	de b7       	in	r29, 0x3e	; 62
     33a:	2a 97       	sbiw	r28, 0x0a	; 10
     33c:	0f b6       	in	r0, 0x3f	; 63
     33e:	f8 94       	cli
     340:	de bf       	out	0x3e, r29	; 62
     342:	0f be       	out	0x3f, r0	; 63
     344:	cd bf       	out	0x3d, r28	; 61
	uint16_t SRAMMaxDistance;
	
	char SRAMDeviceName[10];
	
	int id = 1337; //unique project identifier
	SRAMMode = eeprom_read_word(&Mode);
     346:	82 e0       	ldi	r24, 0x02	; 2
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <eeprom_read_word>
     34e:	f8 2e       	mov	r15, r24
     350:	e9 2e       	mov	r14, r25
	SRAMTempMax = eeprom_read_word(&TempMax);
     352:	8b e0       	ldi	r24, 0x0B	; 11
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <eeprom_read_word>
     35a:	b8 2e       	mov	r11, r24
     35c:	a9 2e       	mov	r10, r25
	SRAMTempMin = eeprom_read_word(&TempMin);
     35e:	89 e0       	ldi	r24, 0x09	; 9
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <eeprom_read_word>
     366:	d8 2e       	mov	r13, r24
     368:	c9 2e       	mov	r12, r25
	SRAMLightThresholdMax = eeprom_read_word(&LightThresholdMax);
     36a:	85 e0       	ldi	r24, 0x05	; 5
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <eeprom_read_word>
     372:	78 2e       	mov	r7, r24
     374:	69 2e       	mov	r6, r25
	SRAMLightThresholdMin = eeprom_read_word(&LightThresholdMin);
     376:	87 e0       	ldi	r24, 0x07	; 7
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <eeprom_read_word>
     37e:	98 2e       	mov	r9, r24
     380:	89 2e       	mov	r8, r25
	SRAMMaxDistance = eeprom_read_word(&MaxDistance);
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <eeprom_read_word>
     38a:	58 2e       	mov	r5, r24
     38c:	49 2e       	mov	r4, r25
	
	getDeviceName(SRAMDeviceName, sizeof(SRAMDeviceName));
     38e:	6a e0       	ldi	r22, 0x0A	; 10
     390:	70 e0       	ldi	r23, 0x00	; 0
     392:	8e 01       	movw	r16, r28
     394:	0f 5f       	subi	r16, 0xFF	; 255
     396:	1f 4f       	sbci	r17, 0xFF	; 255
     398:	c8 01       	movw	r24, r16
     39a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <getDeviceName>

	printf("2:%i,%s,%i,%i,%i,%i,%i,%i \r\n", id, SRAMDeviceName, SRAMMode, SRAMTempMin, SRAMTempMax, SRAMLightThresholdMin,SRAMLightThresholdMax, SRAMMaxDistance);
     39e:	4f 92       	push	r4
     3a0:	5f 92       	push	r5
     3a2:	6f 92       	push	r6
     3a4:	7f 92       	push	r7
     3a6:	8f 92       	push	r8
     3a8:	9f 92       	push	r9
     3aa:	af 92       	push	r10
     3ac:	bf 92       	push	r11
     3ae:	cf 92       	push	r12
     3b0:	df 92       	push	r13
     3b2:	ef 92       	push	r14
     3b4:	ff 92       	push	r15
     3b6:	1f 93       	push	r17
     3b8:	0f 93       	push	r16
     3ba:	85 e0       	ldi	r24, 0x05	; 5
     3bc:	8f 93       	push	r24
     3be:	89 e3       	ldi	r24, 0x39	; 57
     3c0:	8f 93       	push	r24
     3c2:	8b e2       	ldi	r24, 0x2B	; 43
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	9f 93       	push	r25
     3c8:	8f 93       	push	r24
     3ca:	0e 94 10 06 	call	0xc20	; 0xc20 <printf>
}
     3ce:	0f b6       	in	r0, 0x3f	; 63
     3d0:	f8 94       	cli
     3d2:	de bf       	out	0x3e, r29	; 62
     3d4:	0f be       	out	0x3f, r0	; 63
     3d6:	cd bf       	out	0x3d, r28	; 61
     3d8:	2a 96       	adiw	r28, 0x0a	; 10
     3da:	0f b6       	in	r0, 0x3f	; 63
     3dc:	f8 94       	cli
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	0f be       	out	0x3f, r0	; 63
     3e2:	cd bf       	out	0x3d, r28	; 61
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	1f 91       	pop	r17
     3ea:	0f 91       	pop	r16
     3ec:	ff 90       	pop	r15
     3ee:	ef 90       	pop	r14
     3f0:	df 90       	pop	r13
     3f2:	cf 90       	pop	r12
     3f4:	bf 90       	pop	r11
     3f6:	af 90       	pop	r10
     3f8:	9f 90       	pop	r9
     3fa:	8f 90       	pop	r8
     3fc:	7f 90       	pop	r7
     3fe:	6f 90       	pop	r6
     400:	5f 90       	pop	r5
     402:	4f 90       	pop	r4
     404:	08 95       	ret

00000406 <panelUp>:
/************************************************************************/
/* Pulls the panel up
/************************************************************************/
int panelUp()
{
	if (panel_is_down == 1) {
     406:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <__data_end>
     40a:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <__data_end+0x1>
     40e:	01 97       	sbiw	r24, 0x01	; 1
     410:	e1 f4       	brne	.+56     	; 0x44a <panelUp+0x44>
		//clear red light first
		PORTB &= ~(1 << 0);
     412:	28 98       	cbi	0x05, 0	; 5
		int i;
		PORTB |= 1 << 1; //set green led
     414:	29 9a       	sbi	0x05, 1	; 5
     416:	25 e0       	ldi	r18, 0x05	; 5
     418:	30 e0       	ldi	r19, 0x00	; 0
		
		//toggle yellow led
		for (i = 0; i < 5; i ++) {
			PORTB ^= 1 << 2;
     41a:	94 e0       	ldi	r25, 0x04	; 4
     41c:	85 b1       	in	r24, 0x05	; 5
     41e:	89 27       	eor	r24, r25
     420:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     422:	4f ef       	ldi	r20, 0xFF	; 255
     424:	53 ed       	ldi	r21, 0xD3	; 211
     426:	80 e3       	ldi	r24, 0x30	; 48
     428:	41 50       	subi	r20, 0x01	; 1
     42a:	50 40       	sbci	r21, 0x00	; 0
     42c:	80 40       	sbci	r24, 0x00	; 0
     42e:	e1 f7       	brne	.-8      	; 0x428 <panelUp+0x22>
     430:	00 c0       	rjmp	.+0      	; 0x432 <panelUp+0x2c>
     432:	00 00       	nop
     434:	21 50       	subi	r18, 0x01	; 1
     436:	31 09       	sbc	r19, r1
		PORTB &= ~(1 << 0);
		int i;
		PORTB |= 1 << 1; //set green led
		
		//toggle yellow led
		for (i = 0; i < 5; i ++) {
     438:	89 f7       	brne	.-30     	; 0x41c <panelUp+0x16>
			PORTB ^= 1 << 2;
			_delay_ms(1000);
		}
		
		PORTB &= ~(1 << 2);
     43a:	2a 98       	cbi	0x05, 2	; 5
		panel_is_down = 0;
     43c:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <__data_end+0x1>
     440:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <__data_end>
		
		return 0;
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	08 95       	ret
	}
	
	return 1;
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	90 e0       	ldi	r25, 0x00	; 0
}
     44e:	08 95       	ret

00000450 <panelDown>:
/************************************************************************/
/* Lets the panel go down
/************************************************************************/
int panelDown()
{
	if (panel_is_down == 0) {
     450:	60 91 72 02 	lds	r22, 0x0272	; 0x800272 <__data_end>
     454:	70 91 73 02 	lds	r23, 0x0273	; 0x800273 <__data_end+0x1>
     458:	61 15       	cp	r22, r1
     45a:	71 05       	cpc	r23, r1
     45c:	e1 f4       	brne	.+56     	; 0x496 <panelDown+0x46>
		//clear green light first
		PORTB &= ~(1 << 1);
     45e:	29 98       	cbi	0x05, 1	; 5
		int i;
		PORTB |= 1 << 0; //set red led
     460:	28 9a       	sbi	0x05, 0	; 5
     462:	25 e0       	ldi	r18, 0x05	; 5
     464:	30 e0       	ldi	r19, 0x00	; 0
		
		//toggle yellow led
		for (i = 0; i < 5; i ++) {
			PORTB ^= 1 << 2;
     466:	44 e0       	ldi	r20, 0x04	; 4
     468:	95 b1       	in	r25, 0x05	; 5
     46a:	94 27       	eor	r25, r20
     46c:	95 b9       	out	0x05, r25	; 5
     46e:	5f ef       	ldi	r21, 0xFF	; 255
     470:	83 ed       	ldi	r24, 0xD3	; 211
     472:	90 e3       	ldi	r25, 0x30	; 48
     474:	51 50       	subi	r21, 0x01	; 1
     476:	80 40       	sbci	r24, 0x00	; 0
     478:	90 40       	sbci	r25, 0x00	; 0
     47a:	e1 f7       	brne	.-8      	; 0x474 <panelDown+0x24>
     47c:	00 c0       	rjmp	.+0      	; 0x47e <panelDown+0x2e>
     47e:	00 00       	nop
     480:	21 50       	subi	r18, 0x01	; 1
     482:	31 09       	sbc	r19, r1
		PORTB &= ~(1 << 1);
		int i;
		PORTB |= 1 << 0; //set red led
		
		//toggle yellow led
		for (i = 0; i < 5; i ++) {
     484:	89 f7       	brne	.-30     	; 0x468 <panelDown+0x18>
			PORTB ^= 1 << 2;
			_delay_ms(1000);
		}
		
		PORTB &= ~(1 << 2);
     486:	2a 98       	cbi	0x05, 2	; 5
		panel_is_down = 1;
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <__data_end+0x1>
     490:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <__data_end>
		
		return 0;
     494:	02 c0       	rjmp	.+4      	; 0x49a <panelDown+0x4a>
	}
	
	return 1;
     496:	61 e0       	ldi	r22, 0x01	; 1
     498:	70 e0       	ldi	r23, 0x00	; 0
}
     49a:	cb 01       	movw	r24, r22
     49c:	08 95       	ret

0000049e <initPanel>:
led lights indicating the panel is up
/************************************************************************/
void initPanel()
{
	//first set the B port with leds
	DDRB = 0x7;
     49e:	87 e0       	ldi	r24, 0x07	; 7
     4a0:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x7;
     4a2:	85 b9       	out	0x05, r24	; 5
     4a4:	2f ef       	ldi	r18, 0xFF	; 255
     4a6:	83 ec       	ldi	r24, 0xC3	; 195
     4a8:	99 e0       	ldi	r25, 0x09	; 9
     4aa:	21 50       	subi	r18, 0x01	; 1
     4ac:	80 40       	sbci	r24, 0x00	; 0
     4ae:	90 40       	sbci	r25, 0x00	; 0
     4b0:	e1 f7       	brne	.-8      	; 0x4aa <initPanel+0xc>
     4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <initPanel+0x16>
     4b4:	00 00       	nop
	_delay_ms(200);
	PORTB = 0x1;
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	85 b9       	out	0x05, r24	; 5
     4ba:	08 95       	ret

000004bc <__vector_11>:
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
     4bc:	1f 92       	push	r1
     4be:	0f 92       	push	r0
     4c0:	0f b6       	in	r0, 0x3f	; 63
     4c2:	0f 92       	push	r0
     4c4:	11 24       	eor	r1, r1
     4c6:	2f 93       	push	r18
     4c8:	3f 93       	push	r19
     4ca:	8f 93       	push	r24
     4cc:	9f 93       	push	r25
     4ce:	af 93       	push	r26
     4d0:	bf 93       	push	r27
     4d2:	ef 93       	push	r30
     4d4:	ff 93       	push	r31
     4d6:	eb e7       	ldi	r30, 0x7B	; 123
     4d8:	f2 e0       	ldi	r31, 0x02	; 2
     4da:	2e e9       	ldi	r18, 0x9E	; 158
     4dc:	32 e0       	ldi	r19, 0x02	; 2
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
     4de:	80 81       	ld	r24, Z
     4e0:	91 81       	ldd	r25, Z+1	; 0x01
     4e2:	89 2b       	or	r24, r25
     4e4:	91 f0       	breq	.+36     	; 0x50a <__vector_11+0x4e>
      {
         if(SCH_tasks_G[Index].Delay == 0)
     4e6:	82 81       	ldd	r24, Z+2	; 0x02
     4e8:	93 81       	ldd	r25, Z+3	; 0x03
     4ea:	00 97       	sbiw	r24, 0x00	; 0
     4ec:	59 f4       	brne	.+22     	; 0x504 <__vector_11+0x48>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
     4ee:	86 81       	ldd	r24, Z+6	; 0x06
     4f0:	8f 5f       	subi	r24, 0xFF	; 255
     4f2:	86 83       	std	Z+6, r24	; 0x06

            if(SCH_tasks_G[Index].Period)
     4f4:	84 81       	ldd	r24, Z+4	; 0x04
     4f6:	95 81       	ldd	r25, Z+5	; 0x05
     4f8:	00 97       	sbiw	r24, 0x00	; 0
     4fa:	39 f0       	breq	.+14     	; 0x50a <__vector_11+0x4e>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
     4fc:	01 97       	sbiw	r24, 0x01	; 1
     4fe:	93 83       	std	Z+3, r25	; 0x03
     500:	82 83       	std	Z+2, r24	; 0x02
     502:	03 c0       	rjmp	.+6      	; 0x50a <__vector_11+0x4e>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
     504:	01 97       	sbiw	r24, 0x01	; 1
     506:	93 83       	std	Z+3, r25	; 0x03
     508:	82 83       	std	Z+2, r24	; 0x02
     50a:	37 96       	adiw	r30, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
     50c:	e2 17       	cp	r30, r18
     50e:	f3 07       	cpc	r31, r19
     510:	31 f7       	brne	.-52     	; 0x4de <__vector_11+0x22>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
     512:	ff 91       	pop	r31
     514:	ef 91       	pop	r30
     516:	bf 91       	pop	r27
     518:	af 91       	pop	r26
     51a:	9f 91       	pop	r25
     51c:	8f 91       	pop	r24
     51e:	3f 91       	pop	r19
     520:	2f 91       	pop	r18
     522:	0f 90       	pop	r0
     524:	0f be       	out	0x3f, r0	; 63
     526:	0f 90       	pop	r0
     528:	1f 90       	pop	r1
     52a:	18 95       	reti

0000052c <adc_init>:

void adc_init(void)
{
	//ADMUX = (1<<REFS0) | (1 << ADLAR);     //select AVCC as reference
	//ADCSRA = (1<<ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);  //enable and prescale = 128 (16MHz/128 = 125kHz)
	ADMUX |= (1 << REFS0) | (1 << ADLAR);
     52c:	ec e7       	ldi	r30, 0x7C	; 124
     52e:	f0 e0       	ldi	r31, 0x00	; 0
     530:	80 81       	ld	r24, Z
     532:	80 66       	ori	r24, 0x60	; 96
     534:	80 83       	st	Z, r24
	//enable ADC and set pre-scaler to 128
	ADCSRA = (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2) | (1 << ADEN);
     536:	87 e8       	ldi	r24, 0x87	; 135
     538:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     53c:	08 95       	ret

0000053e <adc_read>:
}

uint16_t adc_read()
{
	
	ADCSRA |= (1 << ADSC);
     53e:	ea e7       	ldi	r30, 0x7A	; 122
     540:	f0 e0       	ldi	r31, 0x00	; 0
     542:	80 81       	ld	r24, Z
     544:	80 64       	ori	r24, 0x40	; 64
     546:	80 83       	st	Z, r24
	/* This is an idle loop that just wait around until the conversion
	 * is finished.  It constantly checks ADCSRA's ADSC bit, which we just
	 * set above, to see if it is still set.  This bit is automatically
	 * reset (zeroed) when the conversion is ready so if we do this in
	 * a loop the loop will just go until the conversion is ready. */
	loop_until_bit_is_clear(ADCSRA, ADSC);
     548:	80 81       	ld	r24, Z
     54a:	86 fd       	sbrc	r24, 6
     54c:	fd cf       	rjmp	.-6      	; 0x548 <adc_read+0xa>
	/* Finally, we return the converted value to the calling function. */
	return ADCH;
     54e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	08 95       	ret

00000556 <readLight>:

uint16_t readLight()
{
	ADMUX = 0;
     556:	ec e7       	ldi	r30, 0x7C	; 124
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0) | (1 << ADLAR);
     55c:	80 81       	ld	r24, Z
     55e:	80 66       	ori	r24, 0x60	; 96
     560:	80 83       	st	Z, r24
	
	return adc_read();
     562:	0e 94 9f 02 	call	0x53e	; 0x53e <adc_read>
}
     566:	08 95       	ret

00000568 <getLight>:

void getLight() {
	int sensorValue = readLight();
     568:	0e 94 ab 02 	call	0x556	; 0x556 <readLight>
	
	printf("2:%i \r\n", sensorValue);
     56c:	9f 93       	push	r25
     56e:	8f 93       	push	r24
     570:	8f e4       	ldi	r24, 0x4F	; 79
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	9f 93       	push	r25
     576:	8f 93       	push	r24
     578:	0e 94 10 06 	call	0xc20	; 0xc20 <printf>
}
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	0f 90       	pop	r0
     584:	08 95       	ret

00000586 <readTemperature>:


int readTemperature()
{
	//zet refs0 en adlar en zet pin 0 en 1 aan (3)
	ADMUX = 0;
     586:	ec e7       	ldi	r30, 0x7C	; 124
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0) | (1 << ADLAR) | (1 << MUX1) | (1 << MUX0);
     58c:	80 81       	ld	r24, Z
     58e:	83 66       	ori	r24, 0x63	; 99
     590:	80 83       	st	Z, r24
	
	return adc_read() - 18;
     592:	0e 94 9f 02 	call	0x53e	; 0x53e <adc_read>
     596:	42 97       	sbiw	r24, 0x12	; 18
     598:	08 95       	ret

0000059a <getTemperature>:


void getTemperature() {
	int sensorInput;

	sensorInput = readTemperature();    //read the analog sensor and store it
     59a:	0e 94 c3 02 	call	0x586	; 0x586 <readTemperature>

	printf("2:%i\r\n", (int)sensorInput);
     59e:	9f 93       	push	r25
     5a0:	8f 93       	push	r24
     5a2:	88 e4       	ldi	r24, 0x48	; 72
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	9f 93       	push	r25
     5a8:	8f 93       	push	r24
     5aa:	0e 94 10 06 	call	0xc20	; 0xc20 <printf>
}
     5ae:	0f 90       	pop	r0
     5b0:	0f 90       	pop	r0
     5b2:	0f 90       	pop	r0
     5b4:	0f 90       	pop	r0
     5b6:	08 95       	ret

000005b8 <ser_init>:
}

void ser_writeln(char* s) {
	ser_write(s);
	ser_transmit('\r');
	ser_transmit('\n');
     5b8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     5bc:	87 e6       	ldi	r24, 0x67	; 103
     5be:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     5c2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     5c6:	88 e1       	ldi	r24, 0x18	; 24
     5c8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     5cc:	86 e0       	ldi	r24, 0x06	; 6
     5ce:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	91 e0       	ldi	r25, 0x01	; 1
     5d6:	90 93 a1 02 	sts	0x02A1, r25	; 0x8002a1 <__iob+0x3>
     5da:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <__iob+0x2>
     5de:	08 95       	ret

000005e0 <ser_transmit>:
     5e0:	e0 ec       	ldi	r30, 0xC0	; 192
     5e2:	f0 e0       	ldi	r31, 0x00	; 0
     5e4:	90 81       	ld	r25, Z
     5e6:	95 ff       	sbrs	r25, 5
     5e8:	fd cf       	rjmp	.-6      	; 0x5e4 <ser_transmit+0x4>
     5ea:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     5ee:	08 95       	ret

000005f0 <ser_stdio_putchar>:
     5f0:	cf 93       	push	r28
     5f2:	c8 2f       	mov	r28, r24
     5f4:	8a 30       	cpi	r24, 0x0A	; 10
     5f6:	19 f4       	brne	.+6      	; 0x5fe <ser_stdio_putchar+0xe>
     5f8:	8d e0       	ldi	r24, 0x0D	; 13
     5fa:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ser_transmit>
     5fe:	8c 2f       	mov	r24, r28
     600:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ser_transmit>
     604:	cf 91       	pop	r28
     606:	08 95       	ret

00000608 <ser_receive>:
     608:	e0 ec       	ldi	r30, 0xC0	; 192
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	80 81       	ld	r24, Z
     60e:	88 23       	and	r24, r24
     610:	ec f7       	brge	.-6      	; 0x60c <ser_receive+0x4>
     612:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     616:	08 95       	ret

00000618 <ser_readln>:
}

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
     618:	af 92       	push	r10
     61a:	bf 92       	push	r11
     61c:	cf 92       	push	r12
     61e:	df 92       	push	r13
     620:	ef 92       	push	r14
     622:	ff 92       	push	r15
     624:	0f 93       	push	r16
     626:	1f 93       	push	r17
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
     62c:	6c 01       	movw	r12, r24
     62e:	d4 2f       	mov	r29, r20
     630:	5c 01       	movw	r10, r24
	int i=0;
     632:	00 e0       	ldi	r16, 0x00	; 0
     634:	10 e0       	ldi	r17, 0x00	; 0
		if (echo) ser_transmit(c);
		if (c=='\r') {
			if (echo) ser_transmit('\n');
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
     636:	7b 01       	movw	r14, r22
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	e8 1a       	sub	r14, r24
     63c:	f1 08       	sbc	r15, r1
// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
	int i=0;

	while(1) {
		uint8_t c = ser_receive();
     63e:	0e 94 04 03 	call	0x608	; 0x608 <ser_receive>
     642:	c8 2f       	mov	r28, r24
		if (echo) ser_transmit(c);
     644:	d1 11       	cpse	r29, r1
     646:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ser_transmit>
		if (c=='\r') {
     64a:	cd 30       	cpi	r28, 0x0D	; 13
     64c:	31 f4       	brne	.+12     	; 0x65a <ser_readln+0x42>
			if (echo) ser_transmit('\n');
     64e:	dd 23       	and	r29, r29
     650:	69 f0       	breq	.+26     	; 0x66c <ser_readln+0x54>
     652:	8a e0       	ldi	r24, 0x0A	; 10
     654:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ser_transmit>
     658:	09 c0       	rjmp	.+18     	; 0x66c <ser_readln+0x54>
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
     65a:	0e 15       	cp	r16, r14
     65c:	1f 05       	cpc	r17, r15
     65e:	7c f7       	brge	.-34     	; 0x63e <ser_readln+0x26>
			buf[i++]=c;
     660:	0f 5f       	subi	r16, 0xFF	; 255
     662:	1f 4f       	sbci	r17, 0xFF	; 255
     664:	f5 01       	movw	r30, r10
     666:	c1 93       	st	Z+, r28
     668:	5f 01       	movw	r10, r30
     66a:	e9 cf       	rjmp	.-46     	; 0x63e <ser_readln+0x26>
		}
	}
	buf[i]='\0';
     66c:	f6 01       	movw	r30, r12
     66e:	e0 0f       	add	r30, r16
     670:	f1 1f       	adc	r31, r17
     672:	10 82       	st	Z, r1
}
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	1f 91       	pop	r17
     67a:	0f 91       	pop	r16
     67c:	ff 90       	pop	r15
     67e:	ef 90       	pop	r14
     680:	df 90       	pop	r13
     682:	cf 90       	pop	r12
     684:	bf 90       	pop	r11
     686:	af 90       	pop	r10
     688:	08 95       	ret

0000068a <run>:
/* This is the main function of the application. It checks for temperature conditions 
and does something with the panel accordingly.
It also checks if its light enough for the panel to go down or up.
/************************************************************************/
void run()
{
     68a:	0f 93       	push	r16
     68c:	1f 93       	push	r17
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
	uint8_t temp = readTemperature();
     692:	0e 94 c3 02 	call	0x586	; 0x586 <readTemperature>
     696:	ec 01       	movw	r28, r24
	uint16_t SRAMTempMin;
	uint16_t SRAMTempMax;

	SRAMTempMin = eeprom_read_word(&TempMin);
     698:	89 e0       	ldi	r24, 0x09	; 9
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <eeprom_read_word>
     6a0:	8c 01       	movw	r16, r24
	SRAMTempMax = eeprom_read_word(&TempMax);
     6a2:	8b e0       	ldi	r24, 0x0B	; 11
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <eeprom_read_word>
	
	
	//Check for climate change
	if (temp > SRAMTempMax) {
     6aa:	9e 01       	movw	r18, r28
     6ac:	33 27       	eor	r19, r19
     6ae:	82 17       	cp	r24, r18
     6b0:	93 07       	cpc	r25, r19
     6b2:	18 f4       	brcc	.+6      	; 0x6ba <run+0x30>
		panelUp();
     6b4:	0e 94 03 02 	call	0x406	; 0x406 <panelUp>
     6b8:	05 c0       	rjmp	.+10     	; 0x6c4 <run+0x3a>
	} else if (temp < SRAMTempMin) {
     6ba:	20 17       	cp	r18, r16
     6bc:	31 07       	cpc	r19, r17
     6be:	10 f4       	brcc	.+4      	; 0x6c4 <run+0x3a>
		panelDown();
     6c0:	0e 94 28 02 	call	0x450	; 0x450 <panelDown>
	
	//Light?!
	uint16_t SRAMLightMin;
	uint16_t SRAMLightMax;
	
	SRAMLightMax = eeprom_read_word(&LightThresholdMax);
     6c4:	85 e0       	ldi	r24, 0x05	; 5
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <eeprom_read_word>
     6cc:	ec 01       	movw	r28, r24
	SRAMLightMin = eeprom_read_word(&LightThresholdMin);
     6ce:	87 e0       	ldi	r24, 0x07	; 7
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <eeprom_read_word>
     6d6:	8c 01       	movw	r16, r24
	
	uint16_t isManual;
	isManual = eeprom_read_word(&Mode);
     6d8:	82 e0       	ldi	r24, 0x02	; 2
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <eeprom_read_word>
	if (isManual != 1) {
     6e0:	01 97       	sbiw	r24, 0x01	; 1
     6e2:	79 f0       	breq	.+30     	; 0x702 <run+0x78>
		if (readLight() > SRAMLightMax) {
     6e4:	0e 94 ab 02 	call	0x556	; 0x556 <readLight>
     6e8:	c8 17       	cp	r28, r24
     6ea:	d9 07       	cpc	r29, r25
     6ec:	18 f4       	brcc	.+6      	; 0x6f4 <run+0x6a>
			panelDown();
     6ee:	0e 94 28 02 	call	0x450	; 0x450 <panelDown>
     6f2:	07 c0       	rjmp	.+14     	; 0x702 <run+0x78>
		} else if(readLight() < SRAMLightMin) {
     6f4:	0e 94 ab 02 	call	0x556	; 0x556 <readLight>
     6f8:	80 17       	cp	r24, r16
     6fa:	91 07       	cpc	r25, r17
     6fc:	10 f4       	brcc	.+4      	; 0x702 <run+0x78>
			panelUp();
     6fe:	0e 94 03 02 	call	0x406	; 0x406 <panelUp>
		}	
	}
}
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	1f 91       	pop	r17
     708:	0f 91       	pop	r16
     70a:	08 95       	ret

0000070c <init_timer>:

void init_timer()
{
	TCCR0A = (1 << WGM00) | (1 << COM0A1);
     70c:	81 e8       	ldi	r24, 0x81	; 129
     70e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);
     710:	83 e0       	ldi	r24, 0x03	; 3
     712:	85 bd       	out	0x25, r24	; 37
	OCR0A = 0;
     714:	17 bc       	out	0x27, r1	; 39
     716:	08 95       	ret

00000718 <deleteEnd>:


/************************************************************************/
/* Deletes the end of a string after the delimiter
/************************************************************************/
void deleteEnd (char* str) {
     718:	dc 01       	movw	r26, r24
	char *del = &str[strlen(str)];
     71a:	fc 01       	movw	r30, r24
     71c:	01 90       	ld	r0, Z+
     71e:	00 20       	and	r0, r0
     720:	e9 f7       	brne	.-6      	; 0x71c <deleteEnd+0x4>
     722:	31 97       	sbiw	r30, 0x01	; 1

	while (del > str) {
     724:	8e 17       	cp	r24, r30
     726:	9f 07       	cpc	r25, r31
     728:	38 f4       	brcc	.+14     	; 0x738 <deleteEnd+0x20>
		del--;
		
		if (*del== ':') {
     72a:	92 91       	ld	r25, -Z
     72c:	9a 33       	cpi	r25, 0x3A	; 58
     72e:	09 f4       	brne	.+2      	; 0x732 <deleteEnd+0x1a>
			*del= '\0';
     730:	10 82       	st	Z, r1
/* Deletes the end of a string after the delimiter
/************************************************************************/
void deleteEnd (char* str) {
	char *del = &str[strlen(str)];

	while (del > str) {
     732:	ae 17       	cp	r26, r30
     734:	bf 07       	cpc	r27, r31
     736:	c9 f7       	brne	.-14     	; 0x72a <deleteEnd+0x12>
     738:	08 95       	ret

0000073a <listen>:

/************************************************************************/
/* Listen function. Listens to serial connection for commands
/************************************************************************/
void listen()
{
     73a:	cf 92       	push	r12
     73c:	df 92       	push	r13
     73e:	ef 92       	push	r14
     740:	ff 92       	push	r15
     742:	0f 93       	push	r16
     744:	1f 93       	push	r17
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	cd b7       	in	r28, 0x3d	; 61
     74c:	de b7       	in	r29, 0x3e	; 62
     74e:	a8 97       	sbiw	r28, 0x28	; 40
     750:	0f b6       	in	r0, 0x3f	; 63
     752:	f8 94       	cli
     754:	de bf       	out	0x3e, r29	; 62
     756:	0f be       	out	0x3f, r0	; 63
     758:	cd bf       	out	0x3d, r28	; 61
	char input[40];
	
	if (UCSR0A & (1 << RXC0)) {
     75a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     75e:	88 23       	and	r24, r24
     760:	0c f0       	brlt	.+2      	; 0x764 <listen+0x2a>
     762:	ef c0       	rjmp	.+478    	; 0x942 <__stack+0x43>
		ser_readln(input, sizeof(input), 0);
     764:	40 e0       	ldi	r20, 0x00	; 0
     766:	68 e2       	ldi	r22, 0x28	; 40
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	ce 01       	movw	r24, r28
     76c:	01 96       	adiw	r24, 0x01	; 1
     76e:	0e 94 0c 03 	call	0x618	; 0x618 <ser_readln>
	
		const char delimiter = ':';
		char *value;
		
		value = strchr(input, delimiter);
     772:	6a e3       	ldi	r22, 0x3A	; 58
     774:	70 e0       	ldi	r23, 0x00	; 0
     776:	ce 01       	movw	r24, r28
     778:	01 96       	adiw	r24, 0x01	; 1
     77a:	0e 94 ed 05 	call	0xbda	; 0xbda <strchr>
		value++; //remove spacer from string
     77e:	8c 01       	movw	r16, r24
     780:	0f 5f       	subi	r16, 0xFF	; 255
     782:	1f 4f       	sbci	r17, 0xFF	; 255
		deleteEnd(input);
     784:	ce 01       	movw	r24, r28
     786:	01 96       	adiw	r24, 0x01	; 1
     788:	0e 94 8c 03 	call	0x718	; 0x718 <deleteEnd>
		int newValue;
		newValue = strtol(value, NULL, 10);
     78c:	4a e0       	ldi	r20, 0x0A	; 10
     78e:	50 e0       	ldi	r21, 0x00	; 0
     790:	60 e0       	ldi	r22, 0x00	; 0
     792:	70 e0       	ldi	r23, 0x00	; 0
     794:	c8 01       	movw	r24, r16
     796:	0e 94 ce 04 	call	0x99c	; 0x99c <strtol>
     79a:	6b 01       	movw	r12, r22
     79c:	7c 01       	movw	r14, r24

		if(strcmp(&input, 			"get_temperature") == 0) {
     79e:	67 e5       	ldi	r22, 0x57	; 87
     7a0:	71 e0       	ldi	r23, 0x01	; 1
     7a2:	ce 01       	movw	r24, r28
     7a4:	01 96       	adiw	r24, 0x01	; 1
     7a6:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <strcmp>
     7aa:	89 2b       	or	r24, r25
     7ac:	19 f4       	brne	.+6      	; 0x7b4 <listen+0x7a>
			getTemperature();
     7ae:	0e 94 cd 02 	call	0x59a	; 0x59a <getTemperature>
     7b2:	c7 c0       	rjmp	.+398    	; 0x942 <__stack+0x43>
		} else if (strcmp(&input, 	"get_light") == 0) {
     7b4:	67 e6       	ldi	r22, 0x67	; 103
     7b6:	71 e0       	ldi	r23, 0x01	; 1
     7b8:	ce 01       	movw	r24, r28
     7ba:	01 96       	adiw	r24, 0x01	; 1
     7bc:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <strcmp>
     7c0:	89 2b       	or	r24, r25
     7c2:	19 f4       	brne	.+6      	; 0x7ca <listen+0x90>
			getLight();
     7c4:	0e 94 b4 02 	call	0x568	; 0x568 <getLight>
     7c8:	bc c0       	rjmp	.+376    	; 0x942 <__stack+0x43>
		} else if (strcmp(&input, 	"get_distance") == 0) {
     7ca:	61 e7       	ldi	r22, 0x71	; 113
     7cc:	71 e0       	ldi	r23, 0x01	; 1
     7ce:	ce 01       	movw	r24, r28
     7d0:	01 96       	adiw	r24, 0x01	; 1
     7d2:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <strcmp>
     7d6:	89 2b       	or	r24, r25
     7d8:	09 f4       	brne	.+2      	; 0x7dc <listen+0xa2>
     7da:	b3 c0       	rjmp	.+358    	; 0x942 <__stack+0x43>
			//distance = getDistance();
			//printf("2 %i\n\r", distance);
		} else if (strcmp(&input, 	"panel_out") == 0) {
     7dc:	6e e7       	ldi	r22, 0x7E	; 126
     7de:	71 e0       	ldi	r23, 0x01	; 1
     7e0:	ce 01       	movw	r24, r28
     7e2:	01 96       	adiw	r24, 0x01	; 1
     7e4:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <strcmp>
     7e8:	89 2b       	or	r24, r25
     7ea:	39 f4       	brne	.+14     	; 0x7fa <listen+0xc0>
			printf("2:\r\n");
     7ec:	88 e8       	ldi	r24, 0x88	; 136
     7ee:	91 e0       	ldi	r25, 0x01	; 1
     7f0:	0e 94 26 06 	call	0xc4c	; 0xc4c <puts>
			panelDown();
     7f4:	0e 94 28 02 	call	0x450	; 0x450 <panelDown>
     7f8:	a4 c0       	rjmp	.+328    	; 0x942 <__stack+0x43>
		} else if (strcmp(&input, 	"panel_in") == 0) {
     7fa:	6c e8       	ldi	r22, 0x8C	; 140
     7fc:	71 e0       	ldi	r23, 0x01	; 1
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <strcmp>
     806:	89 2b       	or	r24, r25
     808:	39 f4       	brne	.+14     	; 0x818 <listen+0xde>
			printf("2:\r\n");
     80a:	88 e8       	ldi	r24, 0x88	; 136
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	0e 94 26 06 	call	0xc4c	; 0xc4c <puts>
			panelUp();
     812:	0e 94 03 02 	call	0x406	; 0x406 <panelUp>
     816:	95 c0       	rjmp	.+298    	; 0x942 <__stack+0x43>
		} else if (strcmp(&input, 	"set_light_threshold_minimum") == 0) {
     818:	65 e9       	ldi	r22, 0x95	; 149
     81a:	71 e0       	ldi	r23, 0x01	; 1
     81c:	ce 01       	movw	r24, r28
     81e:	01 96       	adiw	r24, 0x01	; 1
     820:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <strcmp>
     824:	89 2b       	or	r24, r25
     826:	41 f4       	brne	.+16     	; 0x838 <listen+0xfe>
			setLightMin(newValue);
     828:	c6 01       	movw	r24, r12
     82a:	0e 94 29 01 	call	0x252	; 0x252 <setLightMin>
			printf("2:\r\n");
     82e:	88 e8       	ldi	r24, 0x88	; 136
     830:	91 e0       	ldi	r25, 0x01	; 1
     832:	0e 94 26 06 	call	0xc4c	; 0xc4c <puts>
     836:	85 c0       	rjmp	.+266    	; 0x942 <__stack+0x43>
		} else if (strcmp(&input, 	"set_light_threshold_maximum") == 0) {
     838:	61 eb       	ldi	r22, 0xB1	; 177
     83a:	71 e0       	ldi	r23, 0x01	; 1
     83c:	ce 01       	movw	r24, r28
     83e:	01 96       	adiw	r24, 0x01	; 1
     840:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <strcmp>
     844:	89 2b       	or	r24, r25
     846:	41 f4       	brne	.+16     	; 0x858 <listen+0x11e>
			setLightMax(newValue);
     848:	c6 01       	movw	r24, r12
     84a:	0e 94 2f 01 	call	0x25e	; 0x25e <setLightMax>
			printf("2:\r\n");
     84e:	88 e8       	ldi	r24, 0x88	; 136
     850:	91 e0       	ldi	r25, 0x01	; 1
     852:	0e 94 26 06 	call	0xc4c	; 0xc4c <puts>
     856:	75 c0       	rjmp	.+234    	; 0x942 <__stack+0x43>
		} else if (strcmp(&input, 	"set_temperature_threshold_minimum") == 0) {
     858:	6d ec       	ldi	r22, 0xCD	; 205
     85a:	71 e0       	ldi	r23, 0x01	; 1
     85c:	ce 01       	movw	r24, r28
     85e:	01 96       	adiw	r24, 0x01	; 1
     860:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <strcmp>
     864:	89 2b       	or	r24, r25
     866:	41 f4       	brne	.+16     	; 0x878 <listen+0x13e>
			setTempMin(newValue);
     868:	c6 01       	movw	r24, r12
     86a:	0e 94 1d 01 	call	0x23a	; 0x23a <setTempMin>
			printf("2:\r\n");
     86e:	88 e8       	ldi	r24, 0x88	; 136
     870:	91 e0       	ldi	r25, 0x01	; 1
     872:	0e 94 26 06 	call	0xc4c	; 0xc4c <puts>
     876:	65 c0       	rjmp	.+202    	; 0x942 <__stack+0x43>
		} else if (strcmp(&input, 	"set_temperature_threshold_maximum") == 0) {
     878:	6f ee       	ldi	r22, 0xEF	; 239
     87a:	71 e0       	ldi	r23, 0x01	; 1
     87c:	ce 01       	movw	r24, r28
     87e:	01 96       	adiw	r24, 0x01	; 1
     880:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <strcmp>
     884:	89 2b       	or	r24, r25
     886:	41 f4       	brne	.+16     	; 0x898 <listen+0x15e>
			setTempMax(newValue);
     888:	c6 01       	movw	r24, r12
     88a:	0e 94 23 01 	call	0x246	; 0x246 <setTempMax>
			printf("2:\r\n");
     88e:	88 e8       	ldi	r24, 0x88	; 136
     890:	91 e0       	ldi	r25, 0x01	; 1
     892:	0e 94 26 06 	call	0xc4c	; 0xc4c <puts>
     896:	55 c0       	rjmp	.+170    	; 0x942 <__stack+0x43>
		} else if (strcmp(&input, 	"set_max_distance") == 0) {
     898:	61 e1       	ldi	r22, 0x11	; 17
     89a:	72 e0       	ldi	r23, 0x02	; 2
     89c:	ce 01       	movw	r24, r28
     89e:	01 96       	adiw	r24, 0x01	; 1
     8a0:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <strcmp>
     8a4:	89 2b       	or	r24, r25
     8a6:	41 f4       	brne	.+16     	; 0x8b8 <listen+0x17e>
			setDistanceMax(newValue);
     8a8:	c6 01       	movw	r24, r12
     8aa:	0e 94 52 01 	call	0x2a4	; 0x2a4 <setDistanceMax>
			printf("2:\r\n");
     8ae:	88 e8       	ldi	r24, 0x88	; 136
     8b0:	91 e0       	ldi	r25, 0x01	; 1
     8b2:	0e 94 26 06 	call	0xc4c	; 0xc4c <puts>
     8b6:	45 c0       	rjmp	.+138    	; 0x942 <__stack+0x43>
		} else if (strcmp(&input, 	"handshake") == 0) {
     8b8:	62 e2       	ldi	r22, 0x22	; 34
     8ba:	72 e0       	ldi	r23, 0x02	; 2
     8bc:	ce 01       	movw	r24, r28
     8be:	01 96       	adiw	r24, 0x01	; 1
     8c0:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <strcmp>
     8c4:	89 2b       	or	r24, r25
     8c6:	19 f4       	brne	.+6      	; 0x8ce <listen+0x194>
			get_config();
     8c8:	0e 94 8b 01 	call	0x316	; 0x316 <get_config>
     8cc:	3a c0       	rjmp	.+116    	; 0x942 <__stack+0x43>
		} else if (strcmp(&input, 	"set_mode_automatic") == 0) {
     8ce:	6c e2       	ldi	r22, 0x2C	; 44
     8d0:	72 e0       	ldi	r23, 0x02	; 2
     8d2:	ce 01       	movw	r24, r28
     8d4:	01 96       	adiw	r24, 0x01	; 1
     8d6:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <strcmp>
     8da:	89 2b       	or	r24, r25
     8dc:	49 f4       	brne	.+18     	; 0x8f0 <listen+0x1b6>
			setMode(0);
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	0e 94 17 01 	call	0x22e	; 0x22e <setMode>
			printf("2:\r\n");
     8e6:	88 e8       	ldi	r24, 0x88	; 136
     8e8:	91 e0       	ldi	r25, 0x01	; 1
     8ea:	0e 94 26 06 	call	0xc4c	; 0xc4c <puts>
     8ee:	29 c0       	rjmp	.+82     	; 0x942 <__stack+0x43>
		} else if (strcmp(&input, 	"set_mode_manual") == 0) {
     8f0:	6f e3       	ldi	r22, 0x3F	; 63
     8f2:	72 e0       	ldi	r23, 0x02	; 2
     8f4:	ce 01       	movw	r24, r28
     8f6:	01 96       	adiw	r24, 0x01	; 1
     8f8:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <strcmp>
     8fc:	89 2b       	or	r24, r25
     8fe:	49 f4       	brne	.+18     	; 0x912 <__stack+0x13>
			setMode(1);
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	0e 94 17 01 	call	0x22e	; 0x22e <setMode>
			printf("2:\r\n");
     908:	88 e8       	ldi	r24, 0x88	; 136
     90a:	91 e0       	ldi	r25, 0x01	; 1
     90c:	0e 94 26 06 	call	0xc4c	; 0xc4c <puts>
     910:	18 c0       	rjmp	.+48     	; 0x942 <__stack+0x43>
		} else if (strcmp(&input, "set_device_name") == 0) {
     912:	6f e4       	ldi	r22, 0x4F	; 79
     914:	72 e0       	ldi	r23, 0x02	; 2
     916:	ce 01       	movw	r24, r28
     918:	01 96       	adiw	r24, 0x01	; 1
     91a:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <strcmp>
     91e:	89 2b       	or	r24, r25
     920:	41 f4       	brne	.+16     	; 0x932 <__stack+0x33>
			setDeviceName(value);
     922:	c8 01       	movw	r24, r16
     924:	0e 94 35 01 	call	0x26a	; 0x26a <setDeviceName>
			printf("2:\r\n");
     928:	88 e8       	ldi	r24, 0x88	; 136
     92a:	91 e0       	ldi	r25, 0x01	; 1
     92c:	0e 94 26 06 	call	0xc4c	; 0xc4c <puts>
     930:	08 c0       	rjmp	.+16     	; 0x942 <__stack+0x43>
		} else {
			printf("4:unkown_command \r");
     932:	8f e5       	ldi	r24, 0x5F	; 95
     934:	92 e0       	ldi	r25, 0x02	; 2
     936:	9f 93       	push	r25
     938:	8f 93       	push	r24
     93a:	0e 94 10 06 	call	0xc20	; 0xc20 <printf>
     93e:	0f 90       	pop	r0
     940:	0f 90       	pop	r0
		}
	}
}
     942:	a8 96       	adiw	r28, 0x28	; 40
     944:	0f b6       	in	r0, 0x3f	; 63
     946:	f8 94       	cli
     948:	de bf       	out	0x3e, r29	; 62
     94a:	0f be       	out	0x3f, r0	; 63
     94c:	cd bf       	out	0x3d, r28	; 61
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	1f 91       	pop	r17
     954:	0f 91       	pop	r16
     956:	ff 90       	pop	r15
     958:	ef 90       	pop	r14
     95a:	df 90       	pop	r13
     95c:	cf 90       	pop	r12
     95e:	08 95       	ret

00000960 <main>:

/************************************************************************/
/* Main function. Inits all the components of the application and runs the application
/************************************************************************/
int main() {
	ser_init();
     960:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <ser_init>
	adc_init();
     964:	0e 94 96 02 	call	0x52c	; 0x52c <adc_init>
	init_timer();
     968:	0e 94 86 03 	call	0x70c	; 0x70c <init_timer>
	initPanel();
     96c:	0e 94 4f 02 	call	0x49e	; 0x49e <initPanel>
	initEEPROM();
     970:	0e 94 bc 00 	call	0x178	; 0x178 <initEEPROM>
	//panelUp();
	
	while (1) {
		//Send_signal();
		//SCH_Dispatch_Tasks();
		listen();
     974:	0e 94 9d 03 	call	0x73a	; 0x73a <listen>
		run();
     978:	0e 94 45 03 	call	0x68a	; 0x68a <run>
     97c:	fb cf       	rjmp	.-10     	; 0x974 <main+0x14>

0000097e <__umulhisi3>:
     97e:	a2 9f       	mul	r26, r18
     980:	b0 01       	movw	r22, r0
     982:	b3 9f       	mul	r27, r19
     984:	c0 01       	movw	r24, r0
     986:	a3 9f       	mul	r26, r19
     988:	70 0d       	add	r23, r0
     98a:	81 1d       	adc	r24, r1
     98c:	11 24       	eor	r1, r1
     98e:	91 1d       	adc	r25, r1
     990:	b2 9f       	mul	r27, r18
     992:	70 0d       	add	r23, r0
     994:	81 1d       	adc	r24, r1
     996:	11 24       	eor	r1, r1
     998:	91 1d       	adc	r25, r1
     99a:	08 95       	ret

0000099c <strtol>:
     99c:	a0 e0       	ldi	r26, 0x00	; 0
     99e:	b0 e0       	ldi	r27, 0x00	; 0
     9a0:	e4 ed       	ldi	r30, 0xD4	; 212
     9a2:	f4 e0       	ldi	r31, 0x04	; 4
     9a4:	0c 94 5b 09 	jmp	0x12b6	; 0x12b6 <__prologue_saves__+0x2>
     9a8:	5c 01       	movw	r10, r24
     9aa:	6b 01       	movw	r12, r22
     9ac:	7a 01       	movw	r14, r20
     9ae:	61 15       	cp	r22, r1
     9b0:	71 05       	cpc	r23, r1
     9b2:	19 f0       	breq	.+6      	; 0x9ba <strtol+0x1e>
     9b4:	fb 01       	movw	r30, r22
     9b6:	91 83       	std	Z+1, r25	; 0x01
     9b8:	80 83       	st	Z, r24
     9ba:	e1 14       	cp	r14, r1
     9bc:	f1 04       	cpc	r15, r1
     9be:	29 f0       	breq	.+10     	; 0x9ca <strtol+0x2e>
     9c0:	c7 01       	movw	r24, r14
     9c2:	02 97       	sbiw	r24, 0x02	; 2
     9c4:	83 97       	sbiw	r24, 0x23	; 35
     9c6:	08 f0       	brcs	.+2      	; 0x9ca <strtol+0x2e>
     9c8:	e5 c0       	rjmp	.+458    	; 0xb94 <strtol+0x1f8>
     9ca:	e5 01       	movw	r28, r10
     9cc:	21 96       	adiw	r28, 0x01	; 1
     9ce:	f5 01       	movw	r30, r10
     9d0:	10 81       	ld	r17, Z
     9d2:	81 2f       	mov	r24, r17
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <isspace>
     9da:	89 2b       	or	r24, r25
     9dc:	11 f0       	breq	.+4      	; 0x9e2 <strtol+0x46>
     9de:	5e 01       	movw	r10, r28
     9e0:	f4 cf       	rjmp	.-24     	; 0x9ca <strtol+0x2e>
     9e2:	1d 32       	cpi	r17, 0x2D	; 45
     9e4:	29 f4       	brne	.+10     	; 0x9f0 <strtol+0x54>
     9e6:	21 96       	adiw	r28, 0x01	; 1
     9e8:	f5 01       	movw	r30, r10
     9ea:	11 81       	ldd	r17, Z+1	; 0x01
     9ec:	01 e0       	ldi	r16, 0x01	; 1
     9ee:	07 c0       	rjmp	.+14     	; 0x9fe <strtol+0x62>
     9f0:	1b 32       	cpi	r17, 0x2B	; 43
     9f2:	21 f4       	brne	.+8      	; 0x9fc <strtol+0x60>
     9f4:	e5 01       	movw	r28, r10
     9f6:	22 96       	adiw	r28, 0x02	; 2
     9f8:	f5 01       	movw	r30, r10
     9fa:	11 81       	ldd	r17, Z+1	; 0x01
     9fc:	00 e0       	ldi	r16, 0x00	; 0
     9fe:	e1 14       	cp	r14, r1
     a00:	f1 04       	cpc	r15, r1
     a02:	09 f1       	breq	.+66     	; 0xa46 <strtol+0xaa>
     a04:	f0 e1       	ldi	r31, 0x10	; 16
     a06:	ef 16       	cp	r14, r31
     a08:	f1 04       	cpc	r15, r1
     a0a:	29 f4       	brne	.+10     	; 0xa16 <strtol+0x7a>
     a0c:	3f c0       	rjmp	.+126    	; 0xa8c <strtol+0xf0>
     a0e:	10 e3       	ldi	r17, 0x30	; 48
     a10:	e1 14       	cp	r14, r1
     a12:	f1 04       	cpc	r15, r1
     a14:	21 f1       	breq	.+72     	; 0xa5e <strtol+0xc2>
     a16:	28 e0       	ldi	r18, 0x08	; 8
     a18:	e2 16       	cp	r14, r18
     a1a:	f1 04       	cpc	r15, r1
     a1c:	01 f1       	breq	.+64     	; 0xa5e <strtol+0xc2>
     a1e:	54 f4       	brge	.+20     	; 0xa34 <strtol+0x98>
     a20:	e2 e0       	ldi	r30, 0x02	; 2
     a22:	ee 16       	cp	r14, r30
     a24:	f1 04       	cpc	r15, r1
     a26:	21 f5       	brne	.+72     	; 0xa70 <strtol+0xd4>
     a28:	81 2c       	mov	r8, r1
     a2a:	91 2c       	mov	r9, r1
     a2c:	a1 2c       	mov	r10, r1
     a2e:	b0 e4       	ldi	r27, 0x40	; 64
     a30:	bb 2e       	mov	r11, r27
     a32:	3e c0       	rjmp	.+124    	; 0xab0 <strtol+0x114>
     a34:	fa e0       	ldi	r31, 0x0A	; 10
     a36:	ef 16       	cp	r14, r31
     a38:	f1 04       	cpc	r15, r1
     a3a:	39 f0       	breq	.+14     	; 0xa4a <strtol+0xae>
     a3c:	20 e1       	ldi	r18, 0x10	; 16
     a3e:	e2 16       	cp	r14, r18
     a40:	f1 04       	cpc	r15, r1
     a42:	b1 f4       	brne	.+44     	; 0xa70 <strtol+0xd4>
     a44:	30 c0       	rjmp	.+96     	; 0xaa6 <strtol+0x10a>
     a46:	10 33       	cpi	r17, 0x30	; 48
     a48:	19 f1       	breq	.+70     	; 0xa90 <strtol+0xf4>
     a4a:	fa e0       	ldi	r31, 0x0A	; 10
     a4c:	ef 2e       	mov	r14, r31
     a4e:	f1 2c       	mov	r15, r1
     a50:	ac ec       	ldi	r26, 0xCC	; 204
     a52:	8a 2e       	mov	r8, r26
     a54:	98 2c       	mov	r9, r8
     a56:	a8 2c       	mov	r10, r8
     a58:	ac e0       	ldi	r26, 0x0C	; 12
     a5a:	ba 2e       	mov	r11, r26
     a5c:	29 c0       	rjmp	.+82     	; 0xab0 <strtol+0x114>
     a5e:	78 e0       	ldi	r23, 0x08	; 8
     a60:	e7 2e       	mov	r14, r23
     a62:	f1 2c       	mov	r15, r1
     a64:	81 2c       	mov	r8, r1
     a66:	91 2c       	mov	r9, r1
     a68:	a1 2c       	mov	r10, r1
     a6a:	e0 e1       	ldi	r30, 0x10	; 16
     a6c:	be 2e       	mov	r11, r30
     a6e:	20 c0       	rjmp	.+64     	; 0xab0 <strtol+0x114>
     a70:	60 e0       	ldi	r22, 0x00	; 0
     a72:	70 e0       	ldi	r23, 0x00	; 0
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	90 e8       	ldi	r25, 0x80	; 128
     a78:	97 01       	movw	r18, r14
     a7a:	0f 2c       	mov	r0, r15
     a7c:	00 0c       	add	r0, r0
     a7e:	44 0b       	sbc	r20, r20
     a80:	55 0b       	sbc	r21, r21
     a82:	0e 94 2d 09 	call	0x125a	; 0x125a <__udivmodsi4>
     a86:	49 01       	movw	r8, r18
     a88:	5a 01       	movw	r10, r20
     a8a:	12 c0       	rjmp	.+36     	; 0xab0 <strtol+0x114>
     a8c:	10 33       	cpi	r17, 0x30	; 48
     a8e:	59 f4       	brne	.+22     	; 0xaa6 <strtol+0x10a>
     a90:	88 81       	ld	r24, Y
     a92:	8f 7d       	andi	r24, 0xDF	; 223
     a94:	88 35       	cpi	r24, 0x58	; 88
     a96:	09 f0       	breq	.+2      	; 0xa9a <strtol+0xfe>
     a98:	ba cf       	rjmp	.-140    	; 0xa0e <strtol+0x72>
     a9a:	19 81       	ldd	r17, Y+1	; 0x01
     a9c:	22 96       	adiw	r28, 0x02	; 2
     a9e:	02 60       	ori	r16, 0x02	; 2
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	e8 2e       	mov	r14, r24
     aa4:	f1 2c       	mov	r15, r1
     aa6:	81 2c       	mov	r8, r1
     aa8:	91 2c       	mov	r9, r1
     aaa:	a1 2c       	mov	r10, r1
     aac:	68 e0       	ldi	r22, 0x08	; 8
     aae:	b6 2e       	mov	r11, r22
     ab0:	40 e0       	ldi	r20, 0x00	; 0
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	cb 01       	movw	r24, r22
     ab8:	27 01       	movw	r4, r14
     aba:	0f 2c       	mov	r0, r15
     abc:	00 0c       	add	r0, r0
     abe:	66 08       	sbc	r6, r6
     ac0:	77 08       	sbc	r7, r7
     ac2:	fe 01       	movw	r30, r28
     ac4:	50 ed       	ldi	r21, 0xD0	; 208
     ac6:	35 2e       	mov	r3, r21
     ac8:	31 0e       	add	r3, r17
     aca:	29 e0       	ldi	r18, 0x09	; 9
     acc:	23 15       	cp	r18, r3
     ace:	70 f4       	brcc	.+28     	; 0xaec <strtol+0x150>
     ad0:	2f eb       	ldi	r18, 0xBF	; 191
     ad2:	21 0f       	add	r18, r17
     ad4:	2a 31       	cpi	r18, 0x1A	; 26
     ad6:	18 f4       	brcc	.+6      	; 0xade <strtol+0x142>
     ad8:	39 ec       	ldi	r19, 0xC9	; 201
     ada:	33 2e       	mov	r3, r19
     adc:	06 c0       	rjmp	.+12     	; 0xaea <strtol+0x14e>
     ade:	2f e9       	ldi	r18, 0x9F	; 159
     ae0:	21 0f       	add	r18, r17
     ae2:	2a 31       	cpi	r18, 0x1A	; 26
     ae4:	18 f5       	brcc	.+70     	; 0xb2c <strtol+0x190>
     ae6:	29 ea       	ldi	r18, 0xA9	; 169
     ae8:	32 2e       	mov	r3, r18
     aea:	31 0e       	add	r3, r17
     aec:	23 2d       	mov	r18, r3
     aee:	30 e0       	ldi	r19, 0x00	; 0
     af0:	2e 15       	cp	r18, r14
     af2:	3f 05       	cpc	r19, r15
     af4:	dc f4       	brge	.+54     	; 0xb2c <strtol+0x190>
     af6:	47 fd       	sbrc	r20, 7
     af8:	16 c0       	rjmp	.+44     	; 0xb26 <strtol+0x18a>
     afa:	86 16       	cp	r8, r22
     afc:	97 06       	cpc	r9, r23
     afe:	a8 06       	cpc	r10, r24
     b00:	b9 06       	cpc	r11, r25
     b02:	70 f0       	brcs	.+28     	; 0xb20 <strtol+0x184>
     b04:	a3 01       	movw	r20, r6
     b06:	92 01       	movw	r18, r4
     b08:	0e 94 1d 09 	call	0x123a	; 0x123a <__mulsi3>
     b0c:	63 0d       	add	r22, r3
     b0e:	71 1d       	adc	r23, r1
     b10:	81 1d       	adc	r24, r1
     b12:	91 1d       	adc	r25, r1
     b14:	61 30       	cpi	r22, 0x01	; 1
     b16:	71 05       	cpc	r23, r1
     b18:	81 05       	cpc	r24, r1
     b1a:	20 e8       	ldi	r18, 0x80	; 128
     b1c:	92 07       	cpc	r25, r18
     b1e:	10 f0       	brcs	.+4      	; 0xb24 <strtol+0x188>
     b20:	4f ef       	ldi	r20, 0xFF	; 255
     b22:	01 c0       	rjmp	.+2      	; 0xb26 <strtol+0x18a>
     b24:	41 e0       	ldi	r20, 0x01	; 1
     b26:	21 96       	adiw	r28, 0x01	; 1
     b28:	10 81       	ld	r17, Z
     b2a:	cb cf       	rjmp	.-106    	; 0xac2 <strtol+0x126>
     b2c:	20 2f       	mov	r18, r16
     b2e:	21 70       	andi	r18, 0x01	; 1
     b30:	c1 14       	cp	r12, r1
     b32:	d1 04       	cpc	r13, r1
     b34:	71 f0       	breq	.+28     	; 0xb52 <strtol+0x1b6>
     b36:	44 23       	and	r20, r20
     b38:	29 f0       	breq	.+10     	; 0xb44 <strtol+0x1a8>
     b3a:	21 97       	sbiw	r28, 0x01	; 1
     b3c:	f6 01       	movw	r30, r12
     b3e:	d1 83       	std	Z+1, r29	; 0x01
     b40:	c0 83       	st	Z, r28
     b42:	07 c0       	rjmp	.+14     	; 0xb52 <strtol+0x1b6>
     b44:	01 ff       	sbrs	r16, 1
     b46:	19 c0       	rjmp	.+50     	; 0xb7a <strtol+0x1de>
     b48:	22 97       	sbiw	r28, 0x02	; 2
     b4a:	f6 01       	movw	r30, r12
     b4c:	d1 83       	std	Z+1, r29	; 0x01
     b4e:	c0 83       	st	Z, r28
     b50:	14 c0       	rjmp	.+40     	; 0xb7a <strtol+0x1de>
     b52:	47 ff       	sbrs	r20, 7
     b54:	12 c0       	rjmp	.+36     	; 0xb7a <strtol+0x1de>
     b56:	22 23       	and	r18, r18
     b58:	29 f0       	breq	.+10     	; 0xb64 <strtol+0x1c8>
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	70 e0       	ldi	r23, 0x00	; 0
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e8       	ldi	r25, 0x80	; 128
     b62:	04 c0       	rjmp	.+8      	; 0xb6c <strtol+0x1d0>
     b64:	6f ef       	ldi	r22, 0xFF	; 255
     b66:	7f ef       	ldi	r23, 0xFF	; 255
     b68:	8f ef       	ldi	r24, 0xFF	; 255
     b6a:	9f e7       	ldi	r25, 0x7F	; 127
     b6c:	22 e2       	ldi	r18, 0x22	; 34
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	30 93 a5 02 	sts	0x02A5, r19	; 0x8002a5 <errno+0x1>
     b74:	20 93 a4 02 	sts	0x02A4, r18	; 0x8002a4 <errno>
     b78:	09 c0       	rjmp	.+18     	; 0xb8c <strtol+0x1f0>
     b7a:	22 23       	and	r18, r18
     b7c:	81 f0       	breq	.+32     	; 0xb9e <strtol+0x202>
     b7e:	90 95       	com	r25
     b80:	80 95       	com	r24
     b82:	70 95       	com	r23
     b84:	61 95       	neg	r22
     b86:	7f 4f       	sbci	r23, 0xFF	; 255
     b88:	8f 4f       	sbci	r24, 0xFF	; 255
     b8a:	9f 4f       	sbci	r25, 0xFF	; 255
     b8c:	46 2f       	mov	r20, r22
     b8e:	37 2f       	mov	r19, r23
     b90:	28 2f       	mov	r18, r24
     b92:	12 c0       	rjmp	.+36     	; 0xbb8 <strtol+0x21c>
     b94:	40 e0       	ldi	r20, 0x00	; 0
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	20 e0       	ldi	r18, 0x00	; 0
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	0d c0       	rjmp	.+26     	; 0xbb8 <strtol+0x21c>
     b9e:	97 ff       	sbrs	r25, 7
     ba0:	f5 cf       	rjmp	.-22     	; 0xb8c <strtol+0x1f0>
     ba2:	82 e2       	ldi	r24, 0x22	; 34
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <errno+0x1>
     baa:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <errno>
     bae:	6f ef       	ldi	r22, 0xFF	; 255
     bb0:	7f ef       	ldi	r23, 0xFF	; 255
     bb2:	8f ef       	ldi	r24, 0xFF	; 255
     bb4:	9f e7       	ldi	r25, 0x7F	; 127
     bb6:	ea cf       	rjmp	.-44     	; 0xb8c <strtol+0x1f0>
     bb8:	64 2f       	mov	r22, r20
     bba:	73 2f       	mov	r23, r19
     bbc:	82 2f       	mov	r24, r18
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
     bc2:	e1 e1       	ldi	r30, 0x11	; 17
     bc4:	0c 94 77 09 	jmp	0x12ee	; 0x12ee <__epilogue_restores__+0x2>

00000bc8 <isspace>:
     bc8:	91 11       	cpse	r25, r1
     bca:	0c 94 37 08 	jmp	0x106e	; 0x106e <__ctype_isfalse>
     bce:	80 32       	cpi	r24, 0x20	; 32
     bd0:	19 f0       	breq	.+6      	; 0xbd8 <isspace+0x10>
     bd2:	89 50       	subi	r24, 0x09	; 9
     bd4:	85 50       	subi	r24, 0x05	; 5
     bd6:	c8 f7       	brcc	.-14     	; 0xbca <isspace+0x2>
     bd8:	08 95       	ret

00000bda <strchr>:
     bda:	fc 01       	movw	r30, r24
     bdc:	81 91       	ld	r24, Z+
     bde:	86 17       	cp	r24, r22
     be0:	21 f0       	breq	.+8      	; 0xbea <strchr+0x10>
     be2:	88 23       	and	r24, r24
     be4:	d9 f7       	brne	.-10     	; 0xbdc <strchr+0x2>
     be6:	99 27       	eor	r25, r25
     be8:	08 95       	ret
     bea:	31 97       	sbiw	r30, 0x01	; 1
     bec:	cf 01       	movw	r24, r30
     bee:	08 95       	ret

00000bf0 <strcmp>:
     bf0:	fb 01       	movw	r30, r22
     bf2:	dc 01       	movw	r26, r24
     bf4:	8d 91       	ld	r24, X+
     bf6:	01 90       	ld	r0, Z+
     bf8:	80 19       	sub	r24, r0
     bfa:	01 10       	cpse	r0, r1
     bfc:	d9 f3       	breq	.-10     	; 0xbf4 <strcmp+0x4>
     bfe:	99 0b       	sbc	r25, r25
     c00:	08 95       	ret

00000c02 <strncpy>:
     c02:	fb 01       	movw	r30, r22
     c04:	dc 01       	movw	r26, r24
     c06:	41 50       	subi	r20, 0x01	; 1
     c08:	50 40       	sbci	r21, 0x00	; 0
     c0a:	48 f0       	brcs	.+18     	; 0xc1e <strncpy+0x1c>
     c0c:	01 90       	ld	r0, Z+
     c0e:	0d 92       	st	X+, r0
     c10:	00 20       	and	r0, r0
     c12:	c9 f7       	brne	.-14     	; 0xc06 <strncpy+0x4>
     c14:	01 c0       	rjmp	.+2      	; 0xc18 <strncpy+0x16>
     c16:	1d 92       	st	X+, r1
     c18:	41 50       	subi	r20, 0x01	; 1
     c1a:	50 40       	sbci	r21, 0x00	; 0
     c1c:	e0 f7       	brcc	.-8      	; 0xc16 <strncpy+0x14>
     c1e:	08 95       	ret

00000c20 <printf>:
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	e6 e1       	ldi	r30, 0x16	; 22
     c26:	f6 e0       	ldi	r31, 0x06	; 6
     c28:	0c 94 6a 09 	jmp	0x12d4	; 0x12d4 <__prologue_saves__+0x20>
     c2c:	ae 01       	movw	r20, r28
     c2e:	4b 5f       	subi	r20, 0xFB	; 251
     c30:	5f 4f       	sbci	r21, 0xFF	; 255
     c32:	fa 01       	movw	r30, r20
     c34:	61 91       	ld	r22, Z+
     c36:	71 91       	ld	r23, Z+
     c38:	af 01       	movw	r20, r30
     c3a:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <__iob+0x2>
     c3e:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <__iob+0x3>
     c42:	0e 94 56 06 	call	0xcac	; 0xcac <vfprintf>
     c46:	e2 e0       	ldi	r30, 0x02	; 2
     c48:	0c 94 86 09 	jmp	0x130c	; 0x130c <__epilogue_restores__+0x20>

00000c4c <puts>:
     c4c:	0f 93       	push	r16
     c4e:	1f 93       	push	r17
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
     c54:	e0 91 a0 02 	lds	r30, 0x02A0	; 0x8002a0 <__iob+0x2>
     c58:	f0 91 a1 02 	lds	r31, 0x02A1	; 0x8002a1 <__iob+0x3>
     c5c:	23 81       	ldd	r18, Z+3	; 0x03
     c5e:	21 ff       	sbrs	r18, 1
     c60:	1b c0       	rjmp	.+54     	; 0xc98 <puts+0x4c>
     c62:	8c 01       	movw	r16, r24
     c64:	d0 e0       	ldi	r29, 0x00	; 0
     c66:	c0 e0       	ldi	r28, 0x00	; 0
     c68:	f8 01       	movw	r30, r16
     c6a:	81 91       	ld	r24, Z+
     c6c:	8f 01       	movw	r16, r30
     c6e:	60 91 a0 02 	lds	r22, 0x02A0	; 0x8002a0 <__iob+0x2>
     c72:	70 91 a1 02 	lds	r23, 0x02A1	; 0x8002a1 <__iob+0x3>
     c76:	db 01       	movw	r26, r22
     c78:	18 96       	adiw	r26, 0x08	; 8
     c7a:	ed 91       	ld	r30, X+
     c7c:	fc 91       	ld	r31, X
     c7e:	19 97       	sbiw	r26, 0x09	; 9
     c80:	88 23       	and	r24, r24
     c82:	31 f0       	breq	.+12     	; 0xc90 <puts+0x44>
     c84:	09 95       	icall
     c86:	89 2b       	or	r24, r25
     c88:	79 f3       	breq	.-34     	; 0xc68 <puts+0x1c>
     c8a:	df ef       	ldi	r29, 0xFF	; 255
     c8c:	cf ef       	ldi	r28, 0xFF	; 255
     c8e:	ec cf       	rjmp	.-40     	; 0xc68 <puts+0x1c>
     c90:	8a e0       	ldi	r24, 0x0A	; 10
     c92:	09 95       	icall
     c94:	89 2b       	or	r24, r25
     c96:	19 f0       	breq	.+6      	; 0xc9e <puts+0x52>
     c98:	8f ef       	ldi	r24, 0xFF	; 255
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	02 c0       	rjmp	.+4      	; 0xca2 <puts+0x56>
     c9e:	8d 2f       	mov	r24, r29
     ca0:	9c 2f       	mov	r25, r28
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	1f 91       	pop	r17
     ca8:	0f 91       	pop	r16
     caa:	08 95       	ret

00000cac <vfprintf>:
     cac:	ab e0       	ldi	r26, 0x0B	; 11
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	ec e5       	ldi	r30, 0x5C	; 92
     cb2:	f6 e0       	ldi	r31, 0x06	; 6
     cb4:	0c 94 5a 09 	jmp	0x12b4	; 0x12b4 <__prologue_saves__>
     cb8:	6c 01       	movw	r12, r24
     cba:	7b 01       	movw	r14, r22
     cbc:	8a 01       	movw	r16, r20
     cbe:	fc 01       	movw	r30, r24
     cc0:	17 82       	std	Z+7, r1	; 0x07
     cc2:	16 82       	std	Z+6, r1	; 0x06
     cc4:	83 81       	ldd	r24, Z+3	; 0x03
     cc6:	81 ff       	sbrs	r24, 1
     cc8:	cc c1       	rjmp	.+920    	; 0x1062 <vfprintf+0x3b6>
     cca:	ce 01       	movw	r24, r28
     ccc:	01 96       	adiw	r24, 0x01	; 1
     cce:	3c 01       	movw	r6, r24
     cd0:	f6 01       	movw	r30, r12
     cd2:	93 81       	ldd	r25, Z+3	; 0x03
     cd4:	f7 01       	movw	r30, r14
     cd6:	93 fd       	sbrc	r25, 3
     cd8:	85 91       	lpm	r24, Z+
     cda:	93 ff       	sbrs	r25, 3
     cdc:	81 91       	ld	r24, Z+
     cde:	7f 01       	movw	r14, r30
     ce0:	88 23       	and	r24, r24
     ce2:	09 f4       	brne	.+2      	; 0xce6 <vfprintf+0x3a>
     ce4:	ba c1       	rjmp	.+884    	; 0x105a <vfprintf+0x3ae>
     ce6:	85 32       	cpi	r24, 0x25	; 37
     ce8:	39 f4       	brne	.+14     	; 0xcf8 <vfprintf+0x4c>
     cea:	93 fd       	sbrc	r25, 3
     cec:	85 91       	lpm	r24, Z+
     cee:	93 ff       	sbrs	r25, 3
     cf0:	81 91       	ld	r24, Z+
     cf2:	7f 01       	movw	r14, r30
     cf4:	85 32       	cpi	r24, 0x25	; 37
     cf6:	29 f4       	brne	.+10     	; 0xd02 <vfprintf+0x56>
     cf8:	b6 01       	movw	r22, r12
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	0e 94 50 08 	call	0x10a0	; 0x10a0 <fputc>
     d00:	e7 cf       	rjmp	.-50     	; 0xcd0 <vfprintf+0x24>
     d02:	91 2c       	mov	r9, r1
     d04:	21 2c       	mov	r2, r1
     d06:	31 2c       	mov	r3, r1
     d08:	ff e1       	ldi	r31, 0x1F	; 31
     d0a:	f3 15       	cp	r31, r3
     d0c:	d8 f0       	brcs	.+54     	; 0xd44 <vfprintf+0x98>
     d0e:	8b 32       	cpi	r24, 0x2B	; 43
     d10:	79 f0       	breq	.+30     	; 0xd30 <vfprintf+0x84>
     d12:	38 f4       	brcc	.+14     	; 0xd22 <vfprintf+0x76>
     d14:	80 32       	cpi	r24, 0x20	; 32
     d16:	79 f0       	breq	.+30     	; 0xd36 <vfprintf+0x8a>
     d18:	83 32       	cpi	r24, 0x23	; 35
     d1a:	a1 f4       	brne	.+40     	; 0xd44 <vfprintf+0x98>
     d1c:	23 2d       	mov	r18, r3
     d1e:	20 61       	ori	r18, 0x10	; 16
     d20:	1d c0       	rjmp	.+58     	; 0xd5c <vfprintf+0xb0>
     d22:	8d 32       	cpi	r24, 0x2D	; 45
     d24:	61 f0       	breq	.+24     	; 0xd3e <vfprintf+0x92>
     d26:	80 33       	cpi	r24, 0x30	; 48
     d28:	69 f4       	brne	.+26     	; 0xd44 <vfprintf+0x98>
     d2a:	23 2d       	mov	r18, r3
     d2c:	21 60       	ori	r18, 0x01	; 1
     d2e:	16 c0       	rjmp	.+44     	; 0xd5c <vfprintf+0xb0>
     d30:	83 2d       	mov	r24, r3
     d32:	82 60       	ori	r24, 0x02	; 2
     d34:	38 2e       	mov	r3, r24
     d36:	e3 2d       	mov	r30, r3
     d38:	e4 60       	ori	r30, 0x04	; 4
     d3a:	3e 2e       	mov	r3, r30
     d3c:	2a c0       	rjmp	.+84     	; 0xd92 <vfprintf+0xe6>
     d3e:	f3 2d       	mov	r31, r3
     d40:	f8 60       	ori	r31, 0x08	; 8
     d42:	1d c0       	rjmp	.+58     	; 0xd7e <vfprintf+0xd2>
     d44:	37 fc       	sbrc	r3, 7
     d46:	2d c0       	rjmp	.+90     	; 0xda2 <vfprintf+0xf6>
     d48:	20 ed       	ldi	r18, 0xD0	; 208
     d4a:	28 0f       	add	r18, r24
     d4c:	2a 30       	cpi	r18, 0x0A	; 10
     d4e:	40 f0       	brcs	.+16     	; 0xd60 <vfprintf+0xb4>
     d50:	8e 32       	cpi	r24, 0x2E	; 46
     d52:	b9 f4       	brne	.+46     	; 0xd82 <vfprintf+0xd6>
     d54:	36 fc       	sbrc	r3, 6
     d56:	81 c1       	rjmp	.+770    	; 0x105a <vfprintf+0x3ae>
     d58:	23 2d       	mov	r18, r3
     d5a:	20 64       	ori	r18, 0x40	; 64
     d5c:	32 2e       	mov	r3, r18
     d5e:	19 c0       	rjmp	.+50     	; 0xd92 <vfprintf+0xe6>
     d60:	36 fe       	sbrs	r3, 6
     d62:	06 c0       	rjmp	.+12     	; 0xd70 <vfprintf+0xc4>
     d64:	8a e0       	ldi	r24, 0x0A	; 10
     d66:	98 9e       	mul	r9, r24
     d68:	20 0d       	add	r18, r0
     d6a:	11 24       	eor	r1, r1
     d6c:	92 2e       	mov	r9, r18
     d6e:	11 c0       	rjmp	.+34     	; 0xd92 <vfprintf+0xe6>
     d70:	ea e0       	ldi	r30, 0x0A	; 10
     d72:	2e 9e       	mul	r2, r30
     d74:	20 0d       	add	r18, r0
     d76:	11 24       	eor	r1, r1
     d78:	22 2e       	mov	r2, r18
     d7a:	f3 2d       	mov	r31, r3
     d7c:	f0 62       	ori	r31, 0x20	; 32
     d7e:	3f 2e       	mov	r3, r31
     d80:	08 c0       	rjmp	.+16     	; 0xd92 <vfprintf+0xe6>
     d82:	8c 36       	cpi	r24, 0x6C	; 108
     d84:	21 f4       	brne	.+8      	; 0xd8e <vfprintf+0xe2>
     d86:	83 2d       	mov	r24, r3
     d88:	80 68       	ori	r24, 0x80	; 128
     d8a:	38 2e       	mov	r3, r24
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <vfprintf+0xe6>
     d8e:	88 36       	cpi	r24, 0x68	; 104
     d90:	41 f4       	brne	.+16     	; 0xda2 <vfprintf+0xf6>
     d92:	f7 01       	movw	r30, r14
     d94:	93 fd       	sbrc	r25, 3
     d96:	85 91       	lpm	r24, Z+
     d98:	93 ff       	sbrs	r25, 3
     d9a:	81 91       	ld	r24, Z+
     d9c:	7f 01       	movw	r14, r30
     d9e:	81 11       	cpse	r24, r1
     da0:	b3 cf       	rjmp	.-154    	; 0xd08 <vfprintf+0x5c>
     da2:	98 2f       	mov	r25, r24
     da4:	9f 7d       	andi	r25, 0xDF	; 223
     da6:	95 54       	subi	r25, 0x45	; 69
     da8:	93 30       	cpi	r25, 0x03	; 3
     daa:	28 f4       	brcc	.+10     	; 0xdb6 <vfprintf+0x10a>
     dac:	0c 5f       	subi	r16, 0xFC	; 252
     dae:	1f 4f       	sbci	r17, 0xFF	; 255
     db0:	9f e3       	ldi	r25, 0x3F	; 63
     db2:	99 83       	std	Y+1, r25	; 0x01
     db4:	0d c0       	rjmp	.+26     	; 0xdd0 <vfprintf+0x124>
     db6:	83 36       	cpi	r24, 0x63	; 99
     db8:	31 f0       	breq	.+12     	; 0xdc6 <vfprintf+0x11a>
     dba:	83 37       	cpi	r24, 0x73	; 115
     dbc:	71 f0       	breq	.+28     	; 0xdda <vfprintf+0x12e>
     dbe:	83 35       	cpi	r24, 0x53	; 83
     dc0:	09 f0       	breq	.+2      	; 0xdc4 <vfprintf+0x118>
     dc2:	59 c0       	rjmp	.+178    	; 0xe76 <vfprintf+0x1ca>
     dc4:	21 c0       	rjmp	.+66     	; 0xe08 <vfprintf+0x15c>
     dc6:	f8 01       	movw	r30, r16
     dc8:	80 81       	ld	r24, Z
     dca:	89 83       	std	Y+1, r24	; 0x01
     dcc:	0e 5f       	subi	r16, 0xFE	; 254
     dce:	1f 4f       	sbci	r17, 0xFF	; 255
     dd0:	88 24       	eor	r8, r8
     dd2:	83 94       	inc	r8
     dd4:	91 2c       	mov	r9, r1
     dd6:	53 01       	movw	r10, r6
     dd8:	13 c0       	rjmp	.+38     	; 0xe00 <vfprintf+0x154>
     dda:	28 01       	movw	r4, r16
     ddc:	f2 e0       	ldi	r31, 0x02	; 2
     dde:	4f 0e       	add	r4, r31
     de0:	51 1c       	adc	r5, r1
     de2:	f8 01       	movw	r30, r16
     de4:	a0 80       	ld	r10, Z
     de6:	b1 80       	ldd	r11, Z+1	; 0x01
     de8:	36 fe       	sbrs	r3, 6
     dea:	03 c0       	rjmp	.+6      	; 0xdf2 <vfprintf+0x146>
     dec:	69 2d       	mov	r22, r9
     dee:	70 e0       	ldi	r23, 0x00	; 0
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <vfprintf+0x14a>
     df2:	6f ef       	ldi	r22, 0xFF	; 255
     df4:	7f ef       	ldi	r23, 0xFF	; 255
     df6:	c5 01       	movw	r24, r10
     df8:	0e 94 45 08 	call	0x108a	; 0x108a <strnlen>
     dfc:	4c 01       	movw	r8, r24
     dfe:	82 01       	movw	r16, r4
     e00:	f3 2d       	mov	r31, r3
     e02:	ff 77       	andi	r31, 0x7F	; 127
     e04:	3f 2e       	mov	r3, r31
     e06:	16 c0       	rjmp	.+44     	; 0xe34 <vfprintf+0x188>
     e08:	28 01       	movw	r4, r16
     e0a:	22 e0       	ldi	r18, 0x02	; 2
     e0c:	42 0e       	add	r4, r18
     e0e:	51 1c       	adc	r5, r1
     e10:	f8 01       	movw	r30, r16
     e12:	a0 80       	ld	r10, Z
     e14:	b1 80       	ldd	r11, Z+1	; 0x01
     e16:	36 fe       	sbrs	r3, 6
     e18:	03 c0       	rjmp	.+6      	; 0xe20 <vfprintf+0x174>
     e1a:	69 2d       	mov	r22, r9
     e1c:	70 e0       	ldi	r23, 0x00	; 0
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <vfprintf+0x178>
     e20:	6f ef       	ldi	r22, 0xFF	; 255
     e22:	7f ef       	ldi	r23, 0xFF	; 255
     e24:	c5 01       	movw	r24, r10
     e26:	0e 94 3a 08 	call	0x1074	; 0x1074 <strnlen_P>
     e2a:	4c 01       	movw	r8, r24
     e2c:	f3 2d       	mov	r31, r3
     e2e:	f0 68       	ori	r31, 0x80	; 128
     e30:	3f 2e       	mov	r3, r31
     e32:	82 01       	movw	r16, r4
     e34:	33 fc       	sbrc	r3, 3
     e36:	1b c0       	rjmp	.+54     	; 0xe6e <vfprintf+0x1c2>
     e38:	82 2d       	mov	r24, r2
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	88 16       	cp	r8, r24
     e3e:	99 06       	cpc	r9, r25
     e40:	b0 f4       	brcc	.+44     	; 0xe6e <vfprintf+0x1c2>
     e42:	b6 01       	movw	r22, r12
     e44:	80 e2       	ldi	r24, 0x20	; 32
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0e 94 50 08 	call	0x10a0	; 0x10a0 <fputc>
     e4c:	2a 94       	dec	r2
     e4e:	f4 cf       	rjmp	.-24     	; 0xe38 <vfprintf+0x18c>
     e50:	f5 01       	movw	r30, r10
     e52:	37 fc       	sbrc	r3, 7
     e54:	85 91       	lpm	r24, Z+
     e56:	37 fe       	sbrs	r3, 7
     e58:	81 91       	ld	r24, Z+
     e5a:	5f 01       	movw	r10, r30
     e5c:	b6 01       	movw	r22, r12
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	0e 94 50 08 	call	0x10a0	; 0x10a0 <fputc>
     e64:	21 10       	cpse	r2, r1
     e66:	2a 94       	dec	r2
     e68:	21 e0       	ldi	r18, 0x01	; 1
     e6a:	82 1a       	sub	r8, r18
     e6c:	91 08       	sbc	r9, r1
     e6e:	81 14       	cp	r8, r1
     e70:	91 04       	cpc	r9, r1
     e72:	71 f7       	brne	.-36     	; 0xe50 <vfprintf+0x1a4>
     e74:	e8 c0       	rjmp	.+464    	; 0x1046 <vfprintf+0x39a>
     e76:	84 36       	cpi	r24, 0x64	; 100
     e78:	11 f0       	breq	.+4      	; 0xe7e <vfprintf+0x1d2>
     e7a:	89 36       	cpi	r24, 0x69	; 105
     e7c:	41 f5       	brne	.+80     	; 0xece <vfprintf+0x222>
     e7e:	f8 01       	movw	r30, r16
     e80:	37 fe       	sbrs	r3, 7
     e82:	07 c0       	rjmp	.+14     	; 0xe92 <vfprintf+0x1e6>
     e84:	60 81       	ld	r22, Z
     e86:	71 81       	ldd	r23, Z+1	; 0x01
     e88:	82 81       	ldd	r24, Z+2	; 0x02
     e8a:	93 81       	ldd	r25, Z+3	; 0x03
     e8c:	0c 5f       	subi	r16, 0xFC	; 252
     e8e:	1f 4f       	sbci	r17, 0xFF	; 255
     e90:	08 c0       	rjmp	.+16     	; 0xea2 <vfprintf+0x1f6>
     e92:	60 81       	ld	r22, Z
     e94:	71 81       	ldd	r23, Z+1	; 0x01
     e96:	07 2e       	mov	r0, r23
     e98:	00 0c       	add	r0, r0
     e9a:	88 0b       	sbc	r24, r24
     e9c:	99 0b       	sbc	r25, r25
     e9e:	0e 5f       	subi	r16, 0xFE	; 254
     ea0:	1f 4f       	sbci	r17, 0xFF	; 255
     ea2:	f3 2d       	mov	r31, r3
     ea4:	ff 76       	andi	r31, 0x6F	; 111
     ea6:	3f 2e       	mov	r3, r31
     ea8:	97 ff       	sbrs	r25, 7
     eaa:	09 c0       	rjmp	.+18     	; 0xebe <vfprintf+0x212>
     eac:	90 95       	com	r25
     eae:	80 95       	com	r24
     eb0:	70 95       	com	r23
     eb2:	61 95       	neg	r22
     eb4:	7f 4f       	sbci	r23, 0xFF	; 255
     eb6:	8f 4f       	sbci	r24, 0xFF	; 255
     eb8:	9f 4f       	sbci	r25, 0xFF	; 255
     eba:	f0 68       	ori	r31, 0x80	; 128
     ebc:	3f 2e       	mov	r3, r31
     ebe:	2a e0       	ldi	r18, 0x0A	; 10
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	a3 01       	movw	r20, r6
     ec4:	0e 94 8c 08 	call	0x1118	; 0x1118 <__ultoa_invert>
     ec8:	88 2e       	mov	r8, r24
     eca:	86 18       	sub	r8, r6
     ecc:	45 c0       	rjmp	.+138    	; 0xf58 <vfprintf+0x2ac>
     ece:	85 37       	cpi	r24, 0x75	; 117
     ed0:	31 f4       	brne	.+12     	; 0xede <vfprintf+0x232>
     ed2:	23 2d       	mov	r18, r3
     ed4:	2f 7e       	andi	r18, 0xEF	; 239
     ed6:	b2 2e       	mov	r11, r18
     ed8:	2a e0       	ldi	r18, 0x0A	; 10
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	25 c0       	rjmp	.+74     	; 0xf28 <vfprintf+0x27c>
     ede:	93 2d       	mov	r25, r3
     ee0:	99 7f       	andi	r25, 0xF9	; 249
     ee2:	b9 2e       	mov	r11, r25
     ee4:	8f 36       	cpi	r24, 0x6F	; 111
     ee6:	c1 f0       	breq	.+48     	; 0xf18 <vfprintf+0x26c>
     ee8:	18 f4       	brcc	.+6      	; 0xef0 <vfprintf+0x244>
     eea:	88 35       	cpi	r24, 0x58	; 88
     eec:	79 f0       	breq	.+30     	; 0xf0c <vfprintf+0x260>
     eee:	b5 c0       	rjmp	.+362    	; 0x105a <vfprintf+0x3ae>
     ef0:	80 37       	cpi	r24, 0x70	; 112
     ef2:	19 f0       	breq	.+6      	; 0xefa <vfprintf+0x24e>
     ef4:	88 37       	cpi	r24, 0x78	; 120
     ef6:	21 f0       	breq	.+8      	; 0xf00 <vfprintf+0x254>
     ef8:	b0 c0       	rjmp	.+352    	; 0x105a <vfprintf+0x3ae>
     efa:	e9 2f       	mov	r30, r25
     efc:	e0 61       	ori	r30, 0x10	; 16
     efe:	be 2e       	mov	r11, r30
     f00:	b4 fe       	sbrs	r11, 4
     f02:	0d c0       	rjmp	.+26     	; 0xf1e <vfprintf+0x272>
     f04:	fb 2d       	mov	r31, r11
     f06:	f4 60       	ori	r31, 0x04	; 4
     f08:	bf 2e       	mov	r11, r31
     f0a:	09 c0       	rjmp	.+18     	; 0xf1e <vfprintf+0x272>
     f0c:	34 fe       	sbrs	r3, 4
     f0e:	0a c0       	rjmp	.+20     	; 0xf24 <vfprintf+0x278>
     f10:	29 2f       	mov	r18, r25
     f12:	26 60       	ori	r18, 0x06	; 6
     f14:	b2 2e       	mov	r11, r18
     f16:	06 c0       	rjmp	.+12     	; 0xf24 <vfprintf+0x278>
     f18:	28 e0       	ldi	r18, 0x08	; 8
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	05 c0       	rjmp	.+10     	; 0xf28 <vfprintf+0x27c>
     f1e:	20 e1       	ldi	r18, 0x10	; 16
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <vfprintf+0x27c>
     f24:	20 e1       	ldi	r18, 0x10	; 16
     f26:	32 e0       	ldi	r19, 0x02	; 2
     f28:	f8 01       	movw	r30, r16
     f2a:	b7 fe       	sbrs	r11, 7
     f2c:	07 c0       	rjmp	.+14     	; 0xf3c <vfprintf+0x290>
     f2e:	60 81       	ld	r22, Z
     f30:	71 81       	ldd	r23, Z+1	; 0x01
     f32:	82 81       	ldd	r24, Z+2	; 0x02
     f34:	93 81       	ldd	r25, Z+3	; 0x03
     f36:	0c 5f       	subi	r16, 0xFC	; 252
     f38:	1f 4f       	sbci	r17, 0xFF	; 255
     f3a:	06 c0       	rjmp	.+12     	; 0xf48 <vfprintf+0x29c>
     f3c:	60 81       	ld	r22, Z
     f3e:	71 81       	ldd	r23, Z+1	; 0x01
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	0e 5f       	subi	r16, 0xFE	; 254
     f46:	1f 4f       	sbci	r17, 0xFF	; 255
     f48:	a3 01       	movw	r20, r6
     f4a:	0e 94 8c 08 	call	0x1118	; 0x1118 <__ultoa_invert>
     f4e:	88 2e       	mov	r8, r24
     f50:	86 18       	sub	r8, r6
     f52:	fb 2d       	mov	r31, r11
     f54:	ff 77       	andi	r31, 0x7F	; 127
     f56:	3f 2e       	mov	r3, r31
     f58:	36 fe       	sbrs	r3, 6
     f5a:	0d c0       	rjmp	.+26     	; 0xf76 <vfprintf+0x2ca>
     f5c:	23 2d       	mov	r18, r3
     f5e:	2e 7f       	andi	r18, 0xFE	; 254
     f60:	a2 2e       	mov	r10, r18
     f62:	89 14       	cp	r8, r9
     f64:	58 f4       	brcc	.+22     	; 0xf7c <vfprintf+0x2d0>
     f66:	34 fe       	sbrs	r3, 4
     f68:	0b c0       	rjmp	.+22     	; 0xf80 <vfprintf+0x2d4>
     f6a:	32 fc       	sbrc	r3, 2
     f6c:	09 c0       	rjmp	.+18     	; 0xf80 <vfprintf+0x2d4>
     f6e:	83 2d       	mov	r24, r3
     f70:	8e 7e       	andi	r24, 0xEE	; 238
     f72:	a8 2e       	mov	r10, r24
     f74:	05 c0       	rjmp	.+10     	; 0xf80 <vfprintf+0x2d4>
     f76:	b8 2c       	mov	r11, r8
     f78:	a3 2c       	mov	r10, r3
     f7a:	03 c0       	rjmp	.+6      	; 0xf82 <vfprintf+0x2d6>
     f7c:	b8 2c       	mov	r11, r8
     f7e:	01 c0       	rjmp	.+2      	; 0xf82 <vfprintf+0x2d6>
     f80:	b9 2c       	mov	r11, r9
     f82:	a4 fe       	sbrs	r10, 4
     f84:	0f c0       	rjmp	.+30     	; 0xfa4 <vfprintf+0x2f8>
     f86:	fe 01       	movw	r30, r28
     f88:	e8 0d       	add	r30, r8
     f8a:	f1 1d       	adc	r31, r1
     f8c:	80 81       	ld	r24, Z
     f8e:	80 33       	cpi	r24, 0x30	; 48
     f90:	21 f4       	brne	.+8      	; 0xf9a <vfprintf+0x2ee>
     f92:	9a 2d       	mov	r25, r10
     f94:	99 7e       	andi	r25, 0xE9	; 233
     f96:	a9 2e       	mov	r10, r25
     f98:	09 c0       	rjmp	.+18     	; 0xfac <vfprintf+0x300>
     f9a:	a2 fe       	sbrs	r10, 2
     f9c:	06 c0       	rjmp	.+12     	; 0xfaa <vfprintf+0x2fe>
     f9e:	b3 94       	inc	r11
     fa0:	b3 94       	inc	r11
     fa2:	04 c0       	rjmp	.+8      	; 0xfac <vfprintf+0x300>
     fa4:	8a 2d       	mov	r24, r10
     fa6:	86 78       	andi	r24, 0x86	; 134
     fa8:	09 f0       	breq	.+2      	; 0xfac <vfprintf+0x300>
     faa:	b3 94       	inc	r11
     fac:	a3 fc       	sbrc	r10, 3
     fae:	11 c0       	rjmp	.+34     	; 0xfd2 <vfprintf+0x326>
     fb0:	a0 fe       	sbrs	r10, 0
     fb2:	06 c0       	rjmp	.+12     	; 0xfc0 <vfprintf+0x314>
     fb4:	b2 14       	cp	r11, r2
     fb6:	88 f4       	brcc	.+34     	; 0xfda <vfprintf+0x32e>
     fb8:	28 0c       	add	r2, r8
     fba:	92 2c       	mov	r9, r2
     fbc:	9b 18       	sub	r9, r11
     fbe:	0e c0       	rjmp	.+28     	; 0xfdc <vfprintf+0x330>
     fc0:	b2 14       	cp	r11, r2
     fc2:	60 f4       	brcc	.+24     	; 0xfdc <vfprintf+0x330>
     fc4:	b6 01       	movw	r22, r12
     fc6:	80 e2       	ldi	r24, 0x20	; 32
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	0e 94 50 08 	call	0x10a0	; 0x10a0 <fputc>
     fce:	b3 94       	inc	r11
     fd0:	f7 cf       	rjmp	.-18     	; 0xfc0 <vfprintf+0x314>
     fd2:	b2 14       	cp	r11, r2
     fd4:	18 f4       	brcc	.+6      	; 0xfdc <vfprintf+0x330>
     fd6:	2b 18       	sub	r2, r11
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <vfprintf+0x332>
     fda:	98 2c       	mov	r9, r8
     fdc:	21 2c       	mov	r2, r1
     fde:	a4 fe       	sbrs	r10, 4
     fe0:	10 c0       	rjmp	.+32     	; 0x1002 <vfprintf+0x356>
     fe2:	b6 01       	movw	r22, r12
     fe4:	80 e3       	ldi	r24, 0x30	; 48
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	0e 94 50 08 	call	0x10a0	; 0x10a0 <fputc>
     fec:	a2 fe       	sbrs	r10, 2
     fee:	17 c0       	rjmp	.+46     	; 0x101e <vfprintf+0x372>
     ff0:	a1 fc       	sbrc	r10, 1
     ff2:	03 c0       	rjmp	.+6      	; 0xffa <vfprintf+0x34e>
     ff4:	88 e7       	ldi	r24, 0x78	; 120
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <vfprintf+0x352>
     ffa:	88 e5       	ldi	r24, 0x58	; 88
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	b6 01       	movw	r22, r12
    1000:	0c c0       	rjmp	.+24     	; 0x101a <vfprintf+0x36e>
    1002:	8a 2d       	mov	r24, r10
    1004:	86 78       	andi	r24, 0x86	; 134
    1006:	59 f0       	breq	.+22     	; 0x101e <vfprintf+0x372>
    1008:	a1 fe       	sbrs	r10, 1
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <vfprintf+0x364>
    100c:	8b e2       	ldi	r24, 0x2B	; 43
    100e:	01 c0       	rjmp	.+2      	; 0x1012 <vfprintf+0x366>
    1010:	80 e2       	ldi	r24, 0x20	; 32
    1012:	a7 fc       	sbrc	r10, 7
    1014:	8d e2       	ldi	r24, 0x2D	; 45
    1016:	b6 01       	movw	r22, r12
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	0e 94 50 08 	call	0x10a0	; 0x10a0 <fputc>
    101e:	89 14       	cp	r8, r9
    1020:	38 f4       	brcc	.+14     	; 0x1030 <vfprintf+0x384>
    1022:	b6 01       	movw	r22, r12
    1024:	80 e3       	ldi	r24, 0x30	; 48
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	0e 94 50 08 	call	0x10a0	; 0x10a0 <fputc>
    102c:	9a 94       	dec	r9
    102e:	f7 cf       	rjmp	.-18     	; 0x101e <vfprintf+0x372>
    1030:	8a 94       	dec	r8
    1032:	f3 01       	movw	r30, r6
    1034:	e8 0d       	add	r30, r8
    1036:	f1 1d       	adc	r31, r1
    1038:	80 81       	ld	r24, Z
    103a:	b6 01       	movw	r22, r12
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0e 94 50 08 	call	0x10a0	; 0x10a0 <fputc>
    1042:	81 10       	cpse	r8, r1
    1044:	f5 cf       	rjmp	.-22     	; 0x1030 <vfprintf+0x384>
    1046:	22 20       	and	r2, r2
    1048:	09 f4       	brne	.+2      	; 0x104c <vfprintf+0x3a0>
    104a:	42 ce       	rjmp	.-892    	; 0xcd0 <vfprintf+0x24>
    104c:	b6 01       	movw	r22, r12
    104e:	80 e2       	ldi	r24, 0x20	; 32
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	0e 94 50 08 	call	0x10a0	; 0x10a0 <fputc>
    1056:	2a 94       	dec	r2
    1058:	f6 cf       	rjmp	.-20     	; 0x1046 <vfprintf+0x39a>
    105a:	f6 01       	movw	r30, r12
    105c:	86 81       	ldd	r24, Z+6	; 0x06
    105e:	97 81       	ldd	r25, Z+7	; 0x07
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <vfprintf+0x3ba>
    1062:	8f ef       	ldi	r24, 0xFF	; 255
    1064:	9f ef       	ldi	r25, 0xFF	; 255
    1066:	2b 96       	adiw	r28, 0x0b	; 11
    1068:	e2 e1       	ldi	r30, 0x12	; 18
    106a:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <__epilogue_restores__>

0000106e <__ctype_isfalse>:
    106e:	99 27       	eor	r25, r25
    1070:	88 27       	eor	r24, r24

00001072 <__ctype_istrue>:
    1072:	08 95       	ret

00001074 <strnlen_P>:
    1074:	fc 01       	movw	r30, r24
    1076:	05 90       	lpm	r0, Z+
    1078:	61 50       	subi	r22, 0x01	; 1
    107a:	70 40       	sbci	r23, 0x00	; 0
    107c:	01 10       	cpse	r0, r1
    107e:	d8 f7       	brcc	.-10     	; 0x1076 <strnlen_P+0x2>
    1080:	80 95       	com	r24
    1082:	90 95       	com	r25
    1084:	8e 0f       	add	r24, r30
    1086:	9f 1f       	adc	r25, r31
    1088:	08 95       	ret

0000108a <strnlen>:
    108a:	fc 01       	movw	r30, r24
    108c:	61 50       	subi	r22, 0x01	; 1
    108e:	70 40       	sbci	r23, 0x00	; 0
    1090:	01 90       	ld	r0, Z+
    1092:	01 10       	cpse	r0, r1
    1094:	d8 f7       	brcc	.-10     	; 0x108c <strnlen+0x2>
    1096:	80 95       	com	r24
    1098:	90 95       	com	r25
    109a:	8e 0f       	add	r24, r30
    109c:	9f 1f       	adc	r25, r31
    109e:	08 95       	ret

000010a0 <fputc>:
    10a0:	0f 93       	push	r16
    10a2:	1f 93       	push	r17
    10a4:	cf 93       	push	r28
    10a6:	df 93       	push	r29
    10a8:	fb 01       	movw	r30, r22
    10aa:	23 81       	ldd	r18, Z+3	; 0x03
    10ac:	21 fd       	sbrc	r18, 1
    10ae:	03 c0       	rjmp	.+6      	; 0x10b6 <fputc+0x16>
    10b0:	8f ef       	ldi	r24, 0xFF	; 255
    10b2:	9f ef       	ldi	r25, 0xFF	; 255
    10b4:	2c c0       	rjmp	.+88     	; 0x110e <fputc+0x6e>
    10b6:	22 ff       	sbrs	r18, 2
    10b8:	16 c0       	rjmp	.+44     	; 0x10e6 <fputc+0x46>
    10ba:	46 81       	ldd	r20, Z+6	; 0x06
    10bc:	57 81       	ldd	r21, Z+7	; 0x07
    10be:	24 81       	ldd	r18, Z+4	; 0x04
    10c0:	35 81       	ldd	r19, Z+5	; 0x05
    10c2:	42 17       	cp	r20, r18
    10c4:	53 07       	cpc	r21, r19
    10c6:	44 f4       	brge	.+16     	; 0x10d8 <fputc+0x38>
    10c8:	a0 81       	ld	r26, Z
    10ca:	b1 81       	ldd	r27, Z+1	; 0x01
    10cc:	9d 01       	movw	r18, r26
    10ce:	2f 5f       	subi	r18, 0xFF	; 255
    10d0:	3f 4f       	sbci	r19, 0xFF	; 255
    10d2:	31 83       	std	Z+1, r19	; 0x01
    10d4:	20 83       	st	Z, r18
    10d6:	8c 93       	st	X, r24
    10d8:	26 81       	ldd	r18, Z+6	; 0x06
    10da:	37 81       	ldd	r19, Z+7	; 0x07
    10dc:	2f 5f       	subi	r18, 0xFF	; 255
    10de:	3f 4f       	sbci	r19, 0xFF	; 255
    10e0:	37 83       	std	Z+7, r19	; 0x07
    10e2:	26 83       	std	Z+6, r18	; 0x06
    10e4:	14 c0       	rjmp	.+40     	; 0x110e <fputc+0x6e>
    10e6:	8b 01       	movw	r16, r22
    10e8:	ec 01       	movw	r28, r24
    10ea:	fb 01       	movw	r30, r22
    10ec:	00 84       	ldd	r0, Z+8	; 0x08
    10ee:	f1 85       	ldd	r31, Z+9	; 0x09
    10f0:	e0 2d       	mov	r30, r0
    10f2:	09 95       	icall
    10f4:	89 2b       	or	r24, r25
    10f6:	e1 f6       	brne	.-72     	; 0x10b0 <fputc+0x10>
    10f8:	d8 01       	movw	r26, r16
    10fa:	16 96       	adiw	r26, 0x06	; 6
    10fc:	8d 91       	ld	r24, X+
    10fe:	9c 91       	ld	r25, X
    1100:	17 97       	sbiw	r26, 0x07	; 7
    1102:	01 96       	adiw	r24, 0x01	; 1
    1104:	17 96       	adiw	r26, 0x07	; 7
    1106:	9c 93       	st	X, r25
    1108:	8e 93       	st	-X, r24
    110a:	16 97       	sbiw	r26, 0x06	; 6
    110c:	ce 01       	movw	r24, r28
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	1f 91       	pop	r17
    1114:	0f 91       	pop	r16
    1116:	08 95       	ret

00001118 <__ultoa_invert>:
    1118:	fa 01       	movw	r30, r20
    111a:	aa 27       	eor	r26, r26
    111c:	28 30       	cpi	r18, 0x08	; 8
    111e:	51 f1       	breq	.+84     	; 0x1174 <__ultoa_invert+0x5c>
    1120:	20 31       	cpi	r18, 0x10	; 16
    1122:	81 f1       	breq	.+96     	; 0x1184 <__ultoa_invert+0x6c>
    1124:	e8 94       	clt
    1126:	6f 93       	push	r22
    1128:	6e 7f       	andi	r22, 0xFE	; 254
    112a:	6e 5f       	subi	r22, 0xFE	; 254
    112c:	7f 4f       	sbci	r23, 0xFF	; 255
    112e:	8f 4f       	sbci	r24, 0xFF	; 255
    1130:	9f 4f       	sbci	r25, 0xFF	; 255
    1132:	af 4f       	sbci	r26, 0xFF	; 255
    1134:	b1 e0       	ldi	r27, 0x01	; 1
    1136:	3e d0       	rcall	.+124    	; 0x11b4 <__ultoa_invert+0x9c>
    1138:	b4 e0       	ldi	r27, 0x04	; 4
    113a:	3c d0       	rcall	.+120    	; 0x11b4 <__ultoa_invert+0x9c>
    113c:	67 0f       	add	r22, r23
    113e:	78 1f       	adc	r23, r24
    1140:	89 1f       	adc	r24, r25
    1142:	9a 1f       	adc	r25, r26
    1144:	a1 1d       	adc	r26, r1
    1146:	68 0f       	add	r22, r24
    1148:	79 1f       	adc	r23, r25
    114a:	8a 1f       	adc	r24, r26
    114c:	91 1d       	adc	r25, r1
    114e:	a1 1d       	adc	r26, r1
    1150:	6a 0f       	add	r22, r26
    1152:	71 1d       	adc	r23, r1
    1154:	81 1d       	adc	r24, r1
    1156:	91 1d       	adc	r25, r1
    1158:	a1 1d       	adc	r26, r1
    115a:	20 d0       	rcall	.+64     	; 0x119c <__ultoa_invert+0x84>
    115c:	09 f4       	brne	.+2      	; 0x1160 <__ultoa_invert+0x48>
    115e:	68 94       	set
    1160:	3f 91       	pop	r19
    1162:	2a e0       	ldi	r18, 0x0A	; 10
    1164:	26 9f       	mul	r18, r22
    1166:	11 24       	eor	r1, r1
    1168:	30 19       	sub	r19, r0
    116a:	30 5d       	subi	r19, 0xD0	; 208
    116c:	31 93       	st	Z+, r19
    116e:	de f6       	brtc	.-74     	; 0x1126 <__ultoa_invert+0xe>
    1170:	cf 01       	movw	r24, r30
    1172:	08 95       	ret
    1174:	46 2f       	mov	r20, r22
    1176:	47 70       	andi	r20, 0x07	; 7
    1178:	40 5d       	subi	r20, 0xD0	; 208
    117a:	41 93       	st	Z+, r20
    117c:	b3 e0       	ldi	r27, 0x03	; 3
    117e:	0f d0       	rcall	.+30     	; 0x119e <__ultoa_invert+0x86>
    1180:	c9 f7       	brne	.-14     	; 0x1174 <__ultoa_invert+0x5c>
    1182:	f6 cf       	rjmp	.-20     	; 0x1170 <__ultoa_invert+0x58>
    1184:	46 2f       	mov	r20, r22
    1186:	4f 70       	andi	r20, 0x0F	; 15
    1188:	40 5d       	subi	r20, 0xD0	; 208
    118a:	4a 33       	cpi	r20, 0x3A	; 58
    118c:	18 f0       	brcs	.+6      	; 0x1194 <__ultoa_invert+0x7c>
    118e:	49 5d       	subi	r20, 0xD9	; 217
    1190:	31 fd       	sbrc	r19, 1
    1192:	40 52       	subi	r20, 0x20	; 32
    1194:	41 93       	st	Z+, r20
    1196:	02 d0       	rcall	.+4      	; 0x119c <__ultoa_invert+0x84>
    1198:	a9 f7       	brne	.-22     	; 0x1184 <__ultoa_invert+0x6c>
    119a:	ea cf       	rjmp	.-44     	; 0x1170 <__ultoa_invert+0x58>
    119c:	b4 e0       	ldi	r27, 0x04	; 4
    119e:	a6 95       	lsr	r26
    11a0:	97 95       	ror	r25
    11a2:	87 95       	ror	r24
    11a4:	77 95       	ror	r23
    11a6:	67 95       	ror	r22
    11a8:	ba 95       	dec	r27
    11aa:	c9 f7       	brne	.-14     	; 0x119e <__ultoa_invert+0x86>
    11ac:	00 97       	sbiw	r24, 0x00	; 0
    11ae:	61 05       	cpc	r22, r1
    11b0:	71 05       	cpc	r23, r1
    11b2:	08 95       	ret
    11b4:	9b 01       	movw	r18, r22
    11b6:	ac 01       	movw	r20, r24
    11b8:	0a 2e       	mov	r0, r26
    11ba:	06 94       	lsr	r0
    11bc:	57 95       	ror	r21
    11be:	47 95       	ror	r20
    11c0:	37 95       	ror	r19
    11c2:	27 95       	ror	r18
    11c4:	ba 95       	dec	r27
    11c6:	c9 f7       	brne	.-14     	; 0x11ba <__ultoa_invert+0xa2>
    11c8:	62 0f       	add	r22, r18
    11ca:	73 1f       	adc	r23, r19
    11cc:	84 1f       	adc	r24, r20
    11ce:	95 1f       	adc	r25, r21
    11d0:	a0 1d       	adc	r26, r0
    11d2:	08 95       	ret

000011d4 <eeprom_read_block>:
    11d4:	dc 01       	movw	r26, r24
    11d6:	cb 01       	movw	r24, r22

000011d8 <eeprom_read_blraw>:
    11d8:	fc 01       	movw	r30, r24
    11da:	f9 99       	sbic	0x1f, 1	; 31
    11dc:	fe cf       	rjmp	.-4      	; 0x11da <eeprom_read_blraw+0x2>
    11de:	06 c0       	rjmp	.+12     	; 0x11ec <eeprom_read_blraw+0x14>
    11e0:	f2 bd       	out	0x22, r31	; 34
    11e2:	e1 bd       	out	0x21, r30	; 33
    11e4:	f8 9a       	sbi	0x1f, 0	; 31
    11e6:	31 96       	adiw	r30, 0x01	; 1
    11e8:	00 b4       	in	r0, 0x20	; 32
    11ea:	0d 92       	st	X+, r0
    11ec:	41 50       	subi	r20, 0x01	; 1
    11ee:	50 40       	sbci	r21, 0x00	; 0
    11f0:	b8 f7       	brcc	.-18     	; 0x11e0 <eeprom_read_blraw+0x8>
    11f2:	08 95       	ret

000011f4 <eeprom_read_word>:
    11f4:	a8 e1       	ldi	r26, 0x18	; 24
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	42 e0       	ldi	r20, 0x02	; 2
    11fa:	50 e0       	ldi	r21, 0x00	; 0
    11fc:	0c 94 ec 08 	jmp	0x11d8	; 0x11d8 <eeprom_read_blraw>

00001200 <eeprom_write_block>:
    1200:	dc 01       	movw	r26, r24
    1202:	cb 01       	movw	r24, r22
    1204:	03 c0       	rjmp	.+6      	; 0x120c <eeprom_write_block+0xc>
    1206:	2d 91       	ld	r18, X+
    1208:	0e 94 0b 09 	call	0x1216	; 0x1216 <eeprom_write_r18>
    120c:	41 50       	subi	r20, 0x01	; 1
    120e:	50 40       	sbci	r21, 0x00	; 0
    1210:	d0 f7       	brcc	.-12     	; 0x1206 <eeprom_write_block+0x6>
    1212:	08 95       	ret

00001214 <eeprom_write_byte>:
    1214:	26 2f       	mov	r18, r22

00001216 <eeprom_write_r18>:
    1216:	f9 99       	sbic	0x1f, 1	; 31
    1218:	fe cf       	rjmp	.-4      	; 0x1216 <eeprom_write_r18>
    121a:	1f ba       	out	0x1f, r1	; 31
    121c:	92 bd       	out	0x22, r25	; 34
    121e:	81 bd       	out	0x21, r24	; 33
    1220:	20 bd       	out	0x20, r18	; 32
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	f8 94       	cli
    1226:	fa 9a       	sbi	0x1f, 2	; 31
    1228:	f9 9a       	sbi	0x1f, 1	; 31
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	01 96       	adiw	r24, 0x01	; 1
    122e:	08 95       	ret

00001230 <eeprom_write_word>:
    1230:	0e 94 0a 09 	call	0x1214	; 0x1214 <eeprom_write_byte>
    1234:	27 2f       	mov	r18, r23
    1236:	0c 94 0b 09 	jmp	0x1216	; 0x1216 <eeprom_write_r18>

0000123a <__mulsi3>:
    123a:	db 01       	movw	r26, r22
    123c:	8f 93       	push	r24
    123e:	9f 93       	push	r25
    1240:	0e 94 4f 09 	call	0x129e	; 0x129e <__muluhisi3>
    1244:	bf 91       	pop	r27
    1246:	af 91       	pop	r26
    1248:	a2 9f       	mul	r26, r18
    124a:	80 0d       	add	r24, r0
    124c:	91 1d       	adc	r25, r1
    124e:	a3 9f       	mul	r26, r19
    1250:	90 0d       	add	r25, r0
    1252:	b2 9f       	mul	r27, r18
    1254:	90 0d       	add	r25, r0
    1256:	11 24       	eor	r1, r1
    1258:	08 95       	ret

0000125a <__udivmodsi4>:
    125a:	a1 e2       	ldi	r26, 0x21	; 33
    125c:	1a 2e       	mov	r1, r26
    125e:	aa 1b       	sub	r26, r26
    1260:	bb 1b       	sub	r27, r27
    1262:	fd 01       	movw	r30, r26
    1264:	0d c0       	rjmp	.+26     	; 0x1280 <__udivmodsi4_ep>

00001266 <__udivmodsi4_loop>:
    1266:	aa 1f       	adc	r26, r26
    1268:	bb 1f       	adc	r27, r27
    126a:	ee 1f       	adc	r30, r30
    126c:	ff 1f       	adc	r31, r31
    126e:	a2 17       	cp	r26, r18
    1270:	b3 07       	cpc	r27, r19
    1272:	e4 07       	cpc	r30, r20
    1274:	f5 07       	cpc	r31, r21
    1276:	20 f0       	brcs	.+8      	; 0x1280 <__udivmodsi4_ep>
    1278:	a2 1b       	sub	r26, r18
    127a:	b3 0b       	sbc	r27, r19
    127c:	e4 0b       	sbc	r30, r20
    127e:	f5 0b       	sbc	r31, r21

00001280 <__udivmodsi4_ep>:
    1280:	66 1f       	adc	r22, r22
    1282:	77 1f       	adc	r23, r23
    1284:	88 1f       	adc	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	1a 94       	dec	r1
    128a:	69 f7       	brne	.-38     	; 0x1266 <__udivmodsi4_loop>
    128c:	60 95       	com	r22
    128e:	70 95       	com	r23
    1290:	80 95       	com	r24
    1292:	90 95       	com	r25
    1294:	9b 01       	movw	r18, r22
    1296:	ac 01       	movw	r20, r24
    1298:	bd 01       	movw	r22, r26
    129a:	cf 01       	movw	r24, r30
    129c:	08 95       	ret

0000129e <__muluhisi3>:
    129e:	0e 94 bf 04 	call	0x97e	; 0x97e <__umulhisi3>
    12a2:	a5 9f       	mul	r26, r21
    12a4:	90 0d       	add	r25, r0
    12a6:	b4 9f       	mul	r27, r20
    12a8:	90 0d       	add	r25, r0
    12aa:	a4 9f       	mul	r26, r20
    12ac:	80 0d       	add	r24, r0
    12ae:	91 1d       	adc	r25, r1
    12b0:	11 24       	eor	r1, r1
    12b2:	08 95       	ret

000012b4 <__prologue_saves__>:
    12b4:	2f 92       	push	r2
    12b6:	3f 92       	push	r3
    12b8:	4f 92       	push	r4
    12ba:	5f 92       	push	r5
    12bc:	6f 92       	push	r6
    12be:	7f 92       	push	r7
    12c0:	8f 92       	push	r8
    12c2:	9f 92       	push	r9
    12c4:	af 92       	push	r10
    12c6:	bf 92       	push	r11
    12c8:	cf 92       	push	r12
    12ca:	df 92       	push	r13
    12cc:	ef 92       	push	r14
    12ce:	ff 92       	push	r15
    12d0:	0f 93       	push	r16
    12d2:	1f 93       	push	r17
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
    12dc:	ca 1b       	sub	r28, r26
    12de:	db 0b       	sbc	r29, r27
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	f8 94       	cli
    12e4:	de bf       	out	0x3e, r29	; 62
    12e6:	0f be       	out	0x3f, r0	; 63
    12e8:	cd bf       	out	0x3d, r28	; 61
    12ea:	09 94       	ijmp

000012ec <__epilogue_restores__>:
    12ec:	2a 88       	ldd	r2, Y+18	; 0x12
    12ee:	39 88       	ldd	r3, Y+17	; 0x11
    12f0:	48 88       	ldd	r4, Y+16	; 0x10
    12f2:	5f 84       	ldd	r5, Y+15	; 0x0f
    12f4:	6e 84       	ldd	r6, Y+14	; 0x0e
    12f6:	7d 84       	ldd	r7, Y+13	; 0x0d
    12f8:	8c 84       	ldd	r8, Y+12	; 0x0c
    12fa:	9b 84       	ldd	r9, Y+11	; 0x0b
    12fc:	aa 84       	ldd	r10, Y+10	; 0x0a
    12fe:	b9 84       	ldd	r11, Y+9	; 0x09
    1300:	c8 84       	ldd	r12, Y+8	; 0x08
    1302:	df 80       	ldd	r13, Y+7	; 0x07
    1304:	ee 80       	ldd	r14, Y+6	; 0x06
    1306:	fd 80       	ldd	r15, Y+5	; 0x05
    1308:	0c 81       	ldd	r16, Y+4	; 0x04
    130a:	1b 81       	ldd	r17, Y+3	; 0x03
    130c:	aa 81       	ldd	r26, Y+2	; 0x02
    130e:	b9 81       	ldd	r27, Y+1	; 0x01
    1310:	ce 0f       	add	r28, r30
    1312:	d1 1d       	adc	r29, r1
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	f8 94       	cli
    1318:	de bf       	out	0x3e, r29	; 62
    131a:	0f be       	out	0x3f, r0	; 63
    131c:	cd bf       	out	0x3d, r28	; 61
    131e:	ed 01       	movw	r28, r26
    1320:	08 95       	ret

00001322 <_exit>:
    1322:	f8 94       	cli

00001324 <__stop_program>:
    1324:	ff cf       	rjmp	.-2      	; 0x1324 <__stop_program>
