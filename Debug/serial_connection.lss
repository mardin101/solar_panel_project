
serial_connection.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000170  00800100  00001428  000014dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001428  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000034  00800270  00800270  0000164c  2**0
                  ALLOC
  3 .eeprom       00000017  00810000  00810000  0000164c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00001663  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016c0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000002a8  00000000  00000000  00001700  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002794  00000000  00000000  000019a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001017  00000000  00000000  0000413c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000014e1  00000000  00000000  00005153  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000594  00000000  00000000  00006634  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000089d  00000000  00000000  00006bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001188  00000000  00000000  00007465  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000198  00000000  00000000  000085ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 76 00 	jmp	0xec	; 0xec <__vector_1>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 b2 02 	jmp	0x564	; 0x564 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e2       	ldi	r30, 0x28	; 40
      7c:	f4 e1       	ldi	r31, 0x14	; 20
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 37       	cpi	r26, 0x70	; 112
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a0 e7       	ldi	r26, 0x70	; 112
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a4 3a       	cpi	r26, 0xA4	; 164
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 27 05 	call	0xa4e	; 0xa4e <main>
      9e:	0c 94 12 0a 	jmp	0x1424	; 0x1424 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_16>:
uint16_t timer_value;
int distance_cm;
uint8_t error;

ISR (TIMER0_OVF_vect)
{
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	0f b6       	in	r0, 0x3f	; 63
      ac:	0f 92       	push	r0
      ae:	11 24       	eor	r1, r1
      b0:	8f 93       	push	r24
      b2:	9f 93       	push	r25
	if(rising_edge==1) //Check if there was echo
      b4:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <rising_edge>
      b8:	81 30       	cpi	r24, 0x01	; 1
      ba:	89 f4       	brne	.+34     	; 0xde <__vector_16+0x38>
	{
		timer_value++;
      bc:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <timer_value>
      c0:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <timer_value+0x1>
      c4:	01 96       	adiw	r24, 0x01	; 1
      c6:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <timer_value+0x1>
      ca:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <timer_value>
		/*Check if isnt out of range*/
		if(timer_value > 91)
      ce:	8c 35       	cpi	r24, 0x5C	; 92
      d0:	91 05       	cpc	r25, r1
      d2:	28 f0       	brcs	.+10     	; 0xde <__vector_16+0x38>
		{
			rising_edge = 0;
      d4:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <rising_edge>
			error = 1;
      d8:	81 e0       	ldi	r24, 0x01	; 1
      da:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <error>
		}
	}
}
      de:	9f 91       	pop	r25
      e0:	8f 91       	pop	r24
      e2:	0f 90       	pop	r0
      e4:	0f be       	out	0x3f, r0	; 63
      e6:	0f 90       	pop	r0
      e8:	1f 90       	pop	r1
      ea:	18 95       	reti

000000ec <__vector_1>:
ISR (INT0_vect)
{
      ec:	1f 92       	push	r1
      ee:	0f 92       	push	r0
      f0:	0f b6       	in	r0, 0x3f	; 63
      f2:	0f 92       	push	r0
      f4:	11 24       	eor	r1, r1
      f6:	2f 93       	push	r18
      f8:	3f 93       	push	r19
      fa:	6f 93       	push	r22
      fc:	7f 93       	push	r23
      fe:	8f 93       	push	r24
     100:	9f 93       	push	r25
     102:	af 93       	push	r26
     104:	bf 93       	push	r27
	if(rising_edge==0) {
     106:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <rising_edge>
     10a:	81 11       	cpse	r24, r1
     10c:	09 c0       	rjmp	.+18     	; 0x120 <__vector_1+0x34>
		rising_edge=1;
     10e:	81 e0       	ldi	r24, 0x01	; 1
     110:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <rising_edge>
		TCNT0 = 0;
     114:	16 bc       	out	0x26, r1	; 38
		timer_value = 0;
     116:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <timer_value+0x1>
     11a:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <timer_value>
     11e:	17 c0       	rjmp	.+46     	; 0x14e <__vector_1+0x62>
	} else { //Check if echo turned low, calculate distance 
		rising_edge = 0;
     120:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <rising_edge>
		distance_cm = (timer_value*256 + TCNT0)/58;
     124:	86 b5       	in	r24, 0x26	; 38
     126:	20 e0       	ldi	r18, 0x00	; 0
     128:	30 e0       	ldi	r19, 0x00	; 0
     12a:	30 91 73 02 	lds	r19, 0x0273	; 0x800273 <timer_value>
     12e:	28 0f       	add	r18, r24
     130:	31 1d       	adc	r19, r1
     132:	af e9       	ldi	r26, 0x9F	; 159
     134:	b6 e4       	ldi	r27, 0x46	; 70
     136:	0e 94 40 05 	call	0xa80	; 0xa80 <__umulhisi3>
     13a:	92 95       	swap	r25
     13c:	82 95       	swap	r24
     13e:	8f 70       	andi	r24, 0x0F	; 15
     140:	89 27       	eor	r24, r25
     142:	9f 70       	andi	r25, 0x0F	; 15
     144:	89 27       	eor	r24, r25
     146:	90 93 78 02 	sts	0x0278, r25	; 0x800278 <distance_cm+0x1>
     14a:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <distance_cm>
	}
	
}
     14e:	bf 91       	pop	r27
     150:	af 91       	pop	r26
     152:	9f 91       	pop	r25
     154:	8f 91       	pop	r24
     156:	7f 91       	pop	r23
     158:	6f 91       	pop	r22
     15a:	3f 91       	pop	r19
     15c:	2f 91       	pop	r18
     15e:	0f 90       	pop	r0
     160:	0f be       	out	0x3f, r0	; 63
     162:	0f 90       	pop	r0
     164:	1f 90       	pop	r1
     166:	18 95       	reti

00000168 <Send_signal>:

void Send_signal()
{
		error = 0;		//Clean errors
     168:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <error>

		PORTD &=~ (1 << PIND4);
     16c:	5c 98       	cbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     16e:	00 00       	nop
		_delay_us(1);
		PORTD |= (1 << PIND4); //Send 10us second pulse
     170:	5c 9a       	sbi	0x0b, 4	; 11
     172:	83 e0       	ldi	r24, 0x03	; 3
     174:	8a 95       	dec	r24
     176:	f1 f7       	brne	.-4      	; 0x174 <Send_signal+0xc>
     178:	00 00       	nop
		_delay_us(10);
		PORTD &=~ (1 << PIND4);
     17a:	5c 98       	cbi	0x0b, 4	; 11
     17c:	08 95       	ret

0000017e <Initialize_external_interrupt>:
}

void Initialize_external_interrupt()
{
	EICRA |= (1 << ISC00);    // set INT0 to trigger on ANY logic change
     17e:	e9 e6       	ldi	r30, 0x69	; 105
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	80 81       	ld	r24, Z
     184:	81 60       	ori	r24, 0x01	; 1
     186:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);     // Turns on INT0
     188:	e8 9a       	sbi	0x1d, 0	; 29
	sei();
     18a:	78 94       	sei
     18c:	08 95       	ret

0000018e <Initialize_Ports>:


void Initialize_Ports()
{
	//init port
	DDRD |= 0b00011111;
     18e:	8a b1       	in	r24, 0x0a	; 10
     190:	8f 61       	ori	r24, 0x1F	; 31
     192:	8a b9       	out	0x0a, r24	; 10
	DDRD &=~ (1 << PIND2);
     194:	52 98       	cbi	0x0a, 2	; 10
     196:	80 e1       	ldi	r24, 0x10	; 16
     198:	8a 95       	dec	r24
     19a:	f1 f7       	brne	.-4      	; 0x198 <Initialize_Ports+0xa>
     19c:	00 c0       	rjmp	.+0      	; 0x19e <Initialize_Ports+0x10>
	_delay_us(50);
	PORTD = 0;
     19e:	1b b8       	out	0x0b, r1	; 11
     1a0:	81 e2       	ldi	r24, 0x21	; 33
     1a2:	8a 95       	dec	r24
     1a4:	f1 f7       	brne	.-4      	; 0x1a2 <Initialize_Ports+0x14>
     1a6:	00 00       	nop
     1a8:	08 95       	ret

000001aa <Initialize_timer0>:
	_delay_us(100);
}

void Initialize_timer0()
{
	TCCR0B |= (1 << CS01); //prescaling x8
     1aa:	85 b5       	in	r24, 0x25	; 37
     1ac:	82 60       	ori	r24, 0x02	; 2
     1ae:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;			//Reset timer
     1b0:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1 << TOIE0); //Timer overflow interrupt enable
     1b2:	ee e6       	ldi	r30, 0x6E	; 110
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	80 81       	ld	r24, Z
     1b8:	81 60       	ori	r24, 0x01	; 1
     1ba:	80 83       	st	Z, r24
     1bc:	08 95       	ret

000001be <initEEPROM>:
/* Initialises the eeprom with default values if this device never has booted yet.
/* Since all the EEPROM is filled with 1's, we take a random byte and read its value.
/* If its a one, we can safely assume we can set default values.
/************************************************************************/
void initEEPROM()
{
     1be:	cf 93       	push	r28
     1c0:	df 93       	push	r29
     1c2:	cd b7       	in	r28, 0x3d	; 61
     1c4:	de b7       	in	r29, 0x3e	; 62
     1c6:	28 97       	sbiw	r28, 0x08	; 8
     1c8:	0f b6       	in	r0, 0x3f	; 63
     1ca:	f8 94       	cli
     1cc:	de bf       	out	0x3e, r29	; 62
     1ce:	0f be       	out	0x3f, r0	; 63
     1d0:	cd bf       	out	0x3d, r28	; 61
	uint8_t SRAMFirstBoot;
	
	SRAMFirstBoot = eeprom_read_word(&FirstBoot);
     1d2:	84 e0       	ldi	r24, 0x04	; 4
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <eeprom_read_word>

	if (SRAMFirstBoot != 0) {
     1da:	88 23       	and	r24, r24
     1dc:	09 f4       	brne	.+2      	; 0x1e0 <initEEPROM+0x22>
     1de:	41 c0       	rjmp	.+130    	; 0x262 <initEEPROM+0xa4>
		char string[] = "NO-NAME";
     1e0:	88 e0       	ldi	r24, 0x08	; 8
     1e2:	ee e0       	ldi	r30, 0x0E	; 14
     1e4:	f1 e0       	ldi	r31, 0x01	; 1
     1e6:	de 01       	movw	r26, r28
     1e8:	11 96       	adiw	r26, 0x01	; 1
     1ea:	01 90       	ld	r0, Z+
     1ec:	0d 92       	st	X+, r0
     1ee:	8a 95       	dec	r24
     1f0:	e1 f7       	brne	.-8      	; 0x1ea <initEEPROM+0x2c>
		eeprom_write_block((const void*)string, DeviceName, 10);
     1f2:	4a e0       	ldi	r20, 0x0A	; 10
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	6d e0       	ldi	r22, 0x0D	; 13
     1f8:	70 e0       	ldi	r23, 0x00	; 0
     1fa:	ce 01       	movw	r24, r28
     1fc:	01 96       	adiw	r24, 0x01	; 1
     1fe:	0e 94 81 09 	call	0x1302	; 0x1302 <eeprom_write_block>
		eeprom_write_word((uint16_t *) &Mode, 0x1);
     202:	61 e0       	ldi	r22, 0x01	; 1
     204:	70 e0       	ldi	r23, 0x00	; 0
     206:	82 e0       	ldi	r24, 0x02	; 2
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 99 09 	call	0x1332	; 0x1332 <eeprom_write_word>
		eeprom_write_word((uint16_t *)&TempMin, 0x0);
     20e:	60 e0       	ldi	r22, 0x00	; 0
     210:	70 e0       	ldi	r23, 0x00	; 0
     212:	89 e0       	ldi	r24, 0x09	; 9
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 99 09 	call	0x1332	; 0x1332 <eeprom_write_word>
		eeprom_write_word((uint16_t *) &TempMax, 0x50);
     21a:	60 e5       	ldi	r22, 0x50	; 80
     21c:	70 e0       	ldi	r23, 0x00	; 0
     21e:	8b e0       	ldi	r24, 0x0B	; 11
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	0e 94 99 09 	call	0x1332	; 0x1332 <eeprom_write_word>
		eeprom_write_word((uint16_t *) &LightThresholdMin, 0xDF);
     226:	6f ed       	ldi	r22, 0xDF	; 223
     228:	70 e0       	ldi	r23, 0x00	; 0
     22a:	87 e0       	ldi	r24, 0x07	; 7
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	0e 94 99 09 	call	0x1332	; 0x1332 <eeprom_write_word>
		eeprom_write_word((uint16_t *) &LightThresholdMax, 0xEF);
     232:	6f ee       	ldi	r22, 0xEF	; 239
     234:	70 e0       	ldi	r23, 0x00	; 0
     236:	85 e0       	ldi	r24, 0x05	; 5
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	0e 94 99 09 	call	0x1332	; 0x1332 <eeprom_write_word>
		eeprom_write_word((uint16_t *) &LightThresholdMax, 0xEF);
     23e:	6f ee       	ldi	r22, 0xEF	; 239
     240:	70 e0       	ldi	r23, 0x00	; 0
     242:	85 e0       	ldi	r24, 0x05	; 5
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	0e 94 99 09 	call	0x1332	; 0x1332 <eeprom_write_word>
		eeprom_write_word((uint16_t *) &MaxDistance, 0x96);
     24a:	66 e9       	ldi	r22, 0x96	; 150
     24c:	70 e0       	ldi	r23, 0x00	; 0
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	0e 94 99 09 	call	0x1332	; 0x1332 <eeprom_write_word>
		
		SRAMFirstBoot = 0x0;
		eeprom_write_word(&FirstBoot, SRAMFirstBoot);
     256:	60 e0       	ldi	r22, 0x00	; 0
     258:	70 e0       	ldi	r23, 0x00	; 0
     25a:	84 e0       	ldi	r24, 0x04	; 4
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	0e 94 99 09 	call	0x1332	; 0x1332 <eeprom_write_word>
	}
}
     262:	28 96       	adiw	r28, 0x08	; 8
     264:	0f b6       	in	r0, 0x3f	; 63
     266:	f8 94       	cli
     268:	de bf       	out	0x3e, r29	; 62
     26a:	0f be       	out	0x3f, r0	; 63
     26c:	cd bf       	out	0x3d, r28	; 61
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	08 95       	ret

00000274 <setMode>:
/************************************************************************/
/* Sets the mode either to automatic or manual, depending on value
/************************************************************************/
void setMode(uint16_t mode)
{
	eeprom_write_word((uint16_t *)&Mode, mode);
     274:	bc 01       	movw	r22, r24
     276:	82 e0       	ldi	r24, 0x02	; 2
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	0e 94 99 09 	call	0x1332	; 0x1332 <eeprom_write_word>
     27e:	08 95       	ret

00000280 <setTempMin>:
/************************************************************************/
/* Set the minimal temperature for the panel to go up in EEPROM
/************************************************************************/
void setTempMin(uint16_t temp)
{
	eeprom_write_word((uint16_t *)&TempMin, temp);
     280:	bc 01       	movw	r22, r24
     282:	89 e0       	ldi	r24, 0x09	; 9
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	0e 94 99 09 	call	0x1332	; 0x1332 <eeprom_write_word>
     28a:	08 95       	ret

0000028c <setTempMax>:
/************************************************************************/
/* Set the maximal temperature for the panel to go up in EEPROM         
/************************************************************************/
void setTempMax(uint16_t temp)
{
	eeprom_write_word((uint16_t *)&TempMax, temp);
     28c:	bc 01       	movw	r22, r24
     28e:	8b e0       	ldi	r24, 0x0B	; 11
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	0e 94 99 09 	call	0x1332	; 0x1332 <eeprom_write_word>
     296:	08 95       	ret

00000298 <setLightMin>:
/************************************************************************/
/* Sets the minimal light threshold for the panel to down up in EEPROM
/************************************************************************/
void setLightMin(uint16_t light)
{
	eeprom_write_word((uint16_t *)&LightThresholdMin, light);
     298:	bc 01       	movw	r22, r24
     29a:	87 e0       	ldi	r24, 0x07	; 7
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	0e 94 99 09 	call	0x1332	; 0x1332 <eeprom_write_word>
     2a2:	08 95       	ret

000002a4 <setLightMax>:
/************************************************************************/
/* Sets the maximal light threshold for the panel to down up in EEPROM                                                                     */
/************************************************************************/
void setLightMax(uint16_t light)
{
	eeprom_write_word((uint16_t *)&LightThresholdMax, light);
     2a4:	bc 01       	movw	r22, r24
     2a6:	85 e0       	ldi	r24, 0x05	; 5
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	0e 94 99 09 	call	0x1332	; 0x1332 <eeprom_write_word>
     2ae:	08 95       	ret

000002b0 <setDeviceName>:
/************************************************************************/
/* Sets the device name in EEPROM. Device name can not be longer than 10 characters
/************************************************************************/
void setDeviceName(char* newName)
{
	int length = strlen(newName);
     2b0:	fc 01       	movw	r30, r24
     2b2:	01 90       	ld	r0, Z+
     2b4:	00 20       	and	r0, r0
     2b6:	e9 f7       	brne	.-6      	; 0x2b2 <setDeviceName+0x2>
     2b8:	31 97       	sbiw	r30, 0x01	; 1
     2ba:	e8 1b       	sub	r30, r24
     2bc:	f9 0b       	sbc	r31, r25
	
	if (length > 10) {
     2be:	3b 97       	sbiw	r30, 0x0b	; 11
     2c0:	4c f0       	brlt	.+18     	; 0x2d4 <setDeviceName+0x24>
		printf("5:name_too_long \r");
     2c2:	86 e1       	ldi	r24, 0x16	; 22
     2c4:	91 e0       	ldi	r25, 0x01	; 1
     2c6:	9f 93       	push	r25
     2c8:	8f 93       	push	r24
     2ca:	0e 94 91 06 	call	0xd22	; 0xd22 <printf>
     2ce:	0f 90       	pop	r0
     2d0:	0f 90       	pop	r0
     2d2:	08 95       	ret
	} else {
		eeprom_write_block((const void*)newName, DeviceName, 10);
     2d4:	4a e0       	ldi	r20, 0x0A	; 10
     2d6:	50 e0       	ldi	r21, 0x00	; 0
     2d8:	6d e0       	ldi	r22, 0x0D	; 13
     2da:	70 e0       	ldi	r23, 0x00	; 0
     2dc:	0e 94 81 09 	call	0x1302	; 0x1302 <eeprom_write_block>
		printf("2:\r\n");	
     2e0:	88 e2       	ldi	r24, 0x28	; 40
     2e2:	91 e0       	ldi	r25, 0x01	; 1
     2e4:	0e 94 a7 06 	call	0xd4e	; 0xd4e <puts>
     2e8:	08 95       	ret

000002ea <setDistanceMax>:
/************************************************************************/
/* Sets the maximum distance the panel can go down in EEPROM
/************************************************************************/
void setDistanceMax(uint16_t distance)
{
	eeprom_write_word((uint16_t *)&MaxDistance, distance);
     2ea:	bc 01       	movw	r22, r24
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	0e 94 99 09 	call	0x1332	; 0x1332 <eeprom_write_word>
     2f4:	08 95       	ret

000002f6 <getDeviceName>:

/************************************************************************/
/* Sets the value of the device name stored in EEPROM in to the string variable
/************************************************************************/
void getDeviceName(char* string, int buffersize)
{
     2f6:	ef 92       	push	r14
     2f8:	ff 92       	push	r15
     2fa:	0f 93       	push	r16
     2fc:	1f 93       	push	r17
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	cd b7       	in	r28, 0x3d	; 61
     304:	de b7       	in	r29, 0x3e	; 62
     306:	2a 97       	sbiw	r28, 0x0a	; 10
     308:	0f b6       	in	r0, 0x3f	; 63
     30a:	f8 94       	cli
     30c:	de bf       	out	0x3e, r29	; 62
     30e:	0f be       	out	0x3f, r0	; 63
     310:	cd bf       	out	0x3d, r28	; 61
     312:	7c 01       	movw	r14, r24
     314:	8b 01       	movw	r16, r22
	char  SRAMDeviceName[10];
	
	eeprom_read_block((void*)&SRAMDeviceName, (const void*)&DeviceName, 10);
     316:	4a e0       	ldi	r20, 0x0A	; 10
     318:	50 e0       	ldi	r21, 0x00	; 0
     31a:	6d e0       	ldi	r22, 0x0D	; 13
     31c:	70 e0       	ldi	r23, 0x00	; 0
     31e:	ce 01       	movw	r24, r28
     320:	01 96       	adiw	r24, 0x01	; 1
     322:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <eeprom_read_block>
	
	strncpy(string, SRAMDeviceName, buffersize-1);
     326:	a8 01       	movw	r20, r16
     328:	41 50       	subi	r20, 0x01	; 1
     32a:	51 09       	sbc	r21, r1
     32c:	be 01       	movw	r22, r28
     32e:	6f 5f       	subi	r22, 0xFF	; 255
     330:	7f 4f       	sbci	r23, 0xFF	; 255
     332:	c7 01       	movw	r24, r14
     334:	0e 94 82 06 	call	0xd04	; 0xd04 <strncpy>
	string[buffersize-1] = '\0';
     338:	0e 0d       	add	r16, r14
     33a:	1f 1d       	adc	r17, r15
     33c:	f8 01       	movw	r30, r16
     33e:	31 97       	sbiw	r30, 0x01	; 1
     340:	10 82       	st	Z, r1
}
     342:	2a 96       	adiw	r28, 0x0a	; 10
     344:	0f b6       	in	r0, 0x3f	; 63
     346:	f8 94       	cli
     348:	de bf       	out	0x3e, r29	; 62
     34a:	0f be       	out	0x3f, r0	; 63
     34c:	cd bf       	out	0x3d, r28	; 61
     34e:	df 91       	pop	r29
     350:	cf 91       	pop	r28
     352:	1f 91       	pop	r17
     354:	0f 91       	pop	r16
     356:	ff 90       	pop	r15
     358:	ef 90       	pop	r14
     35a:	08 95       	ret

0000035c <get_config>:

/************************************************************************/
/* Prints a string with all the values stored in EEPROM
/************************************************************************/
void get_config()
{
     35c:	4f 92       	push	r4
     35e:	5f 92       	push	r5
     360:	6f 92       	push	r6
     362:	7f 92       	push	r7
     364:	8f 92       	push	r8
     366:	9f 92       	push	r9
     368:	af 92       	push	r10
     36a:	bf 92       	push	r11
     36c:	cf 92       	push	r12
     36e:	df 92       	push	r13
     370:	ef 92       	push	r14
     372:	ff 92       	push	r15
     374:	0f 93       	push	r16
     376:	1f 93       	push	r17
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
     380:	2a 97       	sbiw	r28, 0x0a	; 10
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	f8 94       	cli
     386:	de bf       	out	0x3e, r29	; 62
     388:	0f be       	out	0x3f, r0	; 63
     38a:	cd bf       	out	0x3d, r28	; 61
	uint16_t SRAMMaxDistance;
	
	char SRAMDeviceName[10];
	
	int id = 1337; //unique project identifier
	SRAMMode = eeprom_read_word(&Mode);
     38c:	82 e0       	ldi	r24, 0x02	; 2
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <eeprom_read_word>
     394:	f8 2e       	mov	r15, r24
     396:	e9 2e       	mov	r14, r25
	SRAMTempMax = eeprom_read_word(&TempMax);
     398:	8b e0       	ldi	r24, 0x0B	; 11
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <eeprom_read_word>
     3a0:	b8 2e       	mov	r11, r24
     3a2:	a9 2e       	mov	r10, r25
	SRAMTempMin = eeprom_read_word(&TempMin);
     3a4:	89 e0       	ldi	r24, 0x09	; 9
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <eeprom_read_word>
     3ac:	d8 2e       	mov	r13, r24
     3ae:	c9 2e       	mov	r12, r25
	SRAMLightThresholdMax = eeprom_read_word(&LightThresholdMax);
     3b0:	85 e0       	ldi	r24, 0x05	; 5
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <eeprom_read_word>
     3b8:	78 2e       	mov	r7, r24
     3ba:	69 2e       	mov	r6, r25
	SRAMLightThresholdMin = eeprom_read_word(&LightThresholdMin);
     3bc:	87 e0       	ldi	r24, 0x07	; 7
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <eeprom_read_word>
     3c4:	98 2e       	mov	r9, r24
     3c6:	89 2e       	mov	r8, r25
	SRAMMaxDistance = eeprom_read_word(&MaxDistance);
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <eeprom_read_word>
     3d0:	58 2e       	mov	r5, r24
     3d2:	49 2e       	mov	r4, r25
	
	getDeviceName(SRAMDeviceName, sizeof(SRAMDeviceName));
     3d4:	6a e0       	ldi	r22, 0x0A	; 10
     3d6:	70 e0       	ldi	r23, 0x00	; 0
     3d8:	8e 01       	movw	r16, r28
     3da:	0f 5f       	subi	r16, 0xFF	; 255
     3dc:	1f 4f       	sbci	r17, 0xFF	; 255
     3de:	c8 01       	movw	r24, r16
     3e0:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <getDeviceName>

	printf("2:%i,%s,%i,%i,%i,%i,%i,%i\r\n", id, SRAMDeviceName, SRAMMode, SRAMTempMin, SRAMTempMax, SRAMLightThresholdMin,SRAMLightThresholdMax, SRAMMaxDistance);
     3e4:	4f 92       	push	r4
     3e6:	5f 92       	push	r5
     3e8:	6f 92       	push	r6
     3ea:	7f 92       	push	r7
     3ec:	8f 92       	push	r8
     3ee:	9f 92       	push	r9
     3f0:	af 92       	push	r10
     3f2:	bf 92       	push	r11
     3f4:	cf 92       	push	r12
     3f6:	df 92       	push	r13
     3f8:	ef 92       	push	r14
     3fa:	ff 92       	push	r15
     3fc:	1f 93       	push	r17
     3fe:	0f 93       	push	r16
     400:	85 e0       	ldi	r24, 0x05	; 5
     402:	8f 93       	push	r24
     404:	89 e3       	ldi	r24, 0x39	; 57
     406:	8f 93       	push	r24
     408:	8c e2       	ldi	r24, 0x2C	; 44
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	9f 93       	push	r25
     40e:	8f 93       	push	r24
     410:	0e 94 91 06 	call	0xd22	; 0xd22 <printf>
}
     414:	0f b6       	in	r0, 0x3f	; 63
     416:	f8 94       	cli
     418:	de bf       	out	0x3e, r29	; 62
     41a:	0f be       	out	0x3f, r0	; 63
     41c:	cd bf       	out	0x3d, r28	; 61
     41e:	2a 96       	adiw	r28, 0x0a	; 10
     420:	0f b6       	in	r0, 0x3f	; 63
     422:	f8 94       	cli
     424:	de bf       	out	0x3e, r29	; 62
     426:	0f be       	out	0x3f, r0	; 63
     428:	cd bf       	out	0x3d, r28	; 61
     42a:	df 91       	pop	r29
     42c:	cf 91       	pop	r28
     42e:	1f 91       	pop	r17
     430:	0f 91       	pop	r16
     432:	ff 90       	pop	r15
     434:	ef 90       	pop	r14
     436:	df 90       	pop	r13
     438:	cf 90       	pop	r12
     43a:	bf 90       	pop	r11
     43c:	af 90       	pop	r10
     43e:	9f 90       	pop	r9
     440:	8f 90       	pop	r8
     442:	7f 90       	pop	r7
     444:	6f 90       	pop	r6
     446:	5f 90       	pop	r5
     448:	4f 90       	pop	r4
     44a:	08 95       	ret

0000044c <panelUp>:
int panel_is_down = 0;
/************************************************************************/
/* Pulls the panel up
/************************************************************************/
int panelUp()
{
     44c:	1f 93       	push	r17
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
	if (panel_is_down == 1) {
     452:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <__data_end>
     456:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <__data_end+0x1>
     45a:	01 97       	sbiw	r24, 0x01	; 1
     45c:	61 f5       	brne	.+88     	; 0x4b6 <panelUp+0x6a>
		//clear red light first
		PORTB &= ~(1 << 0);
     45e:	28 98       	cbi	0x05, 0	; 5
		int i;
		PORTB |= (1 << 1); //set green led
     460:	29 9a       	sbi	0x05, 1	; 5
		
		uint16_t SRAMMaxDistance = eeprom_read_word(&MaxDistance);
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <eeprom_read_word>
     46a:	ec 01       	movw	r28, r24
		
		//printf("%i", distance_cm);
		while (distance_cm > SRAMMaxDistance) {
     46c:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <distance_cm>
     470:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <distance_cm+0x1>
     474:	c8 17       	cp	r28, r24
     476:	d9 07       	cpc	r29, r25
     478:	b0 f4       	brcc	.+44     	; 0x4a6 <panelUp+0x5a>
			PORTB ^= (1 << 2);
     47a:	14 e0       	ldi	r17, 0x04	; 4
     47c:	85 b1       	in	r24, 0x05	; 5
     47e:	81 27       	eor	r24, r17
     480:	85 b9       	out	0x05, r24	; 5
			Send_signal();
     482:	0e 94 b4 00 	call	0x168	; 0x168 <Send_signal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     486:	2f ef       	ldi	r18, 0xFF	; 255
     488:	83 ed       	ldi	r24, 0xD3	; 211
     48a:	90 e3       	ldi	r25, 0x30	; 48
     48c:	21 50       	subi	r18, 0x01	; 1
     48e:	80 40       	sbci	r24, 0x00	; 0
     490:	90 40       	sbci	r25, 0x00	; 0
     492:	e1 f7       	brne	.-8      	; 0x48c <panelUp+0x40>
     494:	00 c0       	rjmp	.+0      	; 0x496 <panelUp+0x4a>
     496:	00 00       	nop
		PORTB |= (1 << 1); //set green led
		
		uint16_t SRAMMaxDistance = eeprom_read_word(&MaxDistance);
		
		//printf("%i", distance_cm);
		while (distance_cm > SRAMMaxDistance) {
     498:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <distance_cm>
     49c:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <distance_cm+0x1>
     4a0:	c8 17       	cp	r28, r24
     4a2:	d9 07       	cpc	r29, r25
     4a4:	58 f3       	brcs	.-42     	; 0x47c <panelUp+0x30>
			Send_signal();
			_delay_ms(1000);
			//printf("%i \r\n", distance_cm);
		}
		
		PORTB &= ~(1 << 2);
     4a6:	2a 98       	cbi	0x05, 2	; 5
		panel_is_down = 0;
     4a8:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <__data_end+0x1>
     4ac:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <__data_end>
		
		return 0;
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	02 c0       	rjmp	.+4      	; 0x4ba <panelUp+0x6e>
	}
	
	return 1;
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	90 e0       	ldi	r25, 0x00	; 0
}
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	1f 91       	pop	r17
     4c0:	08 95       	ret

000004c2 <panelDown>:

/************************************************************************/
/* Lets the panel go down
/************************************************************************/
int panelDown()
{
     4c2:	ef 92       	push	r14
     4c4:	ff 92       	push	r15
     4c6:	1f 93       	push	r17
     4c8:	cf 93       	push	r28
     4ca:	df 93       	push	r29
	if (panel_is_down == 0) {
     4cc:	e0 90 70 02 	lds	r14, 0x0270	; 0x800270 <__data_end>
     4d0:	f0 90 71 02 	lds	r15, 0x0271	; 0x800271 <__data_end+0x1>
     4d4:	e1 14       	cp	r14, r1
     4d6:	f1 04       	cpc	r15, r1
     4d8:	61 f5       	brne	.+88     	; 0x532 <panelDown+0x70>
		//printf("We gaan panel naar beneden doen\n\r");
		//printf("distance is nu: %i \n\r", distance_cm);
		//clear green light first
		PORTB &= ~(1 << 1);
     4da:	29 98       	cbi	0x05, 1	; 5
		int i;
		PORTB |= (1 << 0); //set red led
     4dc:	28 9a       	sbi	0x05, 0	; 5
		
		//toggle yellow led
		uint16_t SRAMMaxDistance = eeprom_read_word(&MaxDistance);
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <eeprom_read_word>
     4e6:	ec 01       	movw	r28, r24
		while (distance_cm < SRAMMaxDistance) {
     4e8:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <distance_cm>
     4ec:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <distance_cm+0x1>
     4f0:	8c 17       	cp	r24, r28
     4f2:	9d 07       	cpc	r25, r29
     4f4:	b0 f4       	brcc	.+44     	; 0x522 <panelDown+0x60>
			PORTB ^= (1 << 2);
     4f6:	14 e0       	ldi	r17, 0x04	; 4
     4f8:	85 b1       	in	r24, 0x05	; 5
     4fa:	81 27       	eor	r24, r17
     4fc:	85 b9       	out	0x05, r24	; 5
			Send_signal();
     4fe:	0e 94 b4 00 	call	0x168	; 0x168 <Send_signal>
     502:	2f ef       	ldi	r18, 0xFF	; 255
     504:	83 ed       	ldi	r24, 0xD3	; 211
     506:	90 e3       	ldi	r25, 0x30	; 48
     508:	21 50       	subi	r18, 0x01	; 1
     50a:	80 40       	sbci	r24, 0x00	; 0
     50c:	90 40       	sbci	r25, 0x00	; 0
     50e:	e1 f7       	brne	.-8      	; 0x508 <panelDown+0x46>
     510:	00 c0       	rjmp	.+0      	; 0x512 <panelDown+0x50>
     512:	00 00       	nop
		int i;
		PORTB |= (1 << 0); //set red led
		
		//toggle yellow led
		uint16_t SRAMMaxDistance = eeprom_read_word(&MaxDistance);
		while (distance_cm < SRAMMaxDistance) {
     514:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <distance_cm>
     518:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <distance_cm+0x1>
     51c:	8c 17       	cp	r24, r28
     51e:	9d 07       	cpc	r25, r29
     520:	58 f3       	brcs	.-42     	; 0x4f8 <panelDown+0x36>
			Send_signal();
			_delay_ms(1000);
			//printf("%i \r\n", distance_cm);
		}
		
		PORTB &= ~(1 << 2);
     522:	2a 98       	cbi	0x05, 2	; 5
		panel_is_down = 1;
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <__data_end+0x1>
     52c:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <__data_end>
		
		return 0;
     530:	03 c0       	rjmp	.+6      	; 0x538 <panelDown+0x76>
	} else {
		//printf("Panel was al naar beneden\n\r");
	}
	
	return 1;
     532:	ee 24       	eor	r14, r14
     534:	e3 94       	inc	r14
     536:	f1 2c       	mov	r15, r1
}
     538:	c7 01       	movw	r24, r14
     53a:	df 91       	pop	r29
     53c:	cf 91       	pop	r28
     53e:	1f 91       	pop	r17
     540:	ff 90       	pop	r15
     542:	ef 90       	pop	r14
     544:	08 95       	ret

00000546 <initPanel>:
led lights indicating the panel is up
/************************************************************************/
void initPanel()
{
	//first set the B port with leds
	DDRB = 0x7;
     546:	87 e0       	ldi	r24, 0x07	; 7
     548:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x7;
     54a:	85 b9       	out	0x05, r24	; 5
     54c:	2f ef       	ldi	r18, 0xFF	; 255
     54e:	83 ec       	ldi	r24, 0xC3	; 195
     550:	99 e0       	ldi	r25, 0x09	; 9
     552:	21 50       	subi	r18, 0x01	; 1
     554:	80 40       	sbci	r24, 0x00	; 0
     556:	90 40       	sbci	r25, 0x00	; 0
     558:	e1 f7       	brne	.-8      	; 0x552 <initPanel+0xc>
     55a:	00 c0       	rjmp	.+0      	; 0x55c <initPanel+0x16>
     55c:	00 00       	nop
	_delay_ms(200);
	PORTB = 0x2;
     55e:	82 e0       	ldi	r24, 0x02	; 2
     560:	85 b9       	out	0x05, r24	; 5
     562:	08 95       	ret

00000564 <__vector_11>:
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
     564:	1f 92       	push	r1
     566:	0f 92       	push	r0
     568:	0f b6       	in	r0, 0x3f	; 63
     56a:	0f 92       	push	r0
     56c:	11 24       	eor	r1, r1
     56e:	2f 93       	push	r18
     570:	3f 93       	push	r19
     572:	8f 93       	push	r24
     574:	9f 93       	push	r25
     576:	af 93       	push	r26
     578:	bf 93       	push	r27
     57a:	ef 93       	push	r30
     57c:	ff 93       	push	r31
     57e:	e9 e7       	ldi	r30, 0x79	; 121
     580:	f2 e0       	ldi	r31, 0x02	; 2
     582:	2c e9       	ldi	r18, 0x9C	; 156
     584:	32 e0       	ldi	r19, 0x02	; 2
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
     586:	80 81       	ld	r24, Z
     588:	91 81       	ldd	r25, Z+1	; 0x01
     58a:	89 2b       	or	r24, r25
     58c:	91 f0       	breq	.+36     	; 0x5b2 <__vector_11+0x4e>
      {
         if(SCH_tasks_G[Index].Delay == 0)
     58e:	82 81       	ldd	r24, Z+2	; 0x02
     590:	93 81       	ldd	r25, Z+3	; 0x03
     592:	00 97       	sbiw	r24, 0x00	; 0
     594:	59 f4       	brne	.+22     	; 0x5ac <__vector_11+0x48>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
     596:	86 81       	ldd	r24, Z+6	; 0x06
     598:	8f 5f       	subi	r24, 0xFF	; 255
     59a:	86 83       	std	Z+6, r24	; 0x06

            if(SCH_tasks_G[Index].Period)
     59c:	84 81       	ldd	r24, Z+4	; 0x04
     59e:	95 81       	ldd	r25, Z+5	; 0x05
     5a0:	00 97       	sbiw	r24, 0x00	; 0
     5a2:	39 f0       	breq	.+14     	; 0x5b2 <__vector_11+0x4e>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
     5a4:	01 97       	sbiw	r24, 0x01	; 1
     5a6:	93 83       	std	Z+3, r25	; 0x03
     5a8:	82 83       	std	Z+2, r24	; 0x02
     5aa:	03 c0       	rjmp	.+6      	; 0x5b2 <__vector_11+0x4e>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
     5ac:	01 97       	sbiw	r24, 0x01	; 1
     5ae:	93 83       	std	Z+3, r25	; 0x03
     5b0:	82 83       	std	Z+2, r24	; 0x02
     5b2:	37 96       	adiw	r30, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
     5b4:	e2 17       	cp	r30, r18
     5b6:	f3 07       	cpc	r31, r19
     5b8:	31 f7       	brne	.-52     	; 0x586 <__vector_11+0x22>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
     5ba:	ff 91       	pop	r31
     5bc:	ef 91       	pop	r30
     5be:	bf 91       	pop	r27
     5c0:	af 91       	pop	r26
     5c2:	9f 91       	pop	r25
     5c4:	8f 91       	pop	r24
     5c6:	3f 91       	pop	r19
     5c8:	2f 91       	pop	r18
     5ca:	0f 90       	pop	r0
     5cc:	0f be       	out	0x3f, r0	; 63
     5ce:	0f 90       	pop	r0
     5d0:	1f 90       	pop	r1
     5d2:	18 95       	reti

000005d4 <adc_init>:

void adc_init(void)
{
	//ADMUX = (1<<REFS0) | (1 << ADLAR);     //select AVCC as reference
	//ADCSRA = (1<<ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);  //enable and prescale = 128 (16MHz/128 = 125kHz)
	ADMUX |= (1 << REFS0) | (1 << ADLAR);
     5d4:	ec e7       	ldi	r30, 0x7C	; 124
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	80 81       	ld	r24, Z
     5da:	80 66       	ori	r24, 0x60	; 96
     5dc:	80 83       	st	Z, r24
	//enable ADC and set pre-scaler to 128
	ADCSRA = (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2) | (1 << ADEN);
     5de:	87 e8       	ldi	r24, 0x87	; 135
     5e0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     5e4:	08 95       	ret

000005e6 <adc_read>:
}

uint16_t adc_read()
{
	
	ADCSRA |= (1 << ADSC);
     5e6:	ea e7       	ldi	r30, 0x7A	; 122
     5e8:	f0 e0       	ldi	r31, 0x00	; 0
     5ea:	80 81       	ld	r24, Z
     5ec:	80 64       	ori	r24, 0x40	; 64
     5ee:	80 83       	st	Z, r24
	/* This is an idle loop that just wait around until the conversion
	 * is finished.  It constantly checks ADCSRA's ADSC bit, which we just
	 * set above, to see if it is still set.  This bit is automatically
	 * reset (zeroed) when the conversion is ready so if we do this in
	 * a loop the loop will just go until the conversion is ready. */
	loop_until_bit_is_clear(ADCSRA, ADSC);
     5f0:	80 81       	ld	r24, Z
     5f2:	86 fd       	sbrc	r24, 6
     5f4:	fd cf       	rjmp	.-6      	; 0x5f0 <adc_read+0xa>
	/* Finally, we return the converted value to the calling function. */
	return ADCH;
     5f6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	08 95       	ret

000005fe <readLight>:

uint16_t readLight()
{
	ADMUX = 0;
     5fe:	ec e7       	ldi	r30, 0x7C	; 124
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0) | (1 << ADLAR);
     604:	80 81       	ld	r24, Z
     606:	80 66       	ori	r24, 0x60	; 96
     608:	80 83       	st	Z, r24
	
	return adc_read();
     60a:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <adc_read>
}
     60e:	08 95       	ret

00000610 <getLight>:

void getLight() {
	int sensorValue = readLight();
     610:	0e 94 ff 02 	call	0x5fe	; 0x5fe <readLight>
	
	printf("2:%i \r\n", sensorValue);
     614:	9f 93       	push	r25
     616:	8f 93       	push	r24
     618:	8f e4       	ldi	r24, 0x4F	; 79
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	9f 93       	push	r25
     61e:	8f 93       	push	r24
     620:	0e 94 91 06 	call	0xd22	; 0xd22 <printf>
}
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	08 95       	ret

0000062e <getDistance>:
	printf("2:%i\r\n", (int)sensorInput);
}

void getDistance()
{
	printf("2:%i\r\n", (int)distance_cm);
     62e:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <distance_cm+0x1>
     632:	8f 93       	push	r24
     634:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <distance_cm>
     638:	8f 93       	push	r24
     63a:	88 e4       	ldi	r24, 0x48	; 72
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	9f 93       	push	r25
     640:	8f 93       	push	r24
     642:	0e 94 91 06 	call	0xd22	; 0xd22 <printf>
}
     646:	0f 90       	pop	r0
     648:	0f 90       	pop	r0
     64a:	0f 90       	pop	r0
     64c:	0f 90       	pop	r0
     64e:	08 95       	ret

00000650 <readTemperature>:


int readTemperature()
{
	//zet refs0 en adlar en zet pin 0 en 1 aan (3)
	ADMUX = 0;
     650:	ec e7       	ldi	r30, 0x7C	; 124
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0) | (1 << ADLAR) | (1 << MUX1) | (1 << MUX0);
     656:	80 81       	ld	r24, Z
     658:	83 66       	ori	r24, 0x63	; 99
     65a:	80 83       	st	Z, r24
	
	return adc_read() - 18;
     65c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <adc_read>
     660:	42 97       	sbiw	r24, 0x12	; 18
     662:	08 95       	ret

00000664 <getTemperature>:


void getTemperature() {
	int sensorInput;

	sensorInput = readTemperature();    //read the analog sensor and store it
     664:	0e 94 28 03 	call	0x650	; 0x650 <readTemperature>

	printf("2:%i\r\n", (int)sensorInput);
     668:	9f 93       	push	r25
     66a:	8f 93       	push	r24
     66c:	88 e4       	ldi	r24, 0x48	; 72
     66e:	91 e0       	ldi	r25, 0x01	; 1
     670:	9f 93       	push	r25
     672:	8f 93       	push	r24
     674:	0e 94 91 06 	call	0xd22	; 0xd22 <printf>
}
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	0f 90       	pop	r0
     67e:	0f 90       	pop	r0
     680:	08 95       	ret

00000682 <ser_init>:
}

void ser_writeln(char* s) {
	ser_write(s);
	ser_transmit('\r');
	ser_transmit('\n');
     682:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     686:	87 e6       	ldi	r24, 0x67	; 103
     688:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     68c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     690:	88 e1       	ldi	r24, 0x18	; 24
     692:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     696:	86 e0       	ldi	r24, 0x06	; 6
     698:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	91 e0       	ldi	r25, 0x01	; 1
     6a0:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <__iob+0x3>
     6a4:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <__iob+0x2>
     6a8:	08 95       	ret

000006aa <ser_transmit>:
     6aa:	e0 ec       	ldi	r30, 0xC0	; 192
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	90 81       	ld	r25, Z
     6b0:	95 ff       	sbrs	r25, 5
     6b2:	fd cf       	rjmp	.-6      	; 0x6ae <ser_transmit+0x4>
     6b4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     6b8:	08 95       	ret

000006ba <ser_stdio_putchar>:
     6ba:	cf 93       	push	r28
     6bc:	c8 2f       	mov	r28, r24
     6be:	8a 30       	cpi	r24, 0x0A	; 10
     6c0:	19 f4       	brne	.+6      	; 0x6c8 <ser_stdio_putchar+0xe>
     6c2:	8d e0       	ldi	r24, 0x0D	; 13
     6c4:	0e 94 55 03 	call	0x6aa	; 0x6aa <ser_transmit>
     6c8:	8c 2f       	mov	r24, r28
     6ca:	0e 94 55 03 	call	0x6aa	; 0x6aa <ser_transmit>
     6ce:	cf 91       	pop	r28
     6d0:	08 95       	ret

000006d2 <ser_receive>:
     6d2:	e0 ec       	ldi	r30, 0xC0	; 192
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	80 81       	ld	r24, Z
     6d8:	88 23       	and	r24, r24
     6da:	ec f7       	brge	.-6      	; 0x6d6 <ser_receive+0x4>
     6dc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     6e0:	08 95       	ret

000006e2 <ser_readln>:
}

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
     6e2:	cf 92       	push	r12
     6e4:	df 92       	push	r13
     6e6:	ef 92       	push	r14
     6e8:	ff 92       	push	r15
     6ea:	0f 93       	push	r16
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	6c 01       	movw	r12, r24
     6f4:	d4 2f       	mov	r29, r20
	int i=0;
     6f6:	00 e0       	ldi	r16, 0x00	; 0
     6f8:	10 e0       	ldi	r17, 0x00	; 0
		if (c=='\r') {
			if (echo) ser_transmit('\n');

			break; // ENTER ontvangen
		}
		if (i<maxlength-1 && c != '\n' && c != '\r') {
     6fa:	7b 01       	movw	r14, r22
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	e8 1a       	sub	r14, r24
     700:	f1 08       	sbc	r15, r1
// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
	int i=0;

	while(1) {
		uint8_t c = ser_receive();
     702:	0e 94 69 03 	call	0x6d2	; 0x6d2 <ser_receive>
     706:	c8 2f       	mov	r28, r24
		if (echo) ser_transmit(c);
     708:	d1 11       	cpse	r29, r1
     70a:	0e 94 55 03 	call	0x6aa	; 0x6aa <ser_transmit>
		if (c=='\r') {
     70e:	cd 30       	cpi	r28, 0x0D	; 13
     710:	31 f4       	brne	.+12     	; 0x71e <ser_readln+0x3c>
			if (echo) ser_transmit('\n');
     712:	dd 23       	and	r29, r29
     714:	81 f0       	breq	.+32     	; 0x736 <ser_readln+0x54>
     716:	8a e0       	ldi	r24, 0x0A	; 10
     718:	0e 94 55 03 	call	0x6aa	; 0x6aa <ser_transmit>
     71c:	0c c0       	rjmp	.+24     	; 0x736 <ser_readln+0x54>

			break; // ENTER ontvangen
		}
		if (i<maxlength-1 && c != '\n' && c != '\r') {
     71e:	0e 15       	cp	r16, r14
     720:	1f 05       	cpc	r17, r15
     722:	7c f7       	brge	.-34     	; 0x702 <ser_readln+0x20>
     724:	ca 30       	cpi	r28, 0x0A	; 10
     726:	69 f3       	breq	.-38     	; 0x702 <ser_readln+0x20>
			buf[i++]=c;
     728:	f6 01       	movw	r30, r12
     72a:	e0 0f       	add	r30, r16
     72c:	f1 1f       	adc	r31, r17
     72e:	c0 83       	st	Z, r28
     730:	0f 5f       	subi	r16, 0xFF	; 255
     732:	1f 4f       	sbci	r17, 0xFF	; 255
     734:	e6 cf       	rjmp	.-52     	; 0x702 <ser_readln+0x20>
		}
	}
	buf[i]='\0';
     736:	f6 01       	movw	r30, r12
     738:	e0 0f       	add	r30, r16
     73a:	f1 1f       	adc	r31, r17
     73c:	10 82       	st	Z, r1
}
     73e:	df 91       	pop	r29
     740:	cf 91       	pop	r28
     742:	1f 91       	pop	r17
     744:	0f 91       	pop	r16
     746:	ff 90       	pop	r15
     748:	ef 90       	pop	r14
     74a:	df 90       	pop	r13
     74c:	cf 90       	pop	r12
     74e:	08 95       	ret

00000750 <run>:
/* This is the main function of the application. It checks for temperature conditions 
and does something with the panel accordingly.
It also checks if its light enough for the panel to go down or up.
/************************************************************************/
void run()
{
     750:	ef 92       	push	r14
     752:	ff 92       	push	r15
     754:	0f 93       	push	r16
     756:	1f 93       	push	r17
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
	uint8_t temp = readTemperature();
     75c:	0e 94 28 03 	call	0x650	; 0x650 <readTemperature>
     760:	ec 01       	movw	r28, r24
	uint16_t SRAMTempMin;
	uint16_t SRAMTempMax;

	SRAMTempMin = eeprom_read_word(&TempMin);
     762:	89 e0       	ldi	r24, 0x09	; 9
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <eeprom_read_word>
     76a:	8c 01       	movw	r16, r24
	SRAMTempMax = eeprom_read_word(&TempMax);
     76c:	8b e0       	ldi	r24, 0x0B	; 11
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <eeprom_read_word>
	
	//Check for climate change
	if (temp > SRAMTempMax) {
     774:	9e 01       	movw	r18, r28
     776:	33 27       	eor	r19, r19
     778:	82 17       	cp	r24, r18
     77a:	93 07       	cpc	r25, r19
     77c:	18 f4       	brcc	.+6      	; 0x784 <run+0x34>
		panelUp();
     77e:	0e 94 26 02 	call	0x44c	; 0x44c <panelUp>
     782:	05 c0       	rjmp	.+10     	; 0x78e <run+0x3e>
	} else if (temp < SRAMTempMin) {
     784:	20 17       	cp	r18, r16
     786:	31 07       	cpc	r19, r17
     788:	10 f4       	brcc	.+4      	; 0x78e <run+0x3e>
		panelDown();
     78a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <panelDown>
	
	//Light?!
	uint16_t SRAMLightMin;
	uint16_t SRAMLightMax;
	
	SRAMLightMax = eeprom_read_word(&LightThresholdMax);
     78e:	85 e0       	ldi	r24, 0x05	; 5
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <eeprom_read_word>
     796:	8c 01       	movw	r16, r24
	SRAMLightMin = eeprom_read_word(&LightThresholdMin);
     798:	87 e0       	ldi	r24, 0x07	; 7
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <eeprom_read_word>
     7a0:	7c 01       	movw	r14, r24
	
	uint16_t isManual;
	isManual = eeprom_read_word(&Mode);
     7a2:	82 e0       	ldi	r24, 0x02	; 2
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <eeprom_read_word>
     7aa:	ec 01       	movw	r28, r24
	
	int light = readLight();
     7ac:	0e 94 ff 02 	call	0x5fe	; 0x5fe <readLight>
	
	if (isManual != 1) {
     7b0:	21 97       	sbiw	r28, 0x01	; 1
     7b2:	59 f0       	breq	.+22     	; 0x7ca <run+0x7a>
		if (light > SRAMLightMax) {
     7b4:	08 17       	cp	r16, r24
     7b6:	19 07       	cpc	r17, r25
     7b8:	18 f4       	brcc	.+6      	; 0x7c0 <run+0x70>
			panelDown();
     7ba:	0e 94 61 02 	call	0x4c2	; 0x4c2 <panelDown>
     7be:	05 c0       	rjmp	.+10     	; 0x7ca <run+0x7a>
		} else if(light < SRAMLightMin) {
     7c0:	8e 15       	cp	r24, r14
     7c2:	9f 05       	cpc	r25, r15
     7c4:	10 f4       	brcc	.+4      	; 0x7ca <run+0x7a>
			panelUp();
     7c6:	0e 94 26 02 	call	0x44c	; 0x44c <panelUp>
		}	
	}
}
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	1f 91       	pop	r17
     7d0:	0f 91       	pop	r16
     7d2:	ff 90       	pop	r15
     7d4:	ef 90       	pop	r14
     7d6:	08 95       	ret

000007d8 <deleteEnd>:

/************************************************************************/
/* Deletes the end of a string after the delimiter
/************************************************************************/
void deleteEnd (char* str) {
     7d8:	dc 01       	movw	r26, r24
	char *del = &str[strlen(str)];
     7da:	fc 01       	movw	r30, r24
     7dc:	01 90       	ld	r0, Z+
     7de:	00 20       	and	r0, r0
     7e0:	e9 f7       	brne	.-6      	; 0x7dc <deleteEnd+0x4>
     7e2:	31 97       	sbiw	r30, 0x01	; 1

	while (del > str && *del != '/') {
     7e4:	8e 17       	cp	r24, r30
     7e6:	9f 07       	cpc	r25, r31
     7e8:	80 f4       	brcc	.+32     	; 0x80a <deleteEnd+0x32>
     7ea:	80 81       	ld	r24, Z
     7ec:	8f 32       	cpi	r24, 0x2F	; 47
     7ee:	69 f0       	breq	.+26     	; 0x80a <deleteEnd+0x32>
		del--;
		
		if (*del== ':') {
     7f0:	92 91       	ld	r25, -Z
     7f2:	9a 33       	cpi	r25, 0x3A	; 58
     7f4:	29 f4       	brne	.+10     	; 0x800 <deleteEnd+0x28>
			*del= '\0';
     7f6:	10 82       	st	Z, r1
/* Deletes the end of a string after the delimiter
/************************************************************************/
void deleteEnd (char* str) {
	char *del = &str[strlen(str)];

	while (del > str && *del != '/') {
     7f8:	ae 17       	cp	r26, r30
     7fa:	bf 07       	cpc	r27, r31
     7fc:	c8 f3       	brcs	.-14     	; 0x7f0 <deleteEnd+0x18>
     7fe:	08 95       	ret
     800:	ae 17       	cp	r26, r30
     802:	bf 07       	cpc	r27, r31
     804:	10 f4       	brcc	.+4      	; 0x80a <deleteEnd+0x32>
     806:	9f 32       	cpi	r25, 0x2F	; 47
     808:	99 f7       	brne	.-26     	; 0x7f0 <deleteEnd+0x18>
     80a:	08 95       	ret

0000080c <listen>:

/************************************************************************/
/* Listen function. Listens to serial connection for commands
/************************************************************************/
void listen()
{
     80c:	8f 92       	push	r8
     80e:	9f 92       	push	r9
     810:	af 92       	push	r10
     812:	bf 92       	push	r11
     814:	ef 92       	push	r14
     816:	ff 92       	push	r15
     818:	0f 93       	push	r16
     81a:	1f 93       	push	r17
     81c:	cf 93       	push	r28
     81e:	df 93       	push	r29
     820:	cd b7       	in	r28, 0x3d	; 61
     822:	de b7       	in	r29, 0x3e	; 62
     824:	a8 97       	sbiw	r28, 0x28	; 40
     826:	0f b6       	in	r0, 0x3f	; 63
     828:	f8 94       	cli
     82a:	de bf       	out	0x3e, r29	; 62
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	cd bf       	out	0x3d, r28	; 61
	char input[40];
	char *withoutSpace;
	
	if (UCSR0A & (1 << RXC0)) {
     830:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     834:	88 23       	and	r24, r24
     836:	0c f0       	brlt	.+2      	; 0x83a <listen+0x2e>
     838:	f9 c0       	rjmp	.+498    	; 0xa2c <__stack+0x12d>
		ser_readln(input, sizeof(input), 0);
     83a:	40 e0       	ldi	r20, 0x00	; 0
     83c:	68 e2       	ldi	r22, 0x28	; 40
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	ce 01       	movw	r24, r28
     842:	01 96       	adiw	r24, 0x01	; 1
     844:	0e 94 71 03 	call	0x6e2	; 0x6e2 <ser_readln>
		
		const char delimiter = ':';
		char *value;
		
		if (input[0] == '\n') {
     848:	89 81       	ldd	r24, Y+1	; 0x01
     84a:	8a 30       	cpi	r24, 0x0A	; 10
     84c:	21 f0       	breq	.+8      	; 0x856 <listen+0x4a>
			withoutSpace = input + 1;	
		} else {
			withoutSpace = input;	
     84e:	8e 01       	movw	r16, r28
     850:	0f 5f       	subi	r16, 0xFF	; 255
     852:	1f 4f       	sbci	r17, 0xFF	; 255
     854:	03 c0       	rjmp	.+6      	; 0x85c <listen+0x50>
		
		const char delimiter = ':';
		char *value;
		
		if (input[0] == '\n') {
			withoutSpace = input + 1;	
     856:	8e 01       	movw	r16, r28
     858:	0e 5f       	subi	r16, 0xFE	; 254
     85a:	1f 4f       	sbci	r17, 0xFF	; 255
		} else {
			withoutSpace = input;	
		}
		
		value = strchr(input, delimiter);
     85c:	6a e3       	ldi	r22, 0x3A	; 58
     85e:	70 e0       	ldi	r23, 0x00	; 0
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	0e 94 6e 06 	call	0xcdc	; 0xcdc <strchr>
		value++; //remove spacer from string
     868:	01 96       	adiw	r24, 0x01	; 1
     86a:	7c 01       	movw	r14, r24
		deleteEnd(input);
     86c:	ce 01       	movw	r24, r28
     86e:	01 96       	adiw	r24, 0x01	; 1
     870:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <deleteEnd>
		
		int newValue;
		newValue = strtol(value, NULL, 10);
     874:	4a e0       	ldi	r20, 0x0A	; 10
     876:	50 e0       	ldi	r21, 0x00	; 0
     878:	60 e0       	ldi	r22, 0x00	; 0
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	c7 01       	movw	r24, r14
     87e:	0e 94 4f 05 	call	0xa9e	; 0xa9e <strtol>
     882:	4b 01       	movw	r8, r22
     884:	5c 01       	movw	r10, r24
		
		if(strcmp(input, 			"get_temperature") == 0) {
     886:	67 e5       	ldi	r22, 0x57	; 87
     888:	71 e0       	ldi	r23, 0x01	; 1
     88a:	ce 01       	movw	r24, r28
     88c:	01 96       	adiw	r24, 0x01	; 1
     88e:	0e 94 79 06 	call	0xcf2	; 0xcf2 <strcmp>
     892:	89 2b       	or	r24, r25
     894:	19 f4       	brne	.+6      	; 0x89c <listen+0x90>
			getTemperature();
     896:	0e 94 32 03 	call	0x664	; 0x664 <getTemperature>
     89a:	c3 c0       	rjmp	.+390    	; 0xa22 <__stack+0x123>
		} else if (strcmp(withoutSpace, 	"get_light") == 0) {
     89c:	67 e6       	ldi	r22, 0x67	; 103
     89e:	71 e0       	ldi	r23, 0x01	; 1
     8a0:	c8 01       	movw	r24, r16
     8a2:	0e 94 79 06 	call	0xcf2	; 0xcf2 <strcmp>
     8a6:	89 2b       	or	r24, r25
     8a8:	19 f4       	brne	.+6      	; 0x8b0 <listen+0xa4>
			getLight();
     8aa:	0e 94 08 03 	call	0x610	; 0x610 <getLight>
     8ae:	b9 c0       	rjmp	.+370    	; 0xa22 <__stack+0x123>
		} else if (strcmp(withoutSpace, 	"get_distance") == 0) {
     8b0:	61 e7       	ldi	r22, 0x71	; 113
     8b2:	71 e0       	ldi	r23, 0x01	; 1
     8b4:	c8 01       	movw	r24, r16
     8b6:	0e 94 79 06 	call	0xcf2	; 0xcf2 <strcmp>
     8ba:	89 2b       	or	r24, r25
     8bc:	19 f4       	brne	.+6      	; 0x8c4 <listen+0xb8>
			getDistance();
     8be:	0e 94 17 03 	call	0x62e	; 0x62e <getDistance>
     8c2:	af c0       	rjmp	.+350    	; 0xa22 <__stack+0x123>
		} else if (strcmp(withoutSpace, 	"panel_out") == 0) {
     8c4:	6e e7       	ldi	r22, 0x7E	; 126
     8c6:	71 e0       	ldi	r23, 0x01	; 1
     8c8:	c8 01       	movw	r24, r16
     8ca:	0e 94 79 06 	call	0xcf2	; 0xcf2 <strcmp>
     8ce:	89 2b       	or	r24, r25
     8d0:	39 f4       	brne	.+14     	; 0x8e0 <listen+0xd4>
			printf("2:\r\n");
     8d2:	88 e2       	ldi	r24, 0x28	; 40
     8d4:	91 e0       	ldi	r25, 0x01	; 1
     8d6:	0e 94 a7 06 	call	0xd4e	; 0xd4e <puts>
			panelDown();
     8da:	0e 94 61 02 	call	0x4c2	; 0x4c2 <panelDown>
     8de:	a1 c0       	rjmp	.+322    	; 0xa22 <__stack+0x123>
		} else if (strcmp(withoutSpace, 	"panel_in") == 0) {
     8e0:	68 e8       	ldi	r22, 0x88	; 136
     8e2:	71 e0       	ldi	r23, 0x01	; 1
     8e4:	c8 01       	movw	r24, r16
     8e6:	0e 94 79 06 	call	0xcf2	; 0xcf2 <strcmp>
     8ea:	89 2b       	or	r24, r25
     8ec:	39 f4       	brne	.+14     	; 0x8fc <listen+0xf0>
			printf("2:\r\n");
     8ee:	88 e2       	ldi	r24, 0x28	; 40
     8f0:	91 e0       	ldi	r25, 0x01	; 1
     8f2:	0e 94 a7 06 	call	0xd4e	; 0xd4e <puts>
			panelUp();
     8f6:	0e 94 26 02 	call	0x44c	; 0x44c <panelUp>
     8fa:	93 c0       	rjmp	.+294    	; 0xa22 <__stack+0x123>
		} else if (strcmp(withoutSpace, 	"set_light_threshold_minimum") == 0) {
     8fc:	61 e9       	ldi	r22, 0x91	; 145
     8fe:	71 e0       	ldi	r23, 0x01	; 1
     900:	c8 01       	movw	r24, r16
     902:	0e 94 79 06 	call	0xcf2	; 0xcf2 <strcmp>
     906:	89 2b       	or	r24, r25
     908:	41 f4       	brne	.+16     	; 0x91a <__stack+0x1b>
			setLightMin(newValue);
     90a:	c4 01       	movw	r24, r8
     90c:	0e 94 4c 01 	call	0x298	; 0x298 <setLightMin>
			printf("2:\r\n");
     910:	88 e2       	ldi	r24, 0x28	; 40
     912:	91 e0       	ldi	r25, 0x01	; 1
     914:	0e 94 a7 06 	call	0xd4e	; 0xd4e <puts>
     918:	84 c0       	rjmp	.+264    	; 0xa22 <__stack+0x123>
		} else if (strcmp(withoutSpace, 	"set_light_threshold_maximum") == 0) {
     91a:	6d ea       	ldi	r22, 0xAD	; 173
     91c:	71 e0       	ldi	r23, 0x01	; 1
     91e:	c8 01       	movw	r24, r16
     920:	0e 94 79 06 	call	0xcf2	; 0xcf2 <strcmp>
     924:	89 2b       	or	r24, r25
     926:	41 f4       	brne	.+16     	; 0x938 <__stack+0x39>
			setLightMax(newValue);
     928:	c4 01       	movw	r24, r8
     92a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <setLightMax>
			printf("2:\r\n");
     92e:	88 e2       	ldi	r24, 0x28	; 40
     930:	91 e0       	ldi	r25, 0x01	; 1
     932:	0e 94 a7 06 	call	0xd4e	; 0xd4e <puts>
     936:	75 c0       	rjmp	.+234    	; 0xa22 <__stack+0x123>
		} else if (strcmp(withoutSpace, 	"set_temperature_threshold_minimum") == 0) {
     938:	69 ec       	ldi	r22, 0xC9	; 201
     93a:	71 e0       	ldi	r23, 0x01	; 1
     93c:	c8 01       	movw	r24, r16
     93e:	0e 94 79 06 	call	0xcf2	; 0xcf2 <strcmp>
     942:	89 2b       	or	r24, r25
     944:	41 f4       	brne	.+16     	; 0x956 <__stack+0x57>
			setTempMin(newValue);
     946:	c4 01       	movw	r24, r8
     948:	0e 94 40 01 	call	0x280	; 0x280 <setTempMin>
			printf("2:\r\n");
     94c:	88 e2       	ldi	r24, 0x28	; 40
     94e:	91 e0       	ldi	r25, 0x01	; 1
     950:	0e 94 a7 06 	call	0xd4e	; 0xd4e <puts>
     954:	66 c0       	rjmp	.+204    	; 0xa22 <__stack+0x123>
		} else if (strcmp(withoutSpace, 	"set_temperature_threshold_maximum") == 0) {
     956:	6b ee       	ldi	r22, 0xEB	; 235
     958:	71 e0       	ldi	r23, 0x01	; 1
     95a:	c8 01       	movw	r24, r16
     95c:	0e 94 79 06 	call	0xcf2	; 0xcf2 <strcmp>
     960:	89 2b       	or	r24, r25
     962:	41 f4       	brne	.+16     	; 0x974 <__stack+0x75>
			setTempMax(newValue);
     964:	c4 01       	movw	r24, r8
     966:	0e 94 46 01 	call	0x28c	; 0x28c <setTempMax>
			printf("2:\r\n");
     96a:	88 e2       	ldi	r24, 0x28	; 40
     96c:	91 e0       	ldi	r25, 0x01	; 1
     96e:	0e 94 a7 06 	call	0xd4e	; 0xd4e <puts>
     972:	57 c0       	rjmp	.+174    	; 0xa22 <__stack+0x123>
		} else if (strcmp(withoutSpace, 	"set_max_distance") == 0) {
     974:	6d e0       	ldi	r22, 0x0D	; 13
     976:	72 e0       	ldi	r23, 0x02	; 2
     978:	c8 01       	movw	r24, r16
     97a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <strcmp>
     97e:	89 2b       	or	r24, r25
     980:	41 f4       	brne	.+16     	; 0x992 <__stack+0x93>
			setDistanceMax(newValue);
     982:	c4 01       	movw	r24, r8
     984:	0e 94 75 01 	call	0x2ea	; 0x2ea <setDistanceMax>
			printf("2:\r\n");
     988:	88 e2       	ldi	r24, 0x28	; 40
     98a:	91 e0       	ldi	r25, 0x01	; 1
     98c:	0e 94 a7 06 	call	0xd4e	; 0xd4e <puts>
     990:	48 c0       	rjmp	.+144    	; 0xa22 <__stack+0x123>
		} else if (strcmp(input, 	"handshake") == 0) {
     992:	6e e1       	ldi	r22, 0x1E	; 30
     994:	72 e0       	ldi	r23, 0x02	; 2
     996:	ce 01       	movw	r24, r28
     998:	01 96       	adiw	r24, 0x01	; 1
     99a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <strcmp>
     99e:	89 2b       	or	r24, r25
     9a0:	19 f4       	brne	.+6      	; 0x9a8 <__stack+0xa9>
			get_config();
     9a2:	0e 94 ae 01 	call	0x35c	; 0x35c <get_config>
     9a6:	3d c0       	rjmp	.+122    	; 0xa22 <__stack+0x123>
		} else if (strcmp(withoutSpace, 	"set_mode_automatic") == 0) {
     9a8:	68 e2       	ldi	r22, 0x28	; 40
     9aa:	72 e0       	ldi	r23, 0x02	; 2
     9ac:	c8 01       	movw	r24, r16
     9ae:	0e 94 79 06 	call	0xcf2	; 0xcf2 <strcmp>
     9b2:	89 2b       	or	r24, r25
     9b4:	49 f4       	brne	.+18     	; 0x9c8 <__stack+0xc9>
			setMode(0);
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	0e 94 3a 01 	call	0x274	; 0x274 <setMode>
			printf("2:\r\n");
     9be:	88 e2       	ldi	r24, 0x28	; 40
     9c0:	91 e0       	ldi	r25, 0x01	; 1
     9c2:	0e 94 a7 06 	call	0xd4e	; 0xd4e <puts>
     9c6:	2d c0       	rjmp	.+90     	; 0xa22 <__stack+0x123>
		} else if (strcmp(withoutSpace, 	"set_mode_manual") == 0) {
     9c8:	6b e3       	ldi	r22, 0x3B	; 59
     9ca:	72 e0       	ldi	r23, 0x02	; 2
     9cc:	c8 01       	movw	r24, r16
     9ce:	0e 94 79 06 	call	0xcf2	; 0xcf2 <strcmp>
     9d2:	89 2b       	or	r24, r25
     9d4:	49 f4       	brne	.+18     	; 0x9e8 <__stack+0xe9>
			setMode(1);
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	0e 94 3a 01 	call	0x274	; 0x274 <setMode>
			printf("2:\r\n");
     9de:	88 e2       	ldi	r24, 0x28	; 40
     9e0:	91 e0       	ldi	r25, 0x01	; 1
     9e2:	0e 94 a7 06 	call	0xd4e	; 0xd4e <puts>
     9e6:	1d c0       	rjmp	.+58     	; 0xa22 <__stack+0x123>
		} else if (strcmp(withoutSpace, "set_device_name") == 0) {
     9e8:	6b e4       	ldi	r22, 0x4B	; 75
     9ea:	72 e0       	ldi	r23, 0x02	; 2
     9ec:	c8 01       	movw	r24, r16
     9ee:	0e 94 79 06 	call	0xcf2	; 0xcf2 <strcmp>
     9f2:	89 2b       	or	r24, r25
     9f4:	41 f4       	brne	.+16     	; 0xa06 <__stack+0x107>
			setDeviceName(value);
     9f6:	c7 01       	movw	r24, r14
     9f8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <setDeviceName>
			printf("2:\r\n");
     9fc:	88 e2       	ldi	r24, 0x28	; 40
     9fe:	91 e0       	ldi	r25, 0x01	; 1
     a00:	0e 94 a7 06 	call	0xd4e	; 0xd4e <puts>
     a04:	0e c0       	rjmp	.+28     	; 0xa22 <__stack+0x123>
		} else {
			printf("4:unknown_command\r\n", input);
     a06:	ce 01       	movw	r24, r28
     a08:	01 96       	adiw	r24, 0x01	; 1
     a0a:	9f 93       	push	r25
     a0c:	8f 93       	push	r24
     a0e:	8b e5       	ldi	r24, 0x5B	; 91
     a10:	92 e0       	ldi	r25, 0x02	; 2
     a12:	9f 93       	push	r25
     a14:	8f 93       	push	r24
     a16:	0e 94 91 06 	call	0xd22	; 0xd22 <printf>
     a1a:	0f 90       	pop	r0
     a1c:	0f 90       	pop	r0
     a1e:	0f 90       	pop	r0
     a20:	0f 90       	pop	r0
		}
		
		UCSR0A &=~ (1 << RXC0);
     a22:	e0 ec       	ldi	r30, 0xC0	; 192
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	80 81       	ld	r24, Z
     a28:	8f 77       	andi	r24, 0x7F	; 127
     a2a:	80 83       	st	Z, r24
	}
}
     a2c:	a8 96       	adiw	r28, 0x28	; 40
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	f8 94       	cli
     a32:	de bf       	out	0x3e, r29	; 62
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	cd bf       	out	0x3d, r28	; 61
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	ff 90       	pop	r15
     a42:	ef 90       	pop	r14
     a44:	bf 90       	pop	r11
     a46:	af 90       	pop	r10
     a48:	9f 90       	pop	r9
     a4a:	8f 90       	pop	r8
     a4c:	08 95       	ret

00000a4e <main>:

/************************************************************************/
/* Main function. Inits all the components of the application and runs the application
/************************************************************************/
int main() {
	ser_init();
     a4e:	0e 94 41 03 	call	0x682	; 0x682 <ser_init>
	adc_init();
     a52:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <adc_init>
	//init_timer();
	initPanel();
     a56:	0e 94 a3 02 	call	0x546	; 0x546 <initPanel>
	initEEPROM();
     a5a:	0e 94 df 00 	call	0x1be	; 0x1be <initEEPROM>
	//SCH_Init_T1();
	//SCH_Add_Task(listen, 10, 20);
	
	//SCH_Start();
	
	Initialize_timer0();
     a5e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <Initialize_timer0>
	Initialize_external_interrupt();
     a62:	0e 94 bf 00 	call	0x17e	; 0x17e <Initialize_external_interrupt>
	Initialize_Ports();
     a66:	0e 94 c7 00 	call	0x18e	; 0x18e <Initialize_Ports>
	//panelUp();
	
	while (1) {
		//Send_signal();
		//SCH_Dispatch_Tasks();
		listen();
     a6a:	0e 94 06 04 	call	0x80c	; 0x80c <listen>
		run();
     a6e:	0e 94 a8 03 	call	0x750	; 0x750 <run>
     a72:	8f e9       	ldi	r24, 0x9F	; 159
     a74:	9f e0       	ldi	r25, 0x0F	; 15
     a76:	01 97       	sbiw	r24, 0x01	; 1
     a78:	f1 f7       	brne	.-4      	; 0xa76 <main+0x28>
     a7a:	00 c0       	rjmp	.+0      	; 0xa7c <main+0x2e>
     a7c:	00 00       	nop
     a7e:	f5 cf       	rjmp	.-22     	; 0xa6a <main+0x1c>

00000a80 <__umulhisi3>:
     a80:	a2 9f       	mul	r26, r18
     a82:	b0 01       	movw	r22, r0
     a84:	b3 9f       	mul	r27, r19
     a86:	c0 01       	movw	r24, r0
     a88:	a3 9f       	mul	r26, r19
     a8a:	70 0d       	add	r23, r0
     a8c:	81 1d       	adc	r24, r1
     a8e:	11 24       	eor	r1, r1
     a90:	91 1d       	adc	r25, r1
     a92:	b2 9f       	mul	r27, r18
     a94:	70 0d       	add	r23, r0
     a96:	81 1d       	adc	r24, r1
     a98:	11 24       	eor	r1, r1
     a9a:	91 1d       	adc	r25, r1
     a9c:	08 95       	ret

00000a9e <strtol>:
     a9e:	a0 e0       	ldi	r26, 0x00	; 0
     aa0:	b0 e0       	ldi	r27, 0x00	; 0
     aa2:	e5 e5       	ldi	r30, 0x55	; 85
     aa4:	f5 e0       	ldi	r31, 0x05	; 5
     aa6:	0c 94 dc 09 	jmp	0x13b8	; 0x13b8 <__prologue_saves__+0x2>
     aaa:	5c 01       	movw	r10, r24
     aac:	6b 01       	movw	r12, r22
     aae:	7a 01       	movw	r14, r20
     ab0:	61 15       	cp	r22, r1
     ab2:	71 05       	cpc	r23, r1
     ab4:	19 f0       	breq	.+6      	; 0xabc <strtol+0x1e>
     ab6:	fb 01       	movw	r30, r22
     ab8:	91 83       	std	Z+1, r25	; 0x01
     aba:	80 83       	st	Z, r24
     abc:	e1 14       	cp	r14, r1
     abe:	f1 04       	cpc	r15, r1
     ac0:	29 f0       	breq	.+10     	; 0xacc <strtol+0x2e>
     ac2:	c7 01       	movw	r24, r14
     ac4:	02 97       	sbiw	r24, 0x02	; 2
     ac6:	83 97       	sbiw	r24, 0x23	; 35
     ac8:	08 f0       	brcs	.+2      	; 0xacc <strtol+0x2e>
     aca:	e5 c0       	rjmp	.+458    	; 0xc96 <strtol+0x1f8>
     acc:	e5 01       	movw	r28, r10
     ace:	21 96       	adiw	r28, 0x01	; 1
     ad0:	f5 01       	movw	r30, r10
     ad2:	10 81       	ld	r17, Z
     ad4:	81 2f       	mov	r24, r17
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	0e 94 65 06 	call	0xcca	; 0xcca <isspace>
     adc:	89 2b       	or	r24, r25
     ade:	11 f0       	breq	.+4      	; 0xae4 <strtol+0x46>
     ae0:	5e 01       	movw	r10, r28
     ae2:	f4 cf       	rjmp	.-24     	; 0xacc <strtol+0x2e>
     ae4:	1d 32       	cpi	r17, 0x2D	; 45
     ae6:	29 f4       	brne	.+10     	; 0xaf2 <strtol+0x54>
     ae8:	21 96       	adiw	r28, 0x01	; 1
     aea:	f5 01       	movw	r30, r10
     aec:	11 81       	ldd	r17, Z+1	; 0x01
     aee:	01 e0       	ldi	r16, 0x01	; 1
     af0:	07 c0       	rjmp	.+14     	; 0xb00 <strtol+0x62>
     af2:	1b 32       	cpi	r17, 0x2B	; 43
     af4:	21 f4       	brne	.+8      	; 0xafe <strtol+0x60>
     af6:	e5 01       	movw	r28, r10
     af8:	22 96       	adiw	r28, 0x02	; 2
     afa:	f5 01       	movw	r30, r10
     afc:	11 81       	ldd	r17, Z+1	; 0x01
     afe:	00 e0       	ldi	r16, 0x00	; 0
     b00:	e1 14       	cp	r14, r1
     b02:	f1 04       	cpc	r15, r1
     b04:	09 f1       	breq	.+66     	; 0xb48 <strtol+0xaa>
     b06:	f0 e1       	ldi	r31, 0x10	; 16
     b08:	ef 16       	cp	r14, r31
     b0a:	f1 04       	cpc	r15, r1
     b0c:	29 f4       	brne	.+10     	; 0xb18 <strtol+0x7a>
     b0e:	3f c0       	rjmp	.+126    	; 0xb8e <strtol+0xf0>
     b10:	10 e3       	ldi	r17, 0x30	; 48
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	21 f1       	breq	.+72     	; 0xb60 <strtol+0xc2>
     b18:	28 e0       	ldi	r18, 0x08	; 8
     b1a:	e2 16       	cp	r14, r18
     b1c:	f1 04       	cpc	r15, r1
     b1e:	01 f1       	breq	.+64     	; 0xb60 <strtol+0xc2>
     b20:	54 f4       	brge	.+20     	; 0xb36 <strtol+0x98>
     b22:	e2 e0       	ldi	r30, 0x02	; 2
     b24:	ee 16       	cp	r14, r30
     b26:	f1 04       	cpc	r15, r1
     b28:	21 f5       	brne	.+72     	; 0xb72 <strtol+0xd4>
     b2a:	81 2c       	mov	r8, r1
     b2c:	91 2c       	mov	r9, r1
     b2e:	a1 2c       	mov	r10, r1
     b30:	b0 e4       	ldi	r27, 0x40	; 64
     b32:	bb 2e       	mov	r11, r27
     b34:	3e c0       	rjmp	.+124    	; 0xbb2 <strtol+0x114>
     b36:	fa e0       	ldi	r31, 0x0A	; 10
     b38:	ef 16       	cp	r14, r31
     b3a:	f1 04       	cpc	r15, r1
     b3c:	39 f0       	breq	.+14     	; 0xb4c <strtol+0xae>
     b3e:	20 e1       	ldi	r18, 0x10	; 16
     b40:	e2 16       	cp	r14, r18
     b42:	f1 04       	cpc	r15, r1
     b44:	b1 f4       	brne	.+44     	; 0xb72 <strtol+0xd4>
     b46:	30 c0       	rjmp	.+96     	; 0xba8 <strtol+0x10a>
     b48:	10 33       	cpi	r17, 0x30	; 48
     b4a:	19 f1       	breq	.+70     	; 0xb92 <strtol+0xf4>
     b4c:	fa e0       	ldi	r31, 0x0A	; 10
     b4e:	ef 2e       	mov	r14, r31
     b50:	f1 2c       	mov	r15, r1
     b52:	ac ec       	ldi	r26, 0xCC	; 204
     b54:	8a 2e       	mov	r8, r26
     b56:	98 2c       	mov	r9, r8
     b58:	a8 2c       	mov	r10, r8
     b5a:	ac e0       	ldi	r26, 0x0C	; 12
     b5c:	ba 2e       	mov	r11, r26
     b5e:	29 c0       	rjmp	.+82     	; 0xbb2 <strtol+0x114>
     b60:	78 e0       	ldi	r23, 0x08	; 8
     b62:	e7 2e       	mov	r14, r23
     b64:	f1 2c       	mov	r15, r1
     b66:	81 2c       	mov	r8, r1
     b68:	91 2c       	mov	r9, r1
     b6a:	a1 2c       	mov	r10, r1
     b6c:	e0 e1       	ldi	r30, 0x10	; 16
     b6e:	be 2e       	mov	r11, r30
     b70:	20 c0       	rjmp	.+64     	; 0xbb2 <strtol+0x114>
     b72:	60 e0       	ldi	r22, 0x00	; 0
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	90 e8       	ldi	r25, 0x80	; 128
     b7a:	97 01       	movw	r18, r14
     b7c:	0f 2c       	mov	r0, r15
     b7e:	00 0c       	add	r0, r0
     b80:	44 0b       	sbc	r20, r20
     b82:	55 0b       	sbc	r21, r21
     b84:	0e 94 ae 09 	call	0x135c	; 0x135c <__udivmodsi4>
     b88:	49 01       	movw	r8, r18
     b8a:	5a 01       	movw	r10, r20
     b8c:	12 c0       	rjmp	.+36     	; 0xbb2 <strtol+0x114>
     b8e:	10 33       	cpi	r17, 0x30	; 48
     b90:	59 f4       	brne	.+22     	; 0xba8 <strtol+0x10a>
     b92:	88 81       	ld	r24, Y
     b94:	8f 7d       	andi	r24, 0xDF	; 223
     b96:	88 35       	cpi	r24, 0x58	; 88
     b98:	09 f0       	breq	.+2      	; 0xb9c <strtol+0xfe>
     b9a:	ba cf       	rjmp	.-140    	; 0xb10 <strtol+0x72>
     b9c:	19 81       	ldd	r17, Y+1	; 0x01
     b9e:	22 96       	adiw	r28, 0x02	; 2
     ba0:	02 60       	ori	r16, 0x02	; 2
     ba2:	80 e1       	ldi	r24, 0x10	; 16
     ba4:	e8 2e       	mov	r14, r24
     ba6:	f1 2c       	mov	r15, r1
     ba8:	81 2c       	mov	r8, r1
     baa:	91 2c       	mov	r9, r1
     bac:	a1 2c       	mov	r10, r1
     bae:	68 e0       	ldi	r22, 0x08	; 8
     bb0:	b6 2e       	mov	r11, r22
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	60 e0       	ldi	r22, 0x00	; 0
     bb6:	70 e0       	ldi	r23, 0x00	; 0
     bb8:	cb 01       	movw	r24, r22
     bba:	27 01       	movw	r4, r14
     bbc:	0f 2c       	mov	r0, r15
     bbe:	00 0c       	add	r0, r0
     bc0:	66 08       	sbc	r6, r6
     bc2:	77 08       	sbc	r7, r7
     bc4:	fe 01       	movw	r30, r28
     bc6:	50 ed       	ldi	r21, 0xD0	; 208
     bc8:	35 2e       	mov	r3, r21
     bca:	31 0e       	add	r3, r17
     bcc:	29 e0       	ldi	r18, 0x09	; 9
     bce:	23 15       	cp	r18, r3
     bd0:	70 f4       	brcc	.+28     	; 0xbee <strtol+0x150>
     bd2:	2f eb       	ldi	r18, 0xBF	; 191
     bd4:	21 0f       	add	r18, r17
     bd6:	2a 31       	cpi	r18, 0x1A	; 26
     bd8:	18 f4       	brcc	.+6      	; 0xbe0 <strtol+0x142>
     bda:	39 ec       	ldi	r19, 0xC9	; 201
     bdc:	33 2e       	mov	r3, r19
     bde:	06 c0       	rjmp	.+12     	; 0xbec <strtol+0x14e>
     be0:	2f e9       	ldi	r18, 0x9F	; 159
     be2:	21 0f       	add	r18, r17
     be4:	2a 31       	cpi	r18, 0x1A	; 26
     be6:	18 f5       	brcc	.+70     	; 0xc2e <strtol+0x190>
     be8:	29 ea       	ldi	r18, 0xA9	; 169
     bea:	32 2e       	mov	r3, r18
     bec:	31 0e       	add	r3, r17
     bee:	23 2d       	mov	r18, r3
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	2e 15       	cp	r18, r14
     bf4:	3f 05       	cpc	r19, r15
     bf6:	dc f4       	brge	.+54     	; 0xc2e <strtol+0x190>
     bf8:	47 fd       	sbrc	r20, 7
     bfa:	16 c0       	rjmp	.+44     	; 0xc28 <strtol+0x18a>
     bfc:	86 16       	cp	r8, r22
     bfe:	97 06       	cpc	r9, r23
     c00:	a8 06       	cpc	r10, r24
     c02:	b9 06       	cpc	r11, r25
     c04:	70 f0       	brcs	.+28     	; 0xc22 <strtol+0x184>
     c06:	a3 01       	movw	r20, r6
     c08:	92 01       	movw	r18, r4
     c0a:	0e 94 9e 09 	call	0x133c	; 0x133c <__mulsi3>
     c0e:	63 0d       	add	r22, r3
     c10:	71 1d       	adc	r23, r1
     c12:	81 1d       	adc	r24, r1
     c14:	91 1d       	adc	r25, r1
     c16:	61 30       	cpi	r22, 0x01	; 1
     c18:	71 05       	cpc	r23, r1
     c1a:	81 05       	cpc	r24, r1
     c1c:	20 e8       	ldi	r18, 0x80	; 128
     c1e:	92 07       	cpc	r25, r18
     c20:	10 f0       	brcs	.+4      	; 0xc26 <strtol+0x188>
     c22:	4f ef       	ldi	r20, 0xFF	; 255
     c24:	01 c0       	rjmp	.+2      	; 0xc28 <strtol+0x18a>
     c26:	41 e0       	ldi	r20, 0x01	; 1
     c28:	21 96       	adiw	r28, 0x01	; 1
     c2a:	10 81       	ld	r17, Z
     c2c:	cb cf       	rjmp	.-106    	; 0xbc4 <strtol+0x126>
     c2e:	20 2f       	mov	r18, r16
     c30:	21 70       	andi	r18, 0x01	; 1
     c32:	c1 14       	cp	r12, r1
     c34:	d1 04       	cpc	r13, r1
     c36:	71 f0       	breq	.+28     	; 0xc54 <strtol+0x1b6>
     c38:	44 23       	and	r20, r20
     c3a:	29 f0       	breq	.+10     	; 0xc46 <strtol+0x1a8>
     c3c:	21 97       	sbiw	r28, 0x01	; 1
     c3e:	f6 01       	movw	r30, r12
     c40:	d1 83       	std	Z+1, r29	; 0x01
     c42:	c0 83       	st	Z, r28
     c44:	07 c0       	rjmp	.+14     	; 0xc54 <strtol+0x1b6>
     c46:	01 ff       	sbrs	r16, 1
     c48:	19 c0       	rjmp	.+50     	; 0xc7c <strtol+0x1de>
     c4a:	22 97       	sbiw	r28, 0x02	; 2
     c4c:	f6 01       	movw	r30, r12
     c4e:	d1 83       	std	Z+1, r29	; 0x01
     c50:	c0 83       	st	Z, r28
     c52:	14 c0       	rjmp	.+40     	; 0xc7c <strtol+0x1de>
     c54:	47 ff       	sbrs	r20, 7
     c56:	12 c0       	rjmp	.+36     	; 0xc7c <strtol+0x1de>
     c58:	22 23       	and	r18, r18
     c5a:	29 f0       	breq	.+10     	; 0xc66 <strtol+0x1c8>
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e8       	ldi	r25, 0x80	; 128
     c64:	04 c0       	rjmp	.+8      	; 0xc6e <strtol+0x1d0>
     c66:	6f ef       	ldi	r22, 0xFF	; 255
     c68:	7f ef       	ldi	r23, 0xFF	; 255
     c6a:	8f ef       	ldi	r24, 0xFF	; 255
     c6c:	9f e7       	ldi	r25, 0x7F	; 127
     c6e:	22 e2       	ldi	r18, 0x22	; 34
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	30 93 a3 02 	sts	0x02A3, r19	; 0x8002a3 <errno+0x1>
     c76:	20 93 a2 02 	sts	0x02A2, r18	; 0x8002a2 <errno>
     c7a:	09 c0       	rjmp	.+18     	; 0xc8e <strtol+0x1f0>
     c7c:	22 23       	and	r18, r18
     c7e:	81 f0       	breq	.+32     	; 0xca0 <strtol+0x202>
     c80:	90 95       	com	r25
     c82:	80 95       	com	r24
     c84:	70 95       	com	r23
     c86:	61 95       	neg	r22
     c88:	7f 4f       	sbci	r23, 0xFF	; 255
     c8a:	8f 4f       	sbci	r24, 0xFF	; 255
     c8c:	9f 4f       	sbci	r25, 0xFF	; 255
     c8e:	46 2f       	mov	r20, r22
     c90:	37 2f       	mov	r19, r23
     c92:	28 2f       	mov	r18, r24
     c94:	12 c0       	rjmp	.+36     	; 0xcba <strtol+0x21c>
     c96:	40 e0       	ldi	r20, 0x00	; 0
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	20 e0       	ldi	r18, 0x00	; 0
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	0d c0       	rjmp	.+26     	; 0xcba <strtol+0x21c>
     ca0:	97 ff       	sbrs	r25, 7
     ca2:	f5 cf       	rjmp	.-22     	; 0xc8e <strtol+0x1f0>
     ca4:	82 e2       	ldi	r24, 0x22	; 34
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	90 93 a3 02 	sts	0x02A3, r25	; 0x8002a3 <errno+0x1>
     cac:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <errno>
     cb0:	6f ef       	ldi	r22, 0xFF	; 255
     cb2:	7f ef       	ldi	r23, 0xFF	; 255
     cb4:	8f ef       	ldi	r24, 0xFF	; 255
     cb6:	9f e7       	ldi	r25, 0x7F	; 127
     cb8:	ea cf       	rjmp	.-44     	; 0xc8e <strtol+0x1f0>
     cba:	64 2f       	mov	r22, r20
     cbc:	73 2f       	mov	r23, r19
     cbe:	82 2f       	mov	r24, r18
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
     cc4:	e1 e1       	ldi	r30, 0x11	; 17
     cc6:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <__epilogue_restores__+0x2>

00000cca <isspace>:
     cca:	91 11       	cpse	r25, r1
     ccc:	0c 94 b8 08 	jmp	0x1170	; 0x1170 <__ctype_isfalse>
     cd0:	80 32       	cpi	r24, 0x20	; 32
     cd2:	19 f0       	breq	.+6      	; 0xcda <isspace+0x10>
     cd4:	89 50       	subi	r24, 0x09	; 9
     cd6:	85 50       	subi	r24, 0x05	; 5
     cd8:	c8 f7       	brcc	.-14     	; 0xccc <isspace+0x2>
     cda:	08 95       	ret

00000cdc <strchr>:
     cdc:	fc 01       	movw	r30, r24
     cde:	81 91       	ld	r24, Z+
     ce0:	86 17       	cp	r24, r22
     ce2:	21 f0       	breq	.+8      	; 0xcec <strchr+0x10>
     ce4:	88 23       	and	r24, r24
     ce6:	d9 f7       	brne	.-10     	; 0xcde <strchr+0x2>
     ce8:	99 27       	eor	r25, r25
     cea:	08 95       	ret
     cec:	31 97       	sbiw	r30, 0x01	; 1
     cee:	cf 01       	movw	r24, r30
     cf0:	08 95       	ret

00000cf2 <strcmp>:
     cf2:	fb 01       	movw	r30, r22
     cf4:	dc 01       	movw	r26, r24
     cf6:	8d 91       	ld	r24, X+
     cf8:	01 90       	ld	r0, Z+
     cfa:	80 19       	sub	r24, r0
     cfc:	01 10       	cpse	r0, r1
     cfe:	d9 f3       	breq	.-10     	; 0xcf6 <strcmp+0x4>
     d00:	99 0b       	sbc	r25, r25
     d02:	08 95       	ret

00000d04 <strncpy>:
     d04:	fb 01       	movw	r30, r22
     d06:	dc 01       	movw	r26, r24
     d08:	41 50       	subi	r20, 0x01	; 1
     d0a:	50 40       	sbci	r21, 0x00	; 0
     d0c:	48 f0       	brcs	.+18     	; 0xd20 <strncpy+0x1c>
     d0e:	01 90       	ld	r0, Z+
     d10:	0d 92       	st	X+, r0
     d12:	00 20       	and	r0, r0
     d14:	c9 f7       	brne	.-14     	; 0xd08 <strncpy+0x4>
     d16:	01 c0       	rjmp	.+2      	; 0xd1a <strncpy+0x16>
     d18:	1d 92       	st	X+, r1
     d1a:	41 50       	subi	r20, 0x01	; 1
     d1c:	50 40       	sbci	r21, 0x00	; 0
     d1e:	e0 f7       	brcc	.-8      	; 0xd18 <strncpy+0x14>
     d20:	08 95       	ret

00000d22 <printf>:
     d22:	a0 e0       	ldi	r26, 0x00	; 0
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e7 e9       	ldi	r30, 0x97	; 151
     d28:	f6 e0       	ldi	r31, 0x06	; 6
     d2a:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <__prologue_saves__+0x20>
     d2e:	ae 01       	movw	r20, r28
     d30:	4b 5f       	subi	r20, 0xFB	; 251
     d32:	5f 4f       	sbci	r21, 0xFF	; 255
     d34:	fa 01       	movw	r30, r20
     d36:	61 91       	ld	r22, Z+
     d38:	71 91       	ld	r23, Z+
     d3a:	af 01       	movw	r20, r30
     d3c:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <__iob+0x2>
     d40:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <__iob+0x3>
     d44:	0e 94 d7 06 	call	0xdae	; 0xdae <vfprintf>
     d48:	e2 e0       	ldi	r30, 0x02	; 2
     d4a:	0c 94 07 0a 	jmp	0x140e	; 0x140e <__epilogue_restores__+0x20>

00000d4e <puts>:
     d4e:	0f 93       	push	r16
     d50:	1f 93       	push	r17
     d52:	cf 93       	push	r28
     d54:	df 93       	push	r29
     d56:	e0 91 9e 02 	lds	r30, 0x029E	; 0x80029e <__iob+0x2>
     d5a:	f0 91 9f 02 	lds	r31, 0x029F	; 0x80029f <__iob+0x3>
     d5e:	23 81       	ldd	r18, Z+3	; 0x03
     d60:	21 ff       	sbrs	r18, 1
     d62:	1b c0       	rjmp	.+54     	; 0xd9a <puts+0x4c>
     d64:	8c 01       	movw	r16, r24
     d66:	d0 e0       	ldi	r29, 0x00	; 0
     d68:	c0 e0       	ldi	r28, 0x00	; 0
     d6a:	f8 01       	movw	r30, r16
     d6c:	81 91       	ld	r24, Z+
     d6e:	8f 01       	movw	r16, r30
     d70:	60 91 9e 02 	lds	r22, 0x029E	; 0x80029e <__iob+0x2>
     d74:	70 91 9f 02 	lds	r23, 0x029F	; 0x80029f <__iob+0x3>
     d78:	db 01       	movw	r26, r22
     d7a:	18 96       	adiw	r26, 0x08	; 8
     d7c:	ed 91       	ld	r30, X+
     d7e:	fc 91       	ld	r31, X
     d80:	19 97       	sbiw	r26, 0x09	; 9
     d82:	88 23       	and	r24, r24
     d84:	31 f0       	breq	.+12     	; 0xd92 <puts+0x44>
     d86:	09 95       	icall
     d88:	89 2b       	or	r24, r25
     d8a:	79 f3       	breq	.-34     	; 0xd6a <puts+0x1c>
     d8c:	df ef       	ldi	r29, 0xFF	; 255
     d8e:	cf ef       	ldi	r28, 0xFF	; 255
     d90:	ec cf       	rjmp	.-40     	; 0xd6a <puts+0x1c>
     d92:	8a e0       	ldi	r24, 0x0A	; 10
     d94:	09 95       	icall
     d96:	89 2b       	or	r24, r25
     d98:	19 f0       	breq	.+6      	; 0xda0 <puts+0x52>
     d9a:	8f ef       	ldi	r24, 0xFF	; 255
     d9c:	9f ef       	ldi	r25, 0xFF	; 255
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <puts+0x56>
     da0:	8d 2f       	mov	r24, r29
     da2:	9c 2f       	mov	r25, r28
     da4:	df 91       	pop	r29
     da6:	cf 91       	pop	r28
     da8:	1f 91       	pop	r17
     daa:	0f 91       	pop	r16
     dac:	08 95       	ret

00000dae <vfprintf>:
     dae:	ab e0       	ldi	r26, 0x0B	; 11
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	ed ed       	ldi	r30, 0xDD	; 221
     db4:	f6 e0       	ldi	r31, 0x06	; 6
     db6:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <__prologue_saves__>
     dba:	6c 01       	movw	r12, r24
     dbc:	7b 01       	movw	r14, r22
     dbe:	8a 01       	movw	r16, r20
     dc0:	fc 01       	movw	r30, r24
     dc2:	17 82       	std	Z+7, r1	; 0x07
     dc4:	16 82       	std	Z+6, r1	; 0x06
     dc6:	83 81       	ldd	r24, Z+3	; 0x03
     dc8:	81 ff       	sbrs	r24, 1
     dca:	cc c1       	rjmp	.+920    	; 0x1164 <vfprintf+0x3b6>
     dcc:	ce 01       	movw	r24, r28
     dce:	01 96       	adiw	r24, 0x01	; 1
     dd0:	3c 01       	movw	r6, r24
     dd2:	f6 01       	movw	r30, r12
     dd4:	93 81       	ldd	r25, Z+3	; 0x03
     dd6:	f7 01       	movw	r30, r14
     dd8:	93 fd       	sbrc	r25, 3
     dda:	85 91       	lpm	r24, Z+
     ddc:	93 ff       	sbrs	r25, 3
     dde:	81 91       	ld	r24, Z+
     de0:	7f 01       	movw	r14, r30
     de2:	88 23       	and	r24, r24
     de4:	09 f4       	brne	.+2      	; 0xde8 <vfprintf+0x3a>
     de6:	ba c1       	rjmp	.+884    	; 0x115c <vfprintf+0x3ae>
     de8:	85 32       	cpi	r24, 0x25	; 37
     dea:	39 f4       	brne	.+14     	; 0xdfa <vfprintf+0x4c>
     dec:	93 fd       	sbrc	r25, 3
     dee:	85 91       	lpm	r24, Z+
     df0:	93 ff       	sbrs	r25, 3
     df2:	81 91       	ld	r24, Z+
     df4:	7f 01       	movw	r14, r30
     df6:	85 32       	cpi	r24, 0x25	; 37
     df8:	29 f4       	brne	.+10     	; 0xe04 <vfprintf+0x56>
     dfa:	b6 01       	movw	r22, r12
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <fputc>
     e02:	e7 cf       	rjmp	.-50     	; 0xdd2 <vfprintf+0x24>
     e04:	91 2c       	mov	r9, r1
     e06:	21 2c       	mov	r2, r1
     e08:	31 2c       	mov	r3, r1
     e0a:	ff e1       	ldi	r31, 0x1F	; 31
     e0c:	f3 15       	cp	r31, r3
     e0e:	d8 f0       	brcs	.+54     	; 0xe46 <vfprintf+0x98>
     e10:	8b 32       	cpi	r24, 0x2B	; 43
     e12:	79 f0       	breq	.+30     	; 0xe32 <vfprintf+0x84>
     e14:	38 f4       	brcc	.+14     	; 0xe24 <vfprintf+0x76>
     e16:	80 32       	cpi	r24, 0x20	; 32
     e18:	79 f0       	breq	.+30     	; 0xe38 <vfprintf+0x8a>
     e1a:	83 32       	cpi	r24, 0x23	; 35
     e1c:	a1 f4       	brne	.+40     	; 0xe46 <vfprintf+0x98>
     e1e:	23 2d       	mov	r18, r3
     e20:	20 61       	ori	r18, 0x10	; 16
     e22:	1d c0       	rjmp	.+58     	; 0xe5e <vfprintf+0xb0>
     e24:	8d 32       	cpi	r24, 0x2D	; 45
     e26:	61 f0       	breq	.+24     	; 0xe40 <vfprintf+0x92>
     e28:	80 33       	cpi	r24, 0x30	; 48
     e2a:	69 f4       	brne	.+26     	; 0xe46 <vfprintf+0x98>
     e2c:	23 2d       	mov	r18, r3
     e2e:	21 60       	ori	r18, 0x01	; 1
     e30:	16 c0       	rjmp	.+44     	; 0xe5e <vfprintf+0xb0>
     e32:	83 2d       	mov	r24, r3
     e34:	82 60       	ori	r24, 0x02	; 2
     e36:	38 2e       	mov	r3, r24
     e38:	e3 2d       	mov	r30, r3
     e3a:	e4 60       	ori	r30, 0x04	; 4
     e3c:	3e 2e       	mov	r3, r30
     e3e:	2a c0       	rjmp	.+84     	; 0xe94 <vfprintf+0xe6>
     e40:	f3 2d       	mov	r31, r3
     e42:	f8 60       	ori	r31, 0x08	; 8
     e44:	1d c0       	rjmp	.+58     	; 0xe80 <vfprintf+0xd2>
     e46:	37 fc       	sbrc	r3, 7
     e48:	2d c0       	rjmp	.+90     	; 0xea4 <vfprintf+0xf6>
     e4a:	20 ed       	ldi	r18, 0xD0	; 208
     e4c:	28 0f       	add	r18, r24
     e4e:	2a 30       	cpi	r18, 0x0A	; 10
     e50:	40 f0       	brcs	.+16     	; 0xe62 <vfprintf+0xb4>
     e52:	8e 32       	cpi	r24, 0x2E	; 46
     e54:	b9 f4       	brne	.+46     	; 0xe84 <vfprintf+0xd6>
     e56:	36 fc       	sbrc	r3, 6
     e58:	81 c1       	rjmp	.+770    	; 0x115c <vfprintf+0x3ae>
     e5a:	23 2d       	mov	r18, r3
     e5c:	20 64       	ori	r18, 0x40	; 64
     e5e:	32 2e       	mov	r3, r18
     e60:	19 c0       	rjmp	.+50     	; 0xe94 <vfprintf+0xe6>
     e62:	36 fe       	sbrs	r3, 6
     e64:	06 c0       	rjmp	.+12     	; 0xe72 <vfprintf+0xc4>
     e66:	8a e0       	ldi	r24, 0x0A	; 10
     e68:	98 9e       	mul	r9, r24
     e6a:	20 0d       	add	r18, r0
     e6c:	11 24       	eor	r1, r1
     e6e:	92 2e       	mov	r9, r18
     e70:	11 c0       	rjmp	.+34     	; 0xe94 <vfprintf+0xe6>
     e72:	ea e0       	ldi	r30, 0x0A	; 10
     e74:	2e 9e       	mul	r2, r30
     e76:	20 0d       	add	r18, r0
     e78:	11 24       	eor	r1, r1
     e7a:	22 2e       	mov	r2, r18
     e7c:	f3 2d       	mov	r31, r3
     e7e:	f0 62       	ori	r31, 0x20	; 32
     e80:	3f 2e       	mov	r3, r31
     e82:	08 c0       	rjmp	.+16     	; 0xe94 <vfprintf+0xe6>
     e84:	8c 36       	cpi	r24, 0x6C	; 108
     e86:	21 f4       	brne	.+8      	; 0xe90 <vfprintf+0xe2>
     e88:	83 2d       	mov	r24, r3
     e8a:	80 68       	ori	r24, 0x80	; 128
     e8c:	38 2e       	mov	r3, r24
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <vfprintf+0xe6>
     e90:	88 36       	cpi	r24, 0x68	; 104
     e92:	41 f4       	brne	.+16     	; 0xea4 <vfprintf+0xf6>
     e94:	f7 01       	movw	r30, r14
     e96:	93 fd       	sbrc	r25, 3
     e98:	85 91       	lpm	r24, Z+
     e9a:	93 ff       	sbrs	r25, 3
     e9c:	81 91       	ld	r24, Z+
     e9e:	7f 01       	movw	r14, r30
     ea0:	81 11       	cpse	r24, r1
     ea2:	b3 cf       	rjmp	.-154    	; 0xe0a <vfprintf+0x5c>
     ea4:	98 2f       	mov	r25, r24
     ea6:	9f 7d       	andi	r25, 0xDF	; 223
     ea8:	95 54       	subi	r25, 0x45	; 69
     eaa:	93 30       	cpi	r25, 0x03	; 3
     eac:	28 f4       	brcc	.+10     	; 0xeb8 <vfprintf+0x10a>
     eae:	0c 5f       	subi	r16, 0xFC	; 252
     eb0:	1f 4f       	sbci	r17, 0xFF	; 255
     eb2:	9f e3       	ldi	r25, 0x3F	; 63
     eb4:	99 83       	std	Y+1, r25	; 0x01
     eb6:	0d c0       	rjmp	.+26     	; 0xed2 <vfprintf+0x124>
     eb8:	83 36       	cpi	r24, 0x63	; 99
     eba:	31 f0       	breq	.+12     	; 0xec8 <vfprintf+0x11a>
     ebc:	83 37       	cpi	r24, 0x73	; 115
     ebe:	71 f0       	breq	.+28     	; 0xedc <vfprintf+0x12e>
     ec0:	83 35       	cpi	r24, 0x53	; 83
     ec2:	09 f0       	breq	.+2      	; 0xec6 <vfprintf+0x118>
     ec4:	59 c0       	rjmp	.+178    	; 0xf78 <vfprintf+0x1ca>
     ec6:	21 c0       	rjmp	.+66     	; 0xf0a <vfprintf+0x15c>
     ec8:	f8 01       	movw	r30, r16
     eca:	80 81       	ld	r24, Z
     ecc:	89 83       	std	Y+1, r24	; 0x01
     ece:	0e 5f       	subi	r16, 0xFE	; 254
     ed0:	1f 4f       	sbci	r17, 0xFF	; 255
     ed2:	88 24       	eor	r8, r8
     ed4:	83 94       	inc	r8
     ed6:	91 2c       	mov	r9, r1
     ed8:	53 01       	movw	r10, r6
     eda:	13 c0       	rjmp	.+38     	; 0xf02 <vfprintf+0x154>
     edc:	28 01       	movw	r4, r16
     ede:	f2 e0       	ldi	r31, 0x02	; 2
     ee0:	4f 0e       	add	r4, r31
     ee2:	51 1c       	adc	r5, r1
     ee4:	f8 01       	movw	r30, r16
     ee6:	a0 80       	ld	r10, Z
     ee8:	b1 80       	ldd	r11, Z+1	; 0x01
     eea:	36 fe       	sbrs	r3, 6
     eec:	03 c0       	rjmp	.+6      	; 0xef4 <vfprintf+0x146>
     eee:	69 2d       	mov	r22, r9
     ef0:	70 e0       	ldi	r23, 0x00	; 0
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <vfprintf+0x14a>
     ef4:	6f ef       	ldi	r22, 0xFF	; 255
     ef6:	7f ef       	ldi	r23, 0xFF	; 255
     ef8:	c5 01       	movw	r24, r10
     efa:	0e 94 c6 08 	call	0x118c	; 0x118c <strnlen>
     efe:	4c 01       	movw	r8, r24
     f00:	82 01       	movw	r16, r4
     f02:	f3 2d       	mov	r31, r3
     f04:	ff 77       	andi	r31, 0x7F	; 127
     f06:	3f 2e       	mov	r3, r31
     f08:	16 c0       	rjmp	.+44     	; 0xf36 <vfprintf+0x188>
     f0a:	28 01       	movw	r4, r16
     f0c:	22 e0       	ldi	r18, 0x02	; 2
     f0e:	42 0e       	add	r4, r18
     f10:	51 1c       	adc	r5, r1
     f12:	f8 01       	movw	r30, r16
     f14:	a0 80       	ld	r10, Z
     f16:	b1 80       	ldd	r11, Z+1	; 0x01
     f18:	36 fe       	sbrs	r3, 6
     f1a:	03 c0       	rjmp	.+6      	; 0xf22 <vfprintf+0x174>
     f1c:	69 2d       	mov	r22, r9
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <vfprintf+0x178>
     f22:	6f ef       	ldi	r22, 0xFF	; 255
     f24:	7f ef       	ldi	r23, 0xFF	; 255
     f26:	c5 01       	movw	r24, r10
     f28:	0e 94 bb 08 	call	0x1176	; 0x1176 <strnlen_P>
     f2c:	4c 01       	movw	r8, r24
     f2e:	f3 2d       	mov	r31, r3
     f30:	f0 68       	ori	r31, 0x80	; 128
     f32:	3f 2e       	mov	r3, r31
     f34:	82 01       	movw	r16, r4
     f36:	33 fc       	sbrc	r3, 3
     f38:	1b c0       	rjmp	.+54     	; 0xf70 <vfprintf+0x1c2>
     f3a:	82 2d       	mov	r24, r2
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	88 16       	cp	r8, r24
     f40:	99 06       	cpc	r9, r25
     f42:	b0 f4       	brcc	.+44     	; 0xf70 <vfprintf+0x1c2>
     f44:	b6 01       	movw	r22, r12
     f46:	80 e2       	ldi	r24, 0x20	; 32
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <fputc>
     f4e:	2a 94       	dec	r2
     f50:	f4 cf       	rjmp	.-24     	; 0xf3a <vfprintf+0x18c>
     f52:	f5 01       	movw	r30, r10
     f54:	37 fc       	sbrc	r3, 7
     f56:	85 91       	lpm	r24, Z+
     f58:	37 fe       	sbrs	r3, 7
     f5a:	81 91       	ld	r24, Z+
     f5c:	5f 01       	movw	r10, r30
     f5e:	b6 01       	movw	r22, r12
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <fputc>
     f66:	21 10       	cpse	r2, r1
     f68:	2a 94       	dec	r2
     f6a:	21 e0       	ldi	r18, 0x01	; 1
     f6c:	82 1a       	sub	r8, r18
     f6e:	91 08       	sbc	r9, r1
     f70:	81 14       	cp	r8, r1
     f72:	91 04       	cpc	r9, r1
     f74:	71 f7       	brne	.-36     	; 0xf52 <vfprintf+0x1a4>
     f76:	e8 c0       	rjmp	.+464    	; 0x1148 <vfprintf+0x39a>
     f78:	84 36       	cpi	r24, 0x64	; 100
     f7a:	11 f0       	breq	.+4      	; 0xf80 <vfprintf+0x1d2>
     f7c:	89 36       	cpi	r24, 0x69	; 105
     f7e:	41 f5       	brne	.+80     	; 0xfd0 <vfprintf+0x222>
     f80:	f8 01       	movw	r30, r16
     f82:	37 fe       	sbrs	r3, 7
     f84:	07 c0       	rjmp	.+14     	; 0xf94 <vfprintf+0x1e6>
     f86:	60 81       	ld	r22, Z
     f88:	71 81       	ldd	r23, Z+1	; 0x01
     f8a:	82 81       	ldd	r24, Z+2	; 0x02
     f8c:	93 81       	ldd	r25, Z+3	; 0x03
     f8e:	0c 5f       	subi	r16, 0xFC	; 252
     f90:	1f 4f       	sbci	r17, 0xFF	; 255
     f92:	08 c0       	rjmp	.+16     	; 0xfa4 <vfprintf+0x1f6>
     f94:	60 81       	ld	r22, Z
     f96:	71 81       	ldd	r23, Z+1	; 0x01
     f98:	07 2e       	mov	r0, r23
     f9a:	00 0c       	add	r0, r0
     f9c:	88 0b       	sbc	r24, r24
     f9e:	99 0b       	sbc	r25, r25
     fa0:	0e 5f       	subi	r16, 0xFE	; 254
     fa2:	1f 4f       	sbci	r17, 0xFF	; 255
     fa4:	f3 2d       	mov	r31, r3
     fa6:	ff 76       	andi	r31, 0x6F	; 111
     fa8:	3f 2e       	mov	r3, r31
     faa:	97 ff       	sbrs	r25, 7
     fac:	09 c0       	rjmp	.+18     	; 0xfc0 <vfprintf+0x212>
     fae:	90 95       	com	r25
     fb0:	80 95       	com	r24
     fb2:	70 95       	com	r23
     fb4:	61 95       	neg	r22
     fb6:	7f 4f       	sbci	r23, 0xFF	; 255
     fb8:	8f 4f       	sbci	r24, 0xFF	; 255
     fba:	9f 4f       	sbci	r25, 0xFF	; 255
     fbc:	f0 68       	ori	r31, 0x80	; 128
     fbe:	3f 2e       	mov	r3, r31
     fc0:	2a e0       	ldi	r18, 0x0A	; 10
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	a3 01       	movw	r20, r6
     fc6:	0e 94 0d 09 	call	0x121a	; 0x121a <__ultoa_invert>
     fca:	88 2e       	mov	r8, r24
     fcc:	86 18       	sub	r8, r6
     fce:	45 c0       	rjmp	.+138    	; 0x105a <vfprintf+0x2ac>
     fd0:	85 37       	cpi	r24, 0x75	; 117
     fd2:	31 f4       	brne	.+12     	; 0xfe0 <vfprintf+0x232>
     fd4:	23 2d       	mov	r18, r3
     fd6:	2f 7e       	andi	r18, 0xEF	; 239
     fd8:	b2 2e       	mov	r11, r18
     fda:	2a e0       	ldi	r18, 0x0A	; 10
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	25 c0       	rjmp	.+74     	; 0x102a <vfprintf+0x27c>
     fe0:	93 2d       	mov	r25, r3
     fe2:	99 7f       	andi	r25, 0xF9	; 249
     fe4:	b9 2e       	mov	r11, r25
     fe6:	8f 36       	cpi	r24, 0x6F	; 111
     fe8:	c1 f0       	breq	.+48     	; 0x101a <vfprintf+0x26c>
     fea:	18 f4       	brcc	.+6      	; 0xff2 <vfprintf+0x244>
     fec:	88 35       	cpi	r24, 0x58	; 88
     fee:	79 f0       	breq	.+30     	; 0x100e <vfprintf+0x260>
     ff0:	b5 c0       	rjmp	.+362    	; 0x115c <vfprintf+0x3ae>
     ff2:	80 37       	cpi	r24, 0x70	; 112
     ff4:	19 f0       	breq	.+6      	; 0xffc <vfprintf+0x24e>
     ff6:	88 37       	cpi	r24, 0x78	; 120
     ff8:	21 f0       	breq	.+8      	; 0x1002 <vfprintf+0x254>
     ffa:	b0 c0       	rjmp	.+352    	; 0x115c <vfprintf+0x3ae>
     ffc:	e9 2f       	mov	r30, r25
     ffe:	e0 61       	ori	r30, 0x10	; 16
    1000:	be 2e       	mov	r11, r30
    1002:	b4 fe       	sbrs	r11, 4
    1004:	0d c0       	rjmp	.+26     	; 0x1020 <vfprintf+0x272>
    1006:	fb 2d       	mov	r31, r11
    1008:	f4 60       	ori	r31, 0x04	; 4
    100a:	bf 2e       	mov	r11, r31
    100c:	09 c0       	rjmp	.+18     	; 0x1020 <vfprintf+0x272>
    100e:	34 fe       	sbrs	r3, 4
    1010:	0a c0       	rjmp	.+20     	; 0x1026 <vfprintf+0x278>
    1012:	29 2f       	mov	r18, r25
    1014:	26 60       	ori	r18, 0x06	; 6
    1016:	b2 2e       	mov	r11, r18
    1018:	06 c0       	rjmp	.+12     	; 0x1026 <vfprintf+0x278>
    101a:	28 e0       	ldi	r18, 0x08	; 8
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	05 c0       	rjmp	.+10     	; 0x102a <vfprintf+0x27c>
    1020:	20 e1       	ldi	r18, 0x10	; 16
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	02 c0       	rjmp	.+4      	; 0x102a <vfprintf+0x27c>
    1026:	20 e1       	ldi	r18, 0x10	; 16
    1028:	32 e0       	ldi	r19, 0x02	; 2
    102a:	f8 01       	movw	r30, r16
    102c:	b7 fe       	sbrs	r11, 7
    102e:	07 c0       	rjmp	.+14     	; 0x103e <vfprintf+0x290>
    1030:	60 81       	ld	r22, Z
    1032:	71 81       	ldd	r23, Z+1	; 0x01
    1034:	82 81       	ldd	r24, Z+2	; 0x02
    1036:	93 81       	ldd	r25, Z+3	; 0x03
    1038:	0c 5f       	subi	r16, 0xFC	; 252
    103a:	1f 4f       	sbci	r17, 0xFF	; 255
    103c:	06 c0       	rjmp	.+12     	; 0x104a <vfprintf+0x29c>
    103e:	60 81       	ld	r22, Z
    1040:	71 81       	ldd	r23, Z+1	; 0x01
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	0e 5f       	subi	r16, 0xFE	; 254
    1048:	1f 4f       	sbci	r17, 0xFF	; 255
    104a:	a3 01       	movw	r20, r6
    104c:	0e 94 0d 09 	call	0x121a	; 0x121a <__ultoa_invert>
    1050:	88 2e       	mov	r8, r24
    1052:	86 18       	sub	r8, r6
    1054:	fb 2d       	mov	r31, r11
    1056:	ff 77       	andi	r31, 0x7F	; 127
    1058:	3f 2e       	mov	r3, r31
    105a:	36 fe       	sbrs	r3, 6
    105c:	0d c0       	rjmp	.+26     	; 0x1078 <vfprintf+0x2ca>
    105e:	23 2d       	mov	r18, r3
    1060:	2e 7f       	andi	r18, 0xFE	; 254
    1062:	a2 2e       	mov	r10, r18
    1064:	89 14       	cp	r8, r9
    1066:	58 f4       	brcc	.+22     	; 0x107e <vfprintf+0x2d0>
    1068:	34 fe       	sbrs	r3, 4
    106a:	0b c0       	rjmp	.+22     	; 0x1082 <vfprintf+0x2d4>
    106c:	32 fc       	sbrc	r3, 2
    106e:	09 c0       	rjmp	.+18     	; 0x1082 <vfprintf+0x2d4>
    1070:	83 2d       	mov	r24, r3
    1072:	8e 7e       	andi	r24, 0xEE	; 238
    1074:	a8 2e       	mov	r10, r24
    1076:	05 c0       	rjmp	.+10     	; 0x1082 <vfprintf+0x2d4>
    1078:	b8 2c       	mov	r11, r8
    107a:	a3 2c       	mov	r10, r3
    107c:	03 c0       	rjmp	.+6      	; 0x1084 <vfprintf+0x2d6>
    107e:	b8 2c       	mov	r11, r8
    1080:	01 c0       	rjmp	.+2      	; 0x1084 <vfprintf+0x2d6>
    1082:	b9 2c       	mov	r11, r9
    1084:	a4 fe       	sbrs	r10, 4
    1086:	0f c0       	rjmp	.+30     	; 0x10a6 <vfprintf+0x2f8>
    1088:	fe 01       	movw	r30, r28
    108a:	e8 0d       	add	r30, r8
    108c:	f1 1d       	adc	r31, r1
    108e:	80 81       	ld	r24, Z
    1090:	80 33       	cpi	r24, 0x30	; 48
    1092:	21 f4       	brne	.+8      	; 0x109c <vfprintf+0x2ee>
    1094:	9a 2d       	mov	r25, r10
    1096:	99 7e       	andi	r25, 0xE9	; 233
    1098:	a9 2e       	mov	r10, r25
    109a:	09 c0       	rjmp	.+18     	; 0x10ae <vfprintf+0x300>
    109c:	a2 fe       	sbrs	r10, 2
    109e:	06 c0       	rjmp	.+12     	; 0x10ac <vfprintf+0x2fe>
    10a0:	b3 94       	inc	r11
    10a2:	b3 94       	inc	r11
    10a4:	04 c0       	rjmp	.+8      	; 0x10ae <vfprintf+0x300>
    10a6:	8a 2d       	mov	r24, r10
    10a8:	86 78       	andi	r24, 0x86	; 134
    10aa:	09 f0       	breq	.+2      	; 0x10ae <vfprintf+0x300>
    10ac:	b3 94       	inc	r11
    10ae:	a3 fc       	sbrc	r10, 3
    10b0:	11 c0       	rjmp	.+34     	; 0x10d4 <vfprintf+0x326>
    10b2:	a0 fe       	sbrs	r10, 0
    10b4:	06 c0       	rjmp	.+12     	; 0x10c2 <vfprintf+0x314>
    10b6:	b2 14       	cp	r11, r2
    10b8:	88 f4       	brcc	.+34     	; 0x10dc <vfprintf+0x32e>
    10ba:	28 0c       	add	r2, r8
    10bc:	92 2c       	mov	r9, r2
    10be:	9b 18       	sub	r9, r11
    10c0:	0e c0       	rjmp	.+28     	; 0x10de <vfprintf+0x330>
    10c2:	b2 14       	cp	r11, r2
    10c4:	60 f4       	brcc	.+24     	; 0x10de <vfprintf+0x330>
    10c6:	b6 01       	movw	r22, r12
    10c8:	80 e2       	ldi	r24, 0x20	; 32
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <fputc>
    10d0:	b3 94       	inc	r11
    10d2:	f7 cf       	rjmp	.-18     	; 0x10c2 <vfprintf+0x314>
    10d4:	b2 14       	cp	r11, r2
    10d6:	18 f4       	brcc	.+6      	; 0x10de <vfprintf+0x330>
    10d8:	2b 18       	sub	r2, r11
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <vfprintf+0x332>
    10dc:	98 2c       	mov	r9, r8
    10de:	21 2c       	mov	r2, r1
    10e0:	a4 fe       	sbrs	r10, 4
    10e2:	10 c0       	rjmp	.+32     	; 0x1104 <vfprintf+0x356>
    10e4:	b6 01       	movw	r22, r12
    10e6:	80 e3       	ldi	r24, 0x30	; 48
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <fputc>
    10ee:	a2 fe       	sbrs	r10, 2
    10f0:	17 c0       	rjmp	.+46     	; 0x1120 <vfprintf+0x372>
    10f2:	a1 fc       	sbrc	r10, 1
    10f4:	03 c0       	rjmp	.+6      	; 0x10fc <vfprintf+0x34e>
    10f6:	88 e7       	ldi	r24, 0x78	; 120
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <vfprintf+0x352>
    10fc:	88 e5       	ldi	r24, 0x58	; 88
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	b6 01       	movw	r22, r12
    1102:	0c c0       	rjmp	.+24     	; 0x111c <vfprintf+0x36e>
    1104:	8a 2d       	mov	r24, r10
    1106:	86 78       	andi	r24, 0x86	; 134
    1108:	59 f0       	breq	.+22     	; 0x1120 <vfprintf+0x372>
    110a:	a1 fe       	sbrs	r10, 1
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <vfprintf+0x364>
    110e:	8b e2       	ldi	r24, 0x2B	; 43
    1110:	01 c0       	rjmp	.+2      	; 0x1114 <vfprintf+0x366>
    1112:	80 e2       	ldi	r24, 0x20	; 32
    1114:	a7 fc       	sbrc	r10, 7
    1116:	8d e2       	ldi	r24, 0x2D	; 45
    1118:	b6 01       	movw	r22, r12
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <fputc>
    1120:	89 14       	cp	r8, r9
    1122:	38 f4       	brcc	.+14     	; 0x1132 <vfprintf+0x384>
    1124:	b6 01       	movw	r22, r12
    1126:	80 e3       	ldi	r24, 0x30	; 48
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <fputc>
    112e:	9a 94       	dec	r9
    1130:	f7 cf       	rjmp	.-18     	; 0x1120 <vfprintf+0x372>
    1132:	8a 94       	dec	r8
    1134:	f3 01       	movw	r30, r6
    1136:	e8 0d       	add	r30, r8
    1138:	f1 1d       	adc	r31, r1
    113a:	80 81       	ld	r24, Z
    113c:	b6 01       	movw	r22, r12
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <fputc>
    1144:	81 10       	cpse	r8, r1
    1146:	f5 cf       	rjmp	.-22     	; 0x1132 <vfprintf+0x384>
    1148:	22 20       	and	r2, r2
    114a:	09 f4       	brne	.+2      	; 0x114e <vfprintf+0x3a0>
    114c:	42 ce       	rjmp	.-892    	; 0xdd2 <vfprintf+0x24>
    114e:	b6 01       	movw	r22, r12
    1150:	80 e2       	ldi	r24, 0x20	; 32
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <fputc>
    1158:	2a 94       	dec	r2
    115a:	f6 cf       	rjmp	.-20     	; 0x1148 <vfprintf+0x39a>
    115c:	f6 01       	movw	r30, r12
    115e:	86 81       	ldd	r24, Z+6	; 0x06
    1160:	97 81       	ldd	r25, Z+7	; 0x07
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <vfprintf+0x3ba>
    1164:	8f ef       	ldi	r24, 0xFF	; 255
    1166:	9f ef       	ldi	r25, 0xFF	; 255
    1168:	2b 96       	adiw	r28, 0x0b	; 11
    116a:	e2 e1       	ldi	r30, 0x12	; 18
    116c:	0c 94 f7 09 	jmp	0x13ee	; 0x13ee <__epilogue_restores__>

00001170 <__ctype_isfalse>:
    1170:	99 27       	eor	r25, r25
    1172:	88 27       	eor	r24, r24

00001174 <__ctype_istrue>:
    1174:	08 95       	ret

00001176 <strnlen_P>:
    1176:	fc 01       	movw	r30, r24
    1178:	05 90       	lpm	r0, Z+
    117a:	61 50       	subi	r22, 0x01	; 1
    117c:	70 40       	sbci	r23, 0x00	; 0
    117e:	01 10       	cpse	r0, r1
    1180:	d8 f7       	brcc	.-10     	; 0x1178 <strnlen_P+0x2>
    1182:	80 95       	com	r24
    1184:	90 95       	com	r25
    1186:	8e 0f       	add	r24, r30
    1188:	9f 1f       	adc	r25, r31
    118a:	08 95       	ret

0000118c <strnlen>:
    118c:	fc 01       	movw	r30, r24
    118e:	61 50       	subi	r22, 0x01	; 1
    1190:	70 40       	sbci	r23, 0x00	; 0
    1192:	01 90       	ld	r0, Z+
    1194:	01 10       	cpse	r0, r1
    1196:	d8 f7       	brcc	.-10     	; 0x118e <strnlen+0x2>
    1198:	80 95       	com	r24
    119a:	90 95       	com	r25
    119c:	8e 0f       	add	r24, r30
    119e:	9f 1f       	adc	r25, r31
    11a0:	08 95       	ret

000011a2 <fputc>:
    11a2:	0f 93       	push	r16
    11a4:	1f 93       	push	r17
    11a6:	cf 93       	push	r28
    11a8:	df 93       	push	r29
    11aa:	fb 01       	movw	r30, r22
    11ac:	23 81       	ldd	r18, Z+3	; 0x03
    11ae:	21 fd       	sbrc	r18, 1
    11b0:	03 c0       	rjmp	.+6      	; 0x11b8 <fputc+0x16>
    11b2:	8f ef       	ldi	r24, 0xFF	; 255
    11b4:	9f ef       	ldi	r25, 0xFF	; 255
    11b6:	2c c0       	rjmp	.+88     	; 0x1210 <fputc+0x6e>
    11b8:	22 ff       	sbrs	r18, 2
    11ba:	16 c0       	rjmp	.+44     	; 0x11e8 <fputc+0x46>
    11bc:	46 81       	ldd	r20, Z+6	; 0x06
    11be:	57 81       	ldd	r21, Z+7	; 0x07
    11c0:	24 81       	ldd	r18, Z+4	; 0x04
    11c2:	35 81       	ldd	r19, Z+5	; 0x05
    11c4:	42 17       	cp	r20, r18
    11c6:	53 07       	cpc	r21, r19
    11c8:	44 f4       	brge	.+16     	; 0x11da <fputc+0x38>
    11ca:	a0 81       	ld	r26, Z
    11cc:	b1 81       	ldd	r27, Z+1	; 0x01
    11ce:	9d 01       	movw	r18, r26
    11d0:	2f 5f       	subi	r18, 0xFF	; 255
    11d2:	3f 4f       	sbci	r19, 0xFF	; 255
    11d4:	31 83       	std	Z+1, r19	; 0x01
    11d6:	20 83       	st	Z, r18
    11d8:	8c 93       	st	X, r24
    11da:	26 81       	ldd	r18, Z+6	; 0x06
    11dc:	37 81       	ldd	r19, Z+7	; 0x07
    11de:	2f 5f       	subi	r18, 0xFF	; 255
    11e0:	3f 4f       	sbci	r19, 0xFF	; 255
    11e2:	37 83       	std	Z+7, r19	; 0x07
    11e4:	26 83       	std	Z+6, r18	; 0x06
    11e6:	14 c0       	rjmp	.+40     	; 0x1210 <fputc+0x6e>
    11e8:	8b 01       	movw	r16, r22
    11ea:	ec 01       	movw	r28, r24
    11ec:	fb 01       	movw	r30, r22
    11ee:	00 84       	ldd	r0, Z+8	; 0x08
    11f0:	f1 85       	ldd	r31, Z+9	; 0x09
    11f2:	e0 2d       	mov	r30, r0
    11f4:	09 95       	icall
    11f6:	89 2b       	or	r24, r25
    11f8:	e1 f6       	brne	.-72     	; 0x11b2 <fputc+0x10>
    11fa:	d8 01       	movw	r26, r16
    11fc:	16 96       	adiw	r26, 0x06	; 6
    11fe:	8d 91       	ld	r24, X+
    1200:	9c 91       	ld	r25, X
    1202:	17 97       	sbiw	r26, 0x07	; 7
    1204:	01 96       	adiw	r24, 0x01	; 1
    1206:	17 96       	adiw	r26, 0x07	; 7
    1208:	9c 93       	st	X, r25
    120a:	8e 93       	st	-X, r24
    120c:	16 97       	sbiw	r26, 0x06	; 6
    120e:	ce 01       	movw	r24, r28
    1210:	df 91       	pop	r29
    1212:	cf 91       	pop	r28
    1214:	1f 91       	pop	r17
    1216:	0f 91       	pop	r16
    1218:	08 95       	ret

0000121a <__ultoa_invert>:
    121a:	fa 01       	movw	r30, r20
    121c:	aa 27       	eor	r26, r26
    121e:	28 30       	cpi	r18, 0x08	; 8
    1220:	51 f1       	breq	.+84     	; 0x1276 <__ultoa_invert+0x5c>
    1222:	20 31       	cpi	r18, 0x10	; 16
    1224:	81 f1       	breq	.+96     	; 0x1286 <__ultoa_invert+0x6c>
    1226:	e8 94       	clt
    1228:	6f 93       	push	r22
    122a:	6e 7f       	andi	r22, 0xFE	; 254
    122c:	6e 5f       	subi	r22, 0xFE	; 254
    122e:	7f 4f       	sbci	r23, 0xFF	; 255
    1230:	8f 4f       	sbci	r24, 0xFF	; 255
    1232:	9f 4f       	sbci	r25, 0xFF	; 255
    1234:	af 4f       	sbci	r26, 0xFF	; 255
    1236:	b1 e0       	ldi	r27, 0x01	; 1
    1238:	3e d0       	rcall	.+124    	; 0x12b6 <__ultoa_invert+0x9c>
    123a:	b4 e0       	ldi	r27, 0x04	; 4
    123c:	3c d0       	rcall	.+120    	; 0x12b6 <__ultoa_invert+0x9c>
    123e:	67 0f       	add	r22, r23
    1240:	78 1f       	adc	r23, r24
    1242:	89 1f       	adc	r24, r25
    1244:	9a 1f       	adc	r25, r26
    1246:	a1 1d       	adc	r26, r1
    1248:	68 0f       	add	r22, r24
    124a:	79 1f       	adc	r23, r25
    124c:	8a 1f       	adc	r24, r26
    124e:	91 1d       	adc	r25, r1
    1250:	a1 1d       	adc	r26, r1
    1252:	6a 0f       	add	r22, r26
    1254:	71 1d       	adc	r23, r1
    1256:	81 1d       	adc	r24, r1
    1258:	91 1d       	adc	r25, r1
    125a:	a1 1d       	adc	r26, r1
    125c:	20 d0       	rcall	.+64     	; 0x129e <__ultoa_invert+0x84>
    125e:	09 f4       	brne	.+2      	; 0x1262 <__ultoa_invert+0x48>
    1260:	68 94       	set
    1262:	3f 91       	pop	r19
    1264:	2a e0       	ldi	r18, 0x0A	; 10
    1266:	26 9f       	mul	r18, r22
    1268:	11 24       	eor	r1, r1
    126a:	30 19       	sub	r19, r0
    126c:	30 5d       	subi	r19, 0xD0	; 208
    126e:	31 93       	st	Z+, r19
    1270:	de f6       	brtc	.-74     	; 0x1228 <__ultoa_invert+0xe>
    1272:	cf 01       	movw	r24, r30
    1274:	08 95       	ret
    1276:	46 2f       	mov	r20, r22
    1278:	47 70       	andi	r20, 0x07	; 7
    127a:	40 5d       	subi	r20, 0xD0	; 208
    127c:	41 93       	st	Z+, r20
    127e:	b3 e0       	ldi	r27, 0x03	; 3
    1280:	0f d0       	rcall	.+30     	; 0x12a0 <__ultoa_invert+0x86>
    1282:	c9 f7       	brne	.-14     	; 0x1276 <__ultoa_invert+0x5c>
    1284:	f6 cf       	rjmp	.-20     	; 0x1272 <__ultoa_invert+0x58>
    1286:	46 2f       	mov	r20, r22
    1288:	4f 70       	andi	r20, 0x0F	; 15
    128a:	40 5d       	subi	r20, 0xD0	; 208
    128c:	4a 33       	cpi	r20, 0x3A	; 58
    128e:	18 f0       	brcs	.+6      	; 0x1296 <__ultoa_invert+0x7c>
    1290:	49 5d       	subi	r20, 0xD9	; 217
    1292:	31 fd       	sbrc	r19, 1
    1294:	40 52       	subi	r20, 0x20	; 32
    1296:	41 93       	st	Z+, r20
    1298:	02 d0       	rcall	.+4      	; 0x129e <__ultoa_invert+0x84>
    129a:	a9 f7       	brne	.-22     	; 0x1286 <__ultoa_invert+0x6c>
    129c:	ea cf       	rjmp	.-44     	; 0x1272 <__ultoa_invert+0x58>
    129e:	b4 e0       	ldi	r27, 0x04	; 4
    12a0:	a6 95       	lsr	r26
    12a2:	97 95       	ror	r25
    12a4:	87 95       	ror	r24
    12a6:	77 95       	ror	r23
    12a8:	67 95       	ror	r22
    12aa:	ba 95       	dec	r27
    12ac:	c9 f7       	brne	.-14     	; 0x12a0 <__ultoa_invert+0x86>
    12ae:	00 97       	sbiw	r24, 0x00	; 0
    12b0:	61 05       	cpc	r22, r1
    12b2:	71 05       	cpc	r23, r1
    12b4:	08 95       	ret
    12b6:	9b 01       	movw	r18, r22
    12b8:	ac 01       	movw	r20, r24
    12ba:	0a 2e       	mov	r0, r26
    12bc:	06 94       	lsr	r0
    12be:	57 95       	ror	r21
    12c0:	47 95       	ror	r20
    12c2:	37 95       	ror	r19
    12c4:	27 95       	ror	r18
    12c6:	ba 95       	dec	r27
    12c8:	c9 f7       	brne	.-14     	; 0x12bc <__ultoa_invert+0xa2>
    12ca:	62 0f       	add	r22, r18
    12cc:	73 1f       	adc	r23, r19
    12ce:	84 1f       	adc	r24, r20
    12d0:	95 1f       	adc	r25, r21
    12d2:	a0 1d       	adc	r26, r0
    12d4:	08 95       	ret

000012d6 <eeprom_read_block>:
    12d6:	dc 01       	movw	r26, r24
    12d8:	cb 01       	movw	r24, r22

000012da <eeprom_read_blraw>:
    12da:	fc 01       	movw	r30, r24
    12dc:	f9 99       	sbic	0x1f, 1	; 31
    12de:	fe cf       	rjmp	.-4      	; 0x12dc <eeprom_read_blraw+0x2>
    12e0:	06 c0       	rjmp	.+12     	; 0x12ee <eeprom_read_blraw+0x14>
    12e2:	f2 bd       	out	0x22, r31	; 34
    12e4:	e1 bd       	out	0x21, r30	; 33
    12e6:	f8 9a       	sbi	0x1f, 0	; 31
    12e8:	31 96       	adiw	r30, 0x01	; 1
    12ea:	00 b4       	in	r0, 0x20	; 32
    12ec:	0d 92       	st	X+, r0
    12ee:	41 50       	subi	r20, 0x01	; 1
    12f0:	50 40       	sbci	r21, 0x00	; 0
    12f2:	b8 f7       	brcc	.-18     	; 0x12e2 <eeprom_read_blraw+0x8>
    12f4:	08 95       	ret

000012f6 <eeprom_read_word>:
    12f6:	a8 e1       	ldi	r26, 0x18	; 24
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	42 e0       	ldi	r20, 0x02	; 2
    12fc:	50 e0       	ldi	r21, 0x00	; 0
    12fe:	0c 94 6d 09 	jmp	0x12da	; 0x12da <eeprom_read_blraw>

00001302 <eeprom_write_block>:
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	03 c0       	rjmp	.+6      	; 0x130e <eeprom_write_block+0xc>
    1308:	2d 91       	ld	r18, X+
    130a:	0e 94 8c 09 	call	0x1318	; 0x1318 <eeprom_write_r18>
    130e:	41 50       	subi	r20, 0x01	; 1
    1310:	50 40       	sbci	r21, 0x00	; 0
    1312:	d0 f7       	brcc	.-12     	; 0x1308 <eeprom_write_block+0x6>
    1314:	08 95       	ret

00001316 <eeprom_write_byte>:
    1316:	26 2f       	mov	r18, r22

00001318 <eeprom_write_r18>:
    1318:	f9 99       	sbic	0x1f, 1	; 31
    131a:	fe cf       	rjmp	.-4      	; 0x1318 <eeprom_write_r18>
    131c:	1f ba       	out	0x1f, r1	; 31
    131e:	92 bd       	out	0x22, r25	; 34
    1320:	81 bd       	out	0x21, r24	; 33
    1322:	20 bd       	out	0x20, r18	; 32
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	f8 94       	cli
    1328:	fa 9a       	sbi	0x1f, 2	; 31
    132a:	f9 9a       	sbi	0x1f, 1	; 31
    132c:	0f be       	out	0x3f, r0	; 63
    132e:	01 96       	adiw	r24, 0x01	; 1
    1330:	08 95       	ret

00001332 <eeprom_write_word>:
    1332:	0e 94 8b 09 	call	0x1316	; 0x1316 <eeprom_write_byte>
    1336:	27 2f       	mov	r18, r23
    1338:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <eeprom_write_r18>

0000133c <__mulsi3>:
    133c:	db 01       	movw	r26, r22
    133e:	8f 93       	push	r24
    1340:	9f 93       	push	r25
    1342:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__muluhisi3>
    1346:	bf 91       	pop	r27
    1348:	af 91       	pop	r26
    134a:	a2 9f       	mul	r26, r18
    134c:	80 0d       	add	r24, r0
    134e:	91 1d       	adc	r25, r1
    1350:	a3 9f       	mul	r26, r19
    1352:	90 0d       	add	r25, r0
    1354:	b2 9f       	mul	r27, r18
    1356:	90 0d       	add	r25, r0
    1358:	11 24       	eor	r1, r1
    135a:	08 95       	ret

0000135c <__udivmodsi4>:
    135c:	a1 e2       	ldi	r26, 0x21	; 33
    135e:	1a 2e       	mov	r1, r26
    1360:	aa 1b       	sub	r26, r26
    1362:	bb 1b       	sub	r27, r27
    1364:	fd 01       	movw	r30, r26
    1366:	0d c0       	rjmp	.+26     	; 0x1382 <__udivmodsi4_ep>

00001368 <__udivmodsi4_loop>:
    1368:	aa 1f       	adc	r26, r26
    136a:	bb 1f       	adc	r27, r27
    136c:	ee 1f       	adc	r30, r30
    136e:	ff 1f       	adc	r31, r31
    1370:	a2 17       	cp	r26, r18
    1372:	b3 07       	cpc	r27, r19
    1374:	e4 07       	cpc	r30, r20
    1376:	f5 07       	cpc	r31, r21
    1378:	20 f0       	brcs	.+8      	; 0x1382 <__udivmodsi4_ep>
    137a:	a2 1b       	sub	r26, r18
    137c:	b3 0b       	sbc	r27, r19
    137e:	e4 0b       	sbc	r30, r20
    1380:	f5 0b       	sbc	r31, r21

00001382 <__udivmodsi4_ep>:
    1382:	66 1f       	adc	r22, r22
    1384:	77 1f       	adc	r23, r23
    1386:	88 1f       	adc	r24, r24
    1388:	99 1f       	adc	r25, r25
    138a:	1a 94       	dec	r1
    138c:	69 f7       	brne	.-38     	; 0x1368 <__udivmodsi4_loop>
    138e:	60 95       	com	r22
    1390:	70 95       	com	r23
    1392:	80 95       	com	r24
    1394:	90 95       	com	r25
    1396:	9b 01       	movw	r18, r22
    1398:	ac 01       	movw	r20, r24
    139a:	bd 01       	movw	r22, r26
    139c:	cf 01       	movw	r24, r30
    139e:	08 95       	ret

000013a0 <__muluhisi3>:
    13a0:	0e 94 40 05 	call	0xa80	; 0xa80 <__umulhisi3>
    13a4:	a5 9f       	mul	r26, r21
    13a6:	90 0d       	add	r25, r0
    13a8:	b4 9f       	mul	r27, r20
    13aa:	90 0d       	add	r25, r0
    13ac:	a4 9f       	mul	r26, r20
    13ae:	80 0d       	add	r24, r0
    13b0:	91 1d       	adc	r25, r1
    13b2:	11 24       	eor	r1, r1
    13b4:	08 95       	ret

000013b6 <__prologue_saves__>:
    13b6:	2f 92       	push	r2
    13b8:	3f 92       	push	r3
    13ba:	4f 92       	push	r4
    13bc:	5f 92       	push	r5
    13be:	6f 92       	push	r6
    13c0:	7f 92       	push	r7
    13c2:	8f 92       	push	r8
    13c4:	9f 92       	push	r9
    13c6:	af 92       	push	r10
    13c8:	bf 92       	push	r11
    13ca:	cf 92       	push	r12
    13cc:	df 92       	push	r13
    13ce:	ef 92       	push	r14
    13d0:	ff 92       	push	r15
    13d2:	0f 93       	push	r16
    13d4:	1f 93       	push	r17
    13d6:	cf 93       	push	r28
    13d8:	df 93       	push	r29
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    13de:	ca 1b       	sub	r28, r26
    13e0:	db 0b       	sbc	r29, r27
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	de bf       	out	0x3e, r29	; 62
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	cd bf       	out	0x3d, r28	; 61
    13ec:	09 94       	ijmp

000013ee <__epilogue_restores__>:
    13ee:	2a 88       	ldd	r2, Y+18	; 0x12
    13f0:	39 88       	ldd	r3, Y+17	; 0x11
    13f2:	48 88       	ldd	r4, Y+16	; 0x10
    13f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    13f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    13f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    13fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    13fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    13fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    1400:	b9 84       	ldd	r11, Y+9	; 0x09
    1402:	c8 84       	ldd	r12, Y+8	; 0x08
    1404:	df 80       	ldd	r13, Y+7	; 0x07
    1406:	ee 80       	ldd	r14, Y+6	; 0x06
    1408:	fd 80       	ldd	r15, Y+5	; 0x05
    140a:	0c 81       	ldd	r16, Y+4	; 0x04
    140c:	1b 81       	ldd	r17, Y+3	; 0x03
    140e:	aa 81       	ldd	r26, Y+2	; 0x02
    1410:	b9 81       	ldd	r27, Y+1	; 0x01
    1412:	ce 0f       	add	r28, r30
    1414:	d1 1d       	adc	r29, r1
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	f8 94       	cli
    141a:	de bf       	out	0x3e, r29	; 62
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	cd bf       	out	0x3d, r28	; 61
    1420:	ed 01       	movw	r28, r26
    1422:	08 95       	ret

00001424 <_exit>:
    1424:	f8 94       	cli

00001426 <__stop_program>:
    1426:	ff cf       	rjmp	.-2      	; 0x1426 <__stop_program>
