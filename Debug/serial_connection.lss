
serial_connection.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00800100  00000af6  00000baa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000af6  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000032  00800190  00800190  00000c3a  2**0
                  ALLOC
  3 .eeprom       0000000e  00810000  00810000  00000c3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ca4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000180  00000000  00000000  00000ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000015e4  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000e31  00000000  00000000  00002448  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000cf5  00000000  00000000  00003279  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000364  00000000  00000000  00003f70  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000006e7  00000000  00000000  000042d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000947  00000000  00000000  000049bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000110  00000000  00000000  00005302  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ef       	ldi	r30, 0xF6	; 246
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 39       	cpi	r26, 0x90	; 144
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e9       	ldi	r26, 0x90	; 144
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 3c       	cpi	r26, 0xC2	; 194
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 4a 02 	call	0x494	; 0x494 <main>
  9e:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_16>:
uint16_t timer_value;
int distance_cm;
uint8_t error;

ISR (TIMER0_OVF_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
	if(rising_edge==1) //Check if there was echo
  b4:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <rising_edge>
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	99 f4       	brne	.+38     	; 0xe2 <__vector_16+0x3c>
	{
		timer_value++;
  bc:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <timer_value>
  c0:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <timer_value+0x1>
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <timer_value+0x1>
  ca:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <timer_value>
		/*Check if isnt out of range*/
		if(timer_value > 91)
  ce:	8c 35       	cpi	r24, 0x5C	; 92
  d0:	91 05       	cpc	r25, r1
  d2:	38 f0       	brcs	.+14     	; 0xe2 <__vector_16+0x3c>
		{
			working = 0;
  d4:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <working>
			rising_edge = 0;
  d8:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <rising_edge>
			error = 1;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <error>
		}
	}
}
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <__vector_2>:
ISR (INT1_vect)
{
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	2f 93       	push	r18
  fc:	3f 93       	push	r19
  fe:	6f 93       	push	r22
 100:	7f 93       	push	r23
 102:	8f 93       	push	r24
 104:	9f 93       	push	r25
 106:	af 93       	push	r26
 108:	bf 93       	push	r27
	if(working==1) //Check if echo is high, start timer
 10a:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <working>
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	31 f5       	brne	.+76     	; 0x15e <__vector_2+0x6e>
	{
		if(rising_edge==0)
 112:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <rising_edge>
 116:	81 11       	cpse	r24, r1
 118:	09 c0       	rjmp	.+18     	; 0x12c <__vector_2+0x3c>
		{
			rising_edge=1;
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <rising_edge>
			TCNT0 = 0;
 120:	16 bc       	out	0x26, r1	; 38
			timer_value = 0;
 122:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <timer_value+0x1>
 126:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <timer_value>
 12a:	19 c0       	rjmp	.+50     	; 0x15e <__vector_2+0x6e>
		}
		else //Check if echo turned low, calculate distance
		{
			rising_edge = 0;
 12c:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <rising_edge>
			distance_cm = (timer_value*256 + TCNT0)/58;
 130:	86 b5       	in	r24, 0x26	; 38
 132:	20 e0       	ldi	r18, 0x00	; 0
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <timer_value>
 13a:	28 0f       	add	r18, r24
 13c:	31 1d       	adc	r19, r1
 13e:	af e9       	ldi	r26, 0x9F	; 159
 140:	b6 e4       	ldi	r27, 0x46	; 70
 142:	0e 94 8c 02 	call	0x518	; 0x518 <__umulhisi3>
 146:	92 95       	swap	r25
 148:	82 95       	swap	r24
 14a:	8f 70       	andi	r24, 0x0F	; 15
 14c:	89 27       	eor	r24, r25
 14e:	9f 70       	andi	r25, 0x0F	; 15
 150:	89 27       	eor	r24, r25
 152:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <distance_cm+0x1>
 156:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <distance_cm>
			working = 0;
 15a:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <working>
		}
	}
}
 15e:	bf 91       	pop	r27
 160:	af 91       	pop	r26
 162:	9f 91       	pop	r25
 164:	8f 91       	pop	r24
 166:	7f 91       	pop	r23
 168:	6f 91       	pop	r22
 16a:	3f 91       	pop	r19
 16c:	2f 91       	pop	r18
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <getLight>:
 *  Author: gebruiker
 */ 

#include <stdio.h>

const char* getLight() {
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
	//https://stackoverflow.com/questions/1496313/returning-c-string-from-a-function
	static char* brightness[] = {"Very dark", "Dark", "Dim dark", "Dim", "Dim light", "Light", "Bright","Very Bright"};
	int sensorValue = readAdc(0)/128;
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 35 02 	call	0x46a	; 0x46a <readAdc>
 184:	99 23       	and	r25, r25
 186:	14 f4       	brge	.+4      	; 0x18c <getLight+0x14>
 188:	81 58       	subi	r24, 0x81	; 129
 18a:	9f 4f       	sbci	r25, 0xFF	; 255
 18c:	ec 01       	movw	r28, r24
 18e:	cc 0f       	add	r28, r28
 190:	cd 2f       	mov	r28, r29
 192:	cc 1f       	adc	r28, r28
 194:	dd 0b       	sbc	r29, r29
	printf("Lichtwaarde: %i \n \r", sensorValue);
 196:	df 93       	push	r29
 198:	cf 93       	push	r28
 19a:	8f e1       	ldi	r24, 0x1F	; 31
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	9f 93       	push	r25
 1a0:	8f 93       	push	r24
 1a2:	0e 94 9b 02 	call	0x536	; 0x536 <printf>
	
	if (sensorValue > 0 && sensorValue <= 8) {
 1a6:	ce 01       	movw	r24, r28
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	0f 90       	pop	r0
 1ac:	0f 90       	pop	r0
 1ae:	0f 90       	pop	r0
 1b0:	0f 90       	pop	r0
 1b2:	08 97       	sbiw	r24, 0x08	; 8
 1b4:	38 f4       	brcc	.+14     	; 0x1c4 <getLight+0x4c>
		return brightness[sensorValue];
 1b6:	cc 0f       	add	r28, r28
 1b8:	dd 1f       	adc	r29, r29
 1ba:	c5 59       	subi	r28, 0x95	; 149
 1bc:	de 4f       	sbci	r29, 0xFE	; 254
 1be:	88 81       	ld	r24, Y
 1c0:	99 81       	ldd	r25, Y+1	; 0x01
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <getLight+0x50>
	} else {
		return "Foute meetwaarde";
 1c4:	8e e0       	ldi	r24, 0x0E	; 14
 1c6:	91 e0       	ldi	r25, 0x01	; 1
	}
}
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <getNumericLightValue>:

int getNumericLightValue()
{
	int sensorValue = readAdc(0)/128;
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 35 02 	call	0x46a	; 0x46a <readAdc>
	
	return sensorValue;
 1d6:	99 23       	and	r25, r25
 1d8:	14 f4       	brge	.+4      	; 0x1de <getNumericLightValue+0x10>
 1da:	81 58       	subi	r24, 0x81	; 129
 1dc:	9f 4f       	sbci	r25, 0xFF	; 255
 1de:	88 0f       	add	r24, r24
 1e0:	89 2f       	mov	r24, r25
 1e2:	88 1f       	adc	r24, r24
 1e4:	99 0b       	sbc	r25, r25
 1e6:	08 95       	ret

000001e8 <panelUp>:

int panel_is_down = 0;

int panelUp()
{
	if (panel_is_down) {
 1e8:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <__data_end>
 1ec:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <__data_end+0x1>
 1f0:	89 2b       	or	r24, r25
 1f2:	e1 f0       	breq	.+56     	; 0x22c <panelUp+0x44>
		//clear red light first
		PORTB &= ~(1 << 0);
 1f4:	28 98       	cbi	0x05, 0	; 5
		int i;
		PORTB |= 1 << 1; //set green led
 1f6:	29 9a       	sbi	0x05, 1	; 5
 1f8:	25 e0       	ldi	r18, 0x05	; 5
 1fa:	30 e0       	ldi	r19, 0x00	; 0
		
		//toggle yellow led
		for (i = 0; i < 5; i ++) {
			PORTB ^= 1 << 2;
 1fc:	94 e0       	ldi	r25, 0x04	; 4
 1fe:	85 b1       	in	r24, 0x05	; 5
 200:	89 27       	eor	r24, r25
 202:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 204:	4f ef       	ldi	r20, 0xFF	; 255
 206:	53 ed       	ldi	r21, 0xD3	; 211
 208:	80 e3       	ldi	r24, 0x30	; 48
 20a:	41 50       	subi	r20, 0x01	; 1
 20c:	50 40       	sbci	r21, 0x00	; 0
 20e:	80 40       	sbci	r24, 0x00	; 0
 210:	e1 f7       	brne	.-8      	; 0x20a <panelUp+0x22>
 212:	00 c0       	rjmp	.+0      	; 0x214 <panelUp+0x2c>
 214:	00 00       	nop
 216:	21 50       	subi	r18, 0x01	; 1
 218:	31 09       	sbc	r19, r1
		PORTB &= ~(1 << 0);
		int i;
		PORTB |= 1 << 1; //set green led
		
		//toggle yellow led
		for (i = 0; i < 5; i ++) {
 21a:	89 f7       	brne	.-30     	; 0x1fe <panelUp+0x16>
			PORTB ^= 1 << 2;
			_delay_ms(1000);
		}
		
		PORTB &= ~(1 << 2);
 21c:	2a 98       	cbi	0x05, 2	; 5
		panel_is_down = 0;
 21e:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <__data_end+0x1>
 222:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <__data_end>
		
		return 0;
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	08 95       	ret
	}
	
	return 1;
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
}
 230:	08 95       	ret

00000232 <panelDown>:

int panelDown()
{
	if (!panel_is_down) {
 232:	60 91 90 01 	lds	r22, 0x0190	; 0x800190 <__data_end>
 236:	70 91 91 01 	lds	r23, 0x0191	; 0x800191 <__data_end+0x1>
 23a:	61 15       	cp	r22, r1
 23c:	71 05       	cpc	r23, r1
 23e:	e1 f4       	brne	.+56     	; 0x278 <panelDown+0x46>
		//clear green light first
		PORTB &= ~(1 << 1);
 240:	29 98       	cbi	0x05, 1	; 5
		int i;
		PORTB |= 1 << 0; //set red led
 242:	28 9a       	sbi	0x05, 0	; 5
 244:	25 e0       	ldi	r18, 0x05	; 5
 246:	30 e0       	ldi	r19, 0x00	; 0
		
		//toggle yellow led
		for (i = 0; i < 5; i ++) {
			PORTB ^= 1 << 2;
 248:	44 e0       	ldi	r20, 0x04	; 4
 24a:	95 b1       	in	r25, 0x05	; 5
 24c:	94 27       	eor	r25, r20
 24e:	95 b9       	out	0x05, r25	; 5
 250:	5f ef       	ldi	r21, 0xFF	; 255
 252:	83 ed       	ldi	r24, 0xD3	; 211
 254:	90 e3       	ldi	r25, 0x30	; 48
 256:	51 50       	subi	r21, 0x01	; 1
 258:	80 40       	sbci	r24, 0x00	; 0
 25a:	90 40       	sbci	r25, 0x00	; 0
 25c:	e1 f7       	brne	.-8      	; 0x256 <panelDown+0x24>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <panelDown+0x2e>
 260:	00 00       	nop
 262:	21 50       	subi	r18, 0x01	; 1
 264:	31 09       	sbc	r19, r1
		PORTB &= ~(1 << 1);
		int i;
		PORTB |= 1 << 0; //set red led
		
		//toggle yellow led
		for (i = 0; i < 5; i ++) {
 266:	89 f7       	brne	.-30     	; 0x24a <panelDown+0x18>
			PORTB ^= 1 << 2;
			_delay_ms(1000);
		}
		
		PORTB &= ~(1 << 2);
 268:	2a 98       	cbi	0x05, 2	; 5
		panel_is_down = 1;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <__data_end+0x1>
 272:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <__data_end>
		
		return 0;
 276:	02 c0       	rjmp	.+4      	; 0x27c <panelDown+0x4a>
	}
	
	return 1;
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	70 e0       	ldi	r23, 0x00	; 0
}
 27c:	cb 01       	movw	r24, r22
 27e:	08 95       	ret

00000280 <initPanel>:

void initPanel()
{
	//first set the B port with leds
	DDRB = 0x7;
 280:	87 e0       	ldi	r24, 0x07	; 7
 282:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x7;
 284:	85 b9       	out	0x05, r24	; 5
 286:	2f ef       	ldi	r18, 0xFF	; 255
 288:	83 ec       	ldi	r24, 0xC3	; 195
 28a:	99 e0       	ldi	r25, 0x09	; 9
 28c:	21 50       	subi	r18, 0x01	; 1
 28e:	80 40       	sbci	r24, 0x00	; 0
 290:	90 40       	sbci	r25, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <initPanel+0xc>
 294:	00 c0       	rjmp	.+0      	; 0x296 <initPanel+0x16>
 296:	00 00       	nop
	_delay_ms(200);
	PORTB = 0x1;
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	85 b9       	out	0x05, r24	; 5
 29c:	08 95       	ret

0000029e <SCH_Add_Task>:
 
-*------------------------------------------------------------------*/

void SCH_Start(void)
{
      sei();
 29e:	0f 93       	push	r16
 2a0:	1f 93       	push	r17
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	8c 01       	movw	r16, r24
 2a8:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <SCH_tasks_G>
 2ac:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <SCH_tasks_G+0x1>
 2b0:	89 2b       	or	r24, r25
 2b2:	81 f0       	breq	.+32     	; 0x2d4 <SCH_Add_Task+0x36>
 2b4:	e9 e9       	ldi	r30, 0x99	; 153
 2b6:	f1 e0       	ldi	r31, 0x01	; 1
 2b8:	21 e0       	ldi	r18, 0x01	; 1
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	82 2f       	mov	r24, r18
 2be:	e9 01       	movw	r28, r18
 2c0:	a7 81       	ldd	r26, Z+7	; 0x07
 2c2:	b0 85       	ldd	r27, Z+8	; 0x08
 2c4:	2f 5f       	subi	r18, 0xFF	; 255
 2c6:	3f 4f       	sbci	r19, 0xFF	; 255
 2c8:	37 96       	adiw	r30, 0x07	; 7
 2ca:	ab 2b       	or	r26, r27
 2cc:	b9 f7       	brne	.-18     	; 0x2bc <SCH_Add_Task+0x1e>
 2ce:	85 30       	cpi	r24, 0x05	; 5
 2d0:	21 f4       	brne	.+8      	; 0x2da <SCH_Add_Task+0x3c>
 2d2:	15 c0       	rjmp	.+42     	; 0x2fe <SCH_Add_Task+0x60>
 2d4:	c0 e0       	ldi	r28, 0x00	; 0
 2d6:	d0 e0       	ldi	r29, 0x00	; 0
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	fe 01       	movw	r30, r28
 2dc:	ee 0f       	add	r30, r30
 2de:	ff 1f       	adc	r31, r31
 2e0:	ee 0f       	add	r30, r30
 2e2:	ff 1f       	adc	r31, r31
 2e4:	ee 0f       	add	r30, r30
 2e6:	ff 1f       	adc	r31, r31
 2e8:	ec 1b       	sub	r30, r28
 2ea:	fd 0b       	sbc	r31, r29
 2ec:	e7 56       	subi	r30, 0x67	; 103
 2ee:	fe 4f       	sbci	r31, 0xFE	; 254
 2f0:	11 83       	std	Z+1, r17	; 0x01
 2f2:	00 83       	st	Z, r16
 2f4:	73 83       	std	Z+3, r23	; 0x03
 2f6:	62 83       	std	Z+2, r22	; 0x02
 2f8:	55 83       	std	Z+5, r21	; 0x05
 2fa:	44 83       	std	Z+4, r20	; 0x04
 2fc:	16 82       	std	Z+6, r1	; 0x06
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	1f 91       	pop	r17
 304:	0f 91       	pop	r16
 306:	08 95       	ret

00000308 <SCH_Delete_Task>:
 308:	27 e0       	ldi	r18, 0x07	; 7
 30a:	82 9f       	mul	r24, r18
 30c:	c0 01       	movw	r24, r0
 30e:	11 24       	eor	r1, r1
 310:	fc 01       	movw	r30, r24
 312:	e7 56       	subi	r30, 0x67	; 103
 314:	fe 4f       	sbci	r31, 0xFE	; 254
 316:	11 82       	std	Z+1, r1	; 0x01
 318:	10 82       	st	Z, r1
 31a:	13 82       	std	Z+3, r1	; 0x03
 31c:	12 82       	std	Z+2, r1	; 0x02
 31e:	15 82       	std	Z+5, r1	; 0x05
 320:	14 82       	std	Z+4, r1	; 0x04
 322:	16 82       	std	Z+6, r1	; 0x06
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	08 95       	ret

00000328 <SCH_Dispatch_Tasks>:
 328:	ef 92       	push	r14
 32a:	ff 92       	push	r15
 32c:	1f 93       	push	r17
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
 332:	c9 e9       	ldi	r28, 0x99	; 153
 334:	d1 e0       	ldi	r29, 0x01	; 1
 336:	10 e0       	ldi	r17, 0x00	; 0
 338:	8e 81       	ldd	r24, Y+6	; 0x06
 33a:	88 23       	and	r24, r24
 33c:	79 f0       	breq	.+30     	; 0x35c <SCH_Dispatch_Tasks+0x34>
 33e:	e8 81       	ld	r30, Y
 340:	f9 81       	ldd	r31, Y+1	; 0x01
 342:	30 97       	sbiw	r30, 0x00	; 0
 344:	59 f0       	breq	.+22     	; 0x35c <SCH_Dispatch_Tasks+0x34>
 346:	09 95       	icall
 348:	8e 81       	ldd	r24, Y+6	; 0x06
 34a:	81 50       	subi	r24, 0x01	; 1
 34c:	8e 83       	std	Y+6, r24	; 0x06
 34e:	8c 81       	ldd	r24, Y+4	; 0x04
 350:	9d 81       	ldd	r25, Y+5	; 0x05
 352:	89 2b       	or	r24, r25
 354:	19 f4       	brne	.+6      	; 0x35c <SCH_Dispatch_Tasks+0x34>
 356:	81 2f       	mov	r24, r17
 358:	0e 94 84 01 	call	0x308	; 0x308 <SCH_Delete_Task>
 35c:	1f 5f       	subi	r17, 0xFF	; 255
 35e:	27 96       	adiw	r28, 0x07	; 7
 360:	15 30       	cpi	r17, 0x05	; 5
 362:	51 f7       	brne	.-44     	; 0x338 <SCH_Dispatch_Tasks+0x10>
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	1f 91       	pop	r17
 36a:	ff 90       	pop	r15
 36c:	ef 90       	pop	r14
 36e:	08 95       	ret

00000370 <SCH_Init_T1>:
 370:	cf 93       	push	r28
 372:	c0 e0       	ldi	r28, 0x00	; 0
 374:	8c 2f       	mov	r24, r28
 376:	0e 94 84 01 	call	0x308	; 0x308 <SCH_Delete_Task>
 37a:	cf 5f       	subi	r28, 0xFF	; 255
 37c:	c5 30       	cpi	r28, 0x05	; 5
 37e:	d1 f7       	brne	.-12     	; 0x374 <SCH_Init_T1+0x4>
 380:	81 e7       	ldi	r24, 0x71	; 113
 382:	92 e0       	ldi	r25, 0x02	; 2
 384:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 388:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 38c:	8c e0       	ldi	r24, 0x0C	; 12
 38e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 392:	82 e0       	ldi	r24, 0x02	; 2
 394:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 398:	cf 91       	pop	r28
 39a:	08 95       	ret

0000039c <__vector_11>:
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
 39c:	1f 92       	push	r1
 39e:	0f 92       	push	r0
 3a0:	0f b6       	in	r0, 0x3f	; 63
 3a2:	0f 92       	push	r0
 3a4:	11 24       	eor	r1, r1
 3a6:	2f 93       	push	r18
 3a8:	3f 93       	push	r19
 3aa:	8f 93       	push	r24
 3ac:	9f 93       	push	r25
 3ae:	af 93       	push	r26
 3b0:	bf 93       	push	r27
 3b2:	ef 93       	push	r30
 3b4:	ff 93       	push	r31
 3b6:	e9 e9       	ldi	r30, 0x99	; 153
 3b8:	f1 e0       	ldi	r31, 0x01	; 1
 3ba:	2c eb       	ldi	r18, 0xBC	; 188
 3bc:	31 e0       	ldi	r19, 0x01	; 1
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
 3be:	80 81       	ld	r24, Z
 3c0:	91 81       	ldd	r25, Z+1	; 0x01
 3c2:	89 2b       	or	r24, r25
 3c4:	91 f0       	breq	.+36     	; 0x3ea <__vector_11+0x4e>
      {
         if(SCH_tasks_G[Index].Delay == 0)
 3c6:	82 81       	ldd	r24, Z+2	; 0x02
 3c8:	93 81       	ldd	r25, Z+3	; 0x03
 3ca:	00 97       	sbiw	r24, 0x00	; 0
 3cc:	59 f4       	brne	.+22     	; 0x3e4 <__vector_11+0x48>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
 3ce:	86 81       	ldd	r24, Z+6	; 0x06
 3d0:	8f 5f       	subi	r24, 0xFF	; 255
 3d2:	86 83       	std	Z+6, r24	; 0x06

            if(SCH_tasks_G[Index].Period)
 3d4:	84 81       	ldd	r24, Z+4	; 0x04
 3d6:	95 81       	ldd	r25, Z+5	; 0x05
 3d8:	00 97       	sbiw	r24, 0x00	; 0
 3da:	39 f0       	breq	.+14     	; 0x3ea <__vector_11+0x4e>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
 3dc:	01 97       	sbiw	r24, 0x01	; 1
 3de:	93 83       	std	Z+3, r25	; 0x03
 3e0:	82 83       	std	Z+2, r24	; 0x02
 3e2:	03 c0       	rjmp	.+6      	; 0x3ea <__vector_11+0x4e>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
 3e4:	01 97       	sbiw	r24, 0x01	; 1
 3e6:	93 83       	std	Z+3, r25	; 0x03
 3e8:	82 83       	std	Z+2, r24	; 0x02
 3ea:	37 96       	adiw	r30, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 3ec:	e2 17       	cp	r30, r18
 3ee:	f3 07       	cpc	r31, r19
 3f0:	31 f7       	brne	.-52     	; 0x3be <__vector_11+0x22>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
 3f2:	ff 91       	pop	r31
 3f4:	ef 91       	pop	r30
 3f6:	bf 91       	pop	r27
 3f8:	af 91       	pop	r26
 3fa:	9f 91       	pop	r25
 3fc:	8f 91       	pop	r24
 3fe:	3f 91       	pop	r19
 400:	2f 91       	pop	r18
 402:	0f 90       	pop	r0
 404:	0f be       	out	0x3f, r0	; 63
 406:	0f 90       	pop	r0
 408:	1f 90       	pop	r1
 40a:	18 95       	reti

0000040c <ser_init>:

FILE uart_output = FDEV_SETUP_STREAM(ser_stdio_putchar, NULL, _FDEV_SETUP_WRITE);

void ser_init() {
	// set the baud rate
	UBRR0H = 0;
 40c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBBRVAL;
 410:	87 e6       	ldi	r24, 0x67	; 103
 412:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	// disable U2X mode
	UCSR0A = 0;
 416:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	// enable TX and RX
	UCSR0B = _BV(TXEN0) | _BV(RXEN0);
 41a:	88 e1       	ldi	r24, 0x18	; 24
 41c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
 420:	86 e0       	ldi	r24, 0x06	; 6
 422:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	// Setup stdout
	stdout=&uart_output;
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	91 e0       	ldi	r25, 0x01	; 1
 42a:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <__iob+0x3>
 42e:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <__iob+0x2>
 432:	08 95       	ret

00000434 <ser_transmit>:

// Low level transmit
void ser_transmit(uint8_t data) {
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
 434:	e0 ec       	ldi	r30, 0xC0	; 192
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	90 81       	ld	r25, Z
 43a:	95 ff       	sbrs	r25, 5
 43c:	fd cf       	rjmp	.-6      	; 0x438 <ser_transmit+0x4>
	// send the data
	UDR0 = data;
 43e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 442:	08 95       	ret

00000444 <ser_stdio_putchar>:
 
#define BAUD 9600UL
#define UBBRVAL ((F_CPU+BAUD*8)/(BAUD*16)-1)  

// Getchar en putchar tbv. stdio.h
void ser_stdio_putchar(char c, FILE *stream) {
 444:	cf 93       	push	r28
 446:	c8 2f       	mov	r28, r24
	if (c=='\n') {
 448:	8a 30       	cpi	r24, 0x0A	; 10
 44a:	19 f4       	brne	.+6      	; 0x452 <ser_stdio_putchar+0xe>
		ser_transmit('\r');
 44c:	8d e0       	ldi	r24, 0x0D	; 13
 44e:	0e 94 1a 02 	call	0x434	; 0x434 <ser_transmit>
	}
	ser_transmit(c);
 452:	8c 2f       	mov	r24, r28
 454:	0e 94 1a 02 	call	0x434	; 0x434 <ser_transmit>
}
 458:	cf 91       	pop	r28
 45a:	08 95       	ret

0000045c <adc_init>:
// C-reference: http://pubs.opengroup.org/onlinepubs/9699919799/
// Hier kun je oa. een beschrijving van de functies printf en atoi vinden.

void adc_init(void)
{
	ADMUX = (1<<REFS0);     //select AVCC as reference
 45c:	80 e4       	ldi	r24, 0x40	; 64
 45e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1<<ADEN) | 7;  //enable and prescale = 128 (16MHz/128 = 125kHz)
 462:	87 e8       	ldi	r24, 0x87	; 135
 464:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 468:	08 95       	ret

0000046a <readAdc>:
}

int readAdc(char chan)
{
	ADMUX	&=	0xf0;
 46a:	ec e7       	ldi	r30, 0x7C	; 124
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	90 81       	ld	r25, Z
 470:	90 7f       	andi	r25, 0xF0	; 240
 472:	90 83       	st	Z, r25
	ADMUX	|=	chan;
 474:	90 81       	ld	r25, Z
 476:	89 2b       	or	r24, r25
 478:	80 83       	st	Z, r24

	/* This starts the conversion. */
	ADCSRA |= _BV(ADSC);
 47a:	ea e7       	ldi	r30, 0x7A	; 122
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	80 81       	ld	r24, Z
 480:	80 64       	ori	r24, 0x40	; 64
 482:	80 83       	st	Z, r24
	/* This is an idle loop that just wait around until the conversion
	 * is finished.  It constantly checks ADCSRA's ADSC bit, which we just
	 * set above, to see if it is still set.  This bit is automatically
	 * reset (zeroed) when the conversion is ready so if we do this in
	 * a loop the loop will just go until the conversion is ready. */
	while ( (ADCSRA & _BV(ADSC)) );
 484:	80 81       	ld	r24, Z
 486:	86 fd       	sbrc	r24, 6
 488:	fd cf       	rjmp	.-6      	; 0x484 <readAdc+0x1a>

	/* Finally, we return the converted value to the calling function. */
	return ADC;
 48a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 48e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 492:	08 95       	ret

00000494 <main>:
	 uint16_t SRAMLightThreshold;
	 uint8_t  SRAMDeviceName[10];

	SRAMLightThreshold = eeprom_read_byte(&LightThreshold);
	
	ser_init();
 494:	0e 94 06 02 	call	0x40c	; 0x40c <ser_init>
	adc_init();
 498:	0e 94 2e 02 	call	0x45c	; 0x45c <adc_init>
	initPanel();
 49c:	0e 94 40 01 	call	0x280	; 0x280 <initPanel>
	SCH_Init_T1();
 4a0:	0e 94 b8 01 	call	0x370	; 0x370 <SCH_Init_T1>
	SCH_Add_Task(getLight, 2, 10);
 4a4:	4a e0       	ldi	r20, 0x0A	; 10
 4a6:	50 e0       	ldi	r21, 0x00	; 0
 4a8:	62 e0       	ldi	r22, 0x02	; 2
 4aa:	70 e0       	ldi	r23, 0x00	; 0
 4ac:	8c eb       	ldi	r24, 0xBC	; 188
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 4f 01 	call	0x29e	; 0x29e <SCH_Add_Task>
	SCH_Add_Task(getTemperature, 2, 10);
 4b4:	4a e0       	ldi	r20, 0x0A	; 10
 4b6:	50 e0       	ldi	r21, 0x00	; 0
 4b8:	62 e0       	ldi	r22, 0x02	; 2
 4ba:	70 e0       	ldi	r23, 0x00	; 0
 4bc:	8b e7       	ldi	r24, 0x7B	; 123
 4be:	92 e0       	ldi	r25, 0x02	; 2
 4c0:	0e 94 4f 01 	call	0x29e	; 0x29e <SCH_Add_Task>
	
	//panelDown();
	panelUp();
 4c4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <panelUp>
	
	while (1) {	
		SCH_Dispatch_Tasks();
 4c8:	0e 94 94 01 	call	0x328	; 0x328 <SCH_Dispatch_Tasks>
		//getLight();
		if (getNumericLightValue() < 7) {
 4cc:	0e 94 e7 00 	call	0x1ce	; 0x1ce <getNumericLightValue>
 4d0:	07 97       	sbiw	r24, 0x07	; 7
 4d2:	1c f4       	brge	.+6      	; 0x4da <main+0x46>
			panelDown();
 4d4:	0e 94 19 01 	call	0x232	; 0x232 <panelDown>
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <main+0x4a>
		} else {
			panelUp();
 4da:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <panelUp>
		}
		//printf("%s", getLight());
		getTemperature();
 4de:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <getTemperature>
 4e2:	2f ef       	ldi	r18, 0xFF	; 255
 4e4:	89 e6       	ldi	r24, 0x69	; 105
 4e6:	98 e1       	ldi	r25, 0x18	; 24
 4e8:	21 50       	subi	r18, 0x01	; 1
 4ea:	80 40       	sbci	r24, 0x00	; 0
 4ec:	90 40       	sbci	r25, 0x00	; 0
 4ee:	e1 f7       	brne	.-8      	; 0x4e8 <main+0x54>
 4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <main+0x5e>
 4f2:	00 00       	nop
 4f4:	e9 cf       	rjmp	.-46     	; 0x4c8 <main+0x34>

000004f6 <getTemperature>:
	int sensorInput;    //The variable we will use to store the sensor input
	double temp;        //The variable we will use to store temperature in degrees.


	// put your main code here, to run repeatedly:
	sensorInput = readAdc(4);    //read the analog sensor and store it
 4f6:	84 e0       	ldi	r24, 0x04	; 4
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	0e 94 35 02 	call	0x46a	; 0x46a <readAdc>
	temp = temp * 5;                 //multiply by 5V to get voltage
	temp = (double)sensorInput / 1024;       //find percentage of input reading
	temp = temp - 0.5;               //Subtract the offset
	temp = temp * 100;               //Convert to degrees

	printf("Temperatuur: %i \n \r", (int)sensorInput);
 4fe:	9f 93       	push	r25
 500:	8f 93       	push	r24
 502:	8b e7       	ldi	r24, 0x7B	; 123
 504:	91 e0       	ldi	r25, 0x01	; 1
 506:	9f 93       	push	r25
 508:	8f 93       	push	r24
 50a:	0e 94 9b 02 	call	0x536	; 0x536 <printf>
}
 50e:	0f 90       	pop	r0
 510:	0f 90       	pop	r0
 512:	0f 90       	pop	r0
 514:	0f 90       	pop	r0
 516:	08 95       	ret

00000518 <__umulhisi3>:
 518:	a2 9f       	mul	r26, r18
 51a:	b0 01       	movw	r22, r0
 51c:	b3 9f       	mul	r27, r19
 51e:	c0 01       	movw	r24, r0
 520:	a3 9f       	mul	r26, r19
 522:	70 0d       	add	r23, r0
 524:	81 1d       	adc	r24, r1
 526:	11 24       	eor	r1, r1
 528:	91 1d       	adc	r25, r1
 52a:	b2 9f       	mul	r27, r18
 52c:	70 0d       	add	r23, r0
 52e:	81 1d       	adc	r24, r1
 530:	11 24       	eor	r1, r1
 532:	91 1d       	adc	r25, r1
 534:	08 95       	ret

00000536 <printf>:
 536:	a0 e0       	ldi	r26, 0x00	; 0
 538:	b0 e0       	ldi	r27, 0x00	; 0
 53a:	e1 ea       	ldi	r30, 0xA1	; 161
 53c:	f2 e0       	ldi	r31, 0x02	; 2
 53e:	0c 94 52 05 	jmp	0xaa4	; 0xaa4 <__prologue_saves__+0x20>
 542:	ae 01       	movw	r20, r28
 544:	4b 5f       	subi	r20, 0xFB	; 251
 546:	5f 4f       	sbci	r21, 0xFF	; 255
 548:	fa 01       	movw	r30, r20
 54a:	61 91       	ld	r22, Z+
 54c:	71 91       	ld	r23, Z+
 54e:	af 01       	movw	r20, r30
 550:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <__iob+0x2>
 554:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <__iob+0x3>
 558:	0e 94 b1 02 	call	0x562	; 0x562 <vfprintf>
 55c:	e2 e0       	ldi	r30, 0x02	; 2
 55e:	0c 94 6e 05 	jmp	0xadc	; 0xadc <__epilogue_restores__+0x20>

00000562 <vfprintf>:
 562:	ab e0       	ldi	r26, 0x0B	; 11
 564:	b0 e0       	ldi	r27, 0x00	; 0
 566:	e7 eb       	ldi	r30, 0xB7	; 183
 568:	f2 e0       	ldi	r31, 0x02	; 2
 56a:	0c 94 42 05 	jmp	0xa84	; 0xa84 <__prologue_saves__>
 56e:	6c 01       	movw	r12, r24
 570:	7b 01       	movw	r14, r22
 572:	8a 01       	movw	r16, r20
 574:	fc 01       	movw	r30, r24
 576:	17 82       	std	Z+7, r1	; 0x07
 578:	16 82       	std	Z+6, r1	; 0x06
 57a:	83 81       	ldd	r24, Z+3	; 0x03
 57c:	81 ff       	sbrs	r24, 1
 57e:	cc c1       	rjmp	.+920    	; 0x918 <__stack+0x19>
 580:	ce 01       	movw	r24, r28
 582:	01 96       	adiw	r24, 0x01	; 1
 584:	3c 01       	movw	r6, r24
 586:	f6 01       	movw	r30, r12
 588:	93 81       	ldd	r25, Z+3	; 0x03
 58a:	f7 01       	movw	r30, r14
 58c:	93 fd       	sbrc	r25, 3
 58e:	85 91       	lpm	r24, Z+
 590:	93 ff       	sbrs	r25, 3
 592:	81 91       	ld	r24, Z+
 594:	7f 01       	movw	r14, r30
 596:	88 23       	and	r24, r24
 598:	09 f4       	brne	.+2      	; 0x59c <vfprintf+0x3a>
 59a:	ba c1       	rjmp	.+884    	; 0x910 <__stack+0x11>
 59c:	85 32       	cpi	r24, 0x25	; 37
 59e:	39 f4       	brne	.+14     	; 0x5ae <vfprintf+0x4c>
 5a0:	93 fd       	sbrc	r25, 3
 5a2:	85 91       	lpm	r24, Z+
 5a4:	93 ff       	sbrs	r25, 3
 5a6:	81 91       	ld	r24, Z+
 5a8:	7f 01       	movw	r14, r30
 5aa:	85 32       	cpi	r24, 0x25	; 37
 5ac:	29 f4       	brne	.+10     	; 0x5b8 <vfprintf+0x56>
 5ae:	b6 01       	movw	r22, r12
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	0e 94 a8 04 	call	0x950	; 0x950 <fputc>
 5b6:	e7 cf       	rjmp	.-50     	; 0x586 <vfprintf+0x24>
 5b8:	91 2c       	mov	r9, r1
 5ba:	21 2c       	mov	r2, r1
 5bc:	31 2c       	mov	r3, r1
 5be:	ff e1       	ldi	r31, 0x1F	; 31
 5c0:	f3 15       	cp	r31, r3
 5c2:	d8 f0       	brcs	.+54     	; 0x5fa <vfprintf+0x98>
 5c4:	8b 32       	cpi	r24, 0x2B	; 43
 5c6:	79 f0       	breq	.+30     	; 0x5e6 <vfprintf+0x84>
 5c8:	38 f4       	brcc	.+14     	; 0x5d8 <vfprintf+0x76>
 5ca:	80 32       	cpi	r24, 0x20	; 32
 5cc:	79 f0       	breq	.+30     	; 0x5ec <vfprintf+0x8a>
 5ce:	83 32       	cpi	r24, 0x23	; 35
 5d0:	a1 f4       	brne	.+40     	; 0x5fa <vfprintf+0x98>
 5d2:	23 2d       	mov	r18, r3
 5d4:	20 61       	ori	r18, 0x10	; 16
 5d6:	1d c0       	rjmp	.+58     	; 0x612 <vfprintf+0xb0>
 5d8:	8d 32       	cpi	r24, 0x2D	; 45
 5da:	61 f0       	breq	.+24     	; 0x5f4 <vfprintf+0x92>
 5dc:	80 33       	cpi	r24, 0x30	; 48
 5de:	69 f4       	brne	.+26     	; 0x5fa <vfprintf+0x98>
 5e0:	23 2d       	mov	r18, r3
 5e2:	21 60       	ori	r18, 0x01	; 1
 5e4:	16 c0       	rjmp	.+44     	; 0x612 <vfprintf+0xb0>
 5e6:	83 2d       	mov	r24, r3
 5e8:	82 60       	ori	r24, 0x02	; 2
 5ea:	38 2e       	mov	r3, r24
 5ec:	e3 2d       	mov	r30, r3
 5ee:	e4 60       	ori	r30, 0x04	; 4
 5f0:	3e 2e       	mov	r3, r30
 5f2:	2a c0       	rjmp	.+84     	; 0x648 <vfprintf+0xe6>
 5f4:	f3 2d       	mov	r31, r3
 5f6:	f8 60       	ori	r31, 0x08	; 8
 5f8:	1d c0       	rjmp	.+58     	; 0x634 <vfprintf+0xd2>
 5fa:	37 fc       	sbrc	r3, 7
 5fc:	2d c0       	rjmp	.+90     	; 0x658 <vfprintf+0xf6>
 5fe:	20 ed       	ldi	r18, 0xD0	; 208
 600:	28 0f       	add	r18, r24
 602:	2a 30       	cpi	r18, 0x0A	; 10
 604:	40 f0       	brcs	.+16     	; 0x616 <vfprintf+0xb4>
 606:	8e 32       	cpi	r24, 0x2E	; 46
 608:	b9 f4       	brne	.+46     	; 0x638 <vfprintf+0xd6>
 60a:	36 fc       	sbrc	r3, 6
 60c:	81 c1       	rjmp	.+770    	; 0x910 <__stack+0x11>
 60e:	23 2d       	mov	r18, r3
 610:	20 64       	ori	r18, 0x40	; 64
 612:	32 2e       	mov	r3, r18
 614:	19 c0       	rjmp	.+50     	; 0x648 <vfprintf+0xe6>
 616:	36 fe       	sbrs	r3, 6
 618:	06 c0       	rjmp	.+12     	; 0x626 <vfprintf+0xc4>
 61a:	8a e0       	ldi	r24, 0x0A	; 10
 61c:	98 9e       	mul	r9, r24
 61e:	20 0d       	add	r18, r0
 620:	11 24       	eor	r1, r1
 622:	92 2e       	mov	r9, r18
 624:	11 c0       	rjmp	.+34     	; 0x648 <vfprintf+0xe6>
 626:	ea e0       	ldi	r30, 0x0A	; 10
 628:	2e 9e       	mul	r2, r30
 62a:	20 0d       	add	r18, r0
 62c:	11 24       	eor	r1, r1
 62e:	22 2e       	mov	r2, r18
 630:	f3 2d       	mov	r31, r3
 632:	f0 62       	ori	r31, 0x20	; 32
 634:	3f 2e       	mov	r3, r31
 636:	08 c0       	rjmp	.+16     	; 0x648 <vfprintf+0xe6>
 638:	8c 36       	cpi	r24, 0x6C	; 108
 63a:	21 f4       	brne	.+8      	; 0x644 <vfprintf+0xe2>
 63c:	83 2d       	mov	r24, r3
 63e:	80 68       	ori	r24, 0x80	; 128
 640:	38 2e       	mov	r3, r24
 642:	02 c0       	rjmp	.+4      	; 0x648 <vfprintf+0xe6>
 644:	88 36       	cpi	r24, 0x68	; 104
 646:	41 f4       	brne	.+16     	; 0x658 <vfprintf+0xf6>
 648:	f7 01       	movw	r30, r14
 64a:	93 fd       	sbrc	r25, 3
 64c:	85 91       	lpm	r24, Z+
 64e:	93 ff       	sbrs	r25, 3
 650:	81 91       	ld	r24, Z+
 652:	7f 01       	movw	r14, r30
 654:	81 11       	cpse	r24, r1
 656:	b3 cf       	rjmp	.-154    	; 0x5be <vfprintf+0x5c>
 658:	98 2f       	mov	r25, r24
 65a:	9f 7d       	andi	r25, 0xDF	; 223
 65c:	95 54       	subi	r25, 0x45	; 69
 65e:	93 30       	cpi	r25, 0x03	; 3
 660:	28 f4       	brcc	.+10     	; 0x66c <vfprintf+0x10a>
 662:	0c 5f       	subi	r16, 0xFC	; 252
 664:	1f 4f       	sbci	r17, 0xFF	; 255
 666:	9f e3       	ldi	r25, 0x3F	; 63
 668:	99 83       	std	Y+1, r25	; 0x01
 66a:	0d c0       	rjmp	.+26     	; 0x686 <vfprintf+0x124>
 66c:	83 36       	cpi	r24, 0x63	; 99
 66e:	31 f0       	breq	.+12     	; 0x67c <vfprintf+0x11a>
 670:	83 37       	cpi	r24, 0x73	; 115
 672:	71 f0       	breq	.+28     	; 0x690 <vfprintf+0x12e>
 674:	83 35       	cpi	r24, 0x53	; 83
 676:	09 f0       	breq	.+2      	; 0x67a <vfprintf+0x118>
 678:	59 c0       	rjmp	.+178    	; 0x72c <vfprintf+0x1ca>
 67a:	21 c0       	rjmp	.+66     	; 0x6be <vfprintf+0x15c>
 67c:	f8 01       	movw	r30, r16
 67e:	80 81       	ld	r24, Z
 680:	89 83       	std	Y+1, r24	; 0x01
 682:	0e 5f       	subi	r16, 0xFE	; 254
 684:	1f 4f       	sbci	r17, 0xFF	; 255
 686:	88 24       	eor	r8, r8
 688:	83 94       	inc	r8
 68a:	91 2c       	mov	r9, r1
 68c:	53 01       	movw	r10, r6
 68e:	13 c0       	rjmp	.+38     	; 0x6b6 <vfprintf+0x154>
 690:	28 01       	movw	r4, r16
 692:	f2 e0       	ldi	r31, 0x02	; 2
 694:	4f 0e       	add	r4, r31
 696:	51 1c       	adc	r5, r1
 698:	f8 01       	movw	r30, r16
 69a:	a0 80       	ld	r10, Z
 69c:	b1 80       	ldd	r11, Z+1	; 0x01
 69e:	36 fe       	sbrs	r3, 6
 6a0:	03 c0       	rjmp	.+6      	; 0x6a8 <vfprintf+0x146>
 6a2:	69 2d       	mov	r22, r9
 6a4:	70 e0       	ldi	r23, 0x00	; 0
 6a6:	02 c0       	rjmp	.+4      	; 0x6ac <vfprintf+0x14a>
 6a8:	6f ef       	ldi	r22, 0xFF	; 255
 6aa:	7f ef       	ldi	r23, 0xFF	; 255
 6ac:	c5 01       	movw	r24, r10
 6ae:	0e 94 9d 04 	call	0x93a	; 0x93a <strnlen>
 6b2:	4c 01       	movw	r8, r24
 6b4:	82 01       	movw	r16, r4
 6b6:	f3 2d       	mov	r31, r3
 6b8:	ff 77       	andi	r31, 0x7F	; 127
 6ba:	3f 2e       	mov	r3, r31
 6bc:	16 c0       	rjmp	.+44     	; 0x6ea <vfprintf+0x188>
 6be:	28 01       	movw	r4, r16
 6c0:	22 e0       	ldi	r18, 0x02	; 2
 6c2:	42 0e       	add	r4, r18
 6c4:	51 1c       	adc	r5, r1
 6c6:	f8 01       	movw	r30, r16
 6c8:	a0 80       	ld	r10, Z
 6ca:	b1 80       	ldd	r11, Z+1	; 0x01
 6cc:	36 fe       	sbrs	r3, 6
 6ce:	03 c0       	rjmp	.+6      	; 0x6d6 <vfprintf+0x174>
 6d0:	69 2d       	mov	r22, r9
 6d2:	70 e0       	ldi	r23, 0x00	; 0
 6d4:	02 c0       	rjmp	.+4      	; 0x6da <vfprintf+0x178>
 6d6:	6f ef       	ldi	r22, 0xFF	; 255
 6d8:	7f ef       	ldi	r23, 0xFF	; 255
 6da:	c5 01       	movw	r24, r10
 6dc:	0e 94 92 04 	call	0x924	; 0x924 <strnlen_P>
 6e0:	4c 01       	movw	r8, r24
 6e2:	f3 2d       	mov	r31, r3
 6e4:	f0 68       	ori	r31, 0x80	; 128
 6e6:	3f 2e       	mov	r3, r31
 6e8:	82 01       	movw	r16, r4
 6ea:	33 fc       	sbrc	r3, 3
 6ec:	1b c0       	rjmp	.+54     	; 0x724 <vfprintf+0x1c2>
 6ee:	82 2d       	mov	r24, r2
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	88 16       	cp	r8, r24
 6f4:	99 06       	cpc	r9, r25
 6f6:	b0 f4       	brcc	.+44     	; 0x724 <vfprintf+0x1c2>
 6f8:	b6 01       	movw	r22, r12
 6fa:	80 e2       	ldi	r24, 0x20	; 32
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	0e 94 a8 04 	call	0x950	; 0x950 <fputc>
 702:	2a 94       	dec	r2
 704:	f4 cf       	rjmp	.-24     	; 0x6ee <vfprintf+0x18c>
 706:	f5 01       	movw	r30, r10
 708:	37 fc       	sbrc	r3, 7
 70a:	85 91       	lpm	r24, Z+
 70c:	37 fe       	sbrs	r3, 7
 70e:	81 91       	ld	r24, Z+
 710:	5f 01       	movw	r10, r30
 712:	b6 01       	movw	r22, r12
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	0e 94 a8 04 	call	0x950	; 0x950 <fputc>
 71a:	21 10       	cpse	r2, r1
 71c:	2a 94       	dec	r2
 71e:	21 e0       	ldi	r18, 0x01	; 1
 720:	82 1a       	sub	r8, r18
 722:	91 08       	sbc	r9, r1
 724:	81 14       	cp	r8, r1
 726:	91 04       	cpc	r9, r1
 728:	71 f7       	brne	.-36     	; 0x706 <vfprintf+0x1a4>
 72a:	e8 c0       	rjmp	.+464    	; 0x8fc <vfprintf+0x39a>
 72c:	84 36       	cpi	r24, 0x64	; 100
 72e:	11 f0       	breq	.+4      	; 0x734 <vfprintf+0x1d2>
 730:	89 36       	cpi	r24, 0x69	; 105
 732:	41 f5       	brne	.+80     	; 0x784 <vfprintf+0x222>
 734:	f8 01       	movw	r30, r16
 736:	37 fe       	sbrs	r3, 7
 738:	07 c0       	rjmp	.+14     	; 0x748 <vfprintf+0x1e6>
 73a:	60 81       	ld	r22, Z
 73c:	71 81       	ldd	r23, Z+1	; 0x01
 73e:	82 81       	ldd	r24, Z+2	; 0x02
 740:	93 81       	ldd	r25, Z+3	; 0x03
 742:	0c 5f       	subi	r16, 0xFC	; 252
 744:	1f 4f       	sbci	r17, 0xFF	; 255
 746:	08 c0       	rjmp	.+16     	; 0x758 <vfprintf+0x1f6>
 748:	60 81       	ld	r22, Z
 74a:	71 81       	ldd	r23, Z+1	; 0x01
 74c:	07 2e       	mov	r0, r23
 74e:	00 0c       	add	r0, r0
 750:	88 0b       	sbc	r24, r24
 752:	99 0b       	sbc	r25, r25
 754:	0e 5f       	subi	r16, 0xFE	; 254
 756:	1f 4f       	sbci	r17, 0xFF	; 255
 758:	f3 2d       	mov	r31, r3
 75a:	ff 76       	andi	r31, 0x6F	; 111
 75c:	3f 2e       	mov	r3, r31
 75e:	97 ff       	sbrs	r25, 7
 760:	09 c0       	rjmp	.+18     	; 0x774 <vfprintf+0x212>
 762:	90 95       	com	r25
 764:	80 95       	com	r24
 766:	70 95       	com	r23
 768:	61 95       	neg	r22
 76a:	7f 4f       	sbci	r23, 0xFF	; 255
 76c:	8f 4f       	sbci	r24, 0xFF	; 255
 76e:	9f 4f       	sbci	r25, 0xFF	; 255
 770:	f0 68       	ori	r31, 0x80	; 128
 772:	3f 2e       	mov	r3, r31
 774:	2a e0       	ldi	r18, 0x0A	; 10
 776:	30 e0       	ldi	r19, 0x00	; 0
 778:	a3 01       	movw	r20, r6
 77a:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__ultoa_invert>
 77e:	88 2e       	mov	r8, r24
 780:	86 18       	sub	r8, r6
 782:	45 c0       	rjmp	.+138    	; 0x80e <vfprintf+0x2ac>
 784:	85 37       	cpi	r24, 0x75	; 117
 786:	31 f4       	brne	.+12     	; 0x794 <vfprintf+0x232>
 788:	23 2d       	mov	r18, r3
 78a:	2f 7e       	andi	r18, 0xEF	; 239
 78c:	b2 2e       	mov	r11, r18
 78e:	2a e0       	ldi	r18, 0x0A	; 10
 790:	30 e0       	ldi	r19, 0x00	; 0
 792:	25 c0       	rjmp	.+74     	; 0x7de <vfprintf+0x27c>
 794:	93 2d       	mov	r25, r3
 796:	99 7f       	andi	r25, 0xF9	; 249
 798:	b9 2e       	mov	r11, r25
 79a:	8f 36       	cpi	r24, 0x6F	; 111
 79c:	c1 f0       	breq	.+48     	; 0x7ce <vfprintf+0x26c>
 79e:	18 f4       	brcc	.+6      	; 0x7a6 <vfprintf+0x244>
 7a0:	88 35       	cpi	r24, 0x58	; 88
 7a2:	79 f0       	breq	.+30     	; 0x7c2 <vfprintf+0x260>
 7a4:	b5 c0       	rjmp	.+362    	; 0x910 <__stack+0x11>
 7a6:	80 37       	cpi	r24, 0x70	; 112
 7a8:	19 f0       	breq	.+6      	; 0x7b0 <vfprintf+0x24e>
 7aa:	88 37       	cpi	r24, 0x78	; 120
 7ac:	21 f0       	breq	.+8      	; 0x7b6 <vfprintf+0x254>
 7ae:	b0 c0       	rjmp	.+352    	; 0x910 <__stack+0x11>
 7b0:	e9 2f       	mov	r30, r25
 7b2:	e0 61       	ori	r30, 0x10	; 16
 7b4:	be 2e       	mov	r11, r30
 7b6:	b4 fe       	sbrs	r11, 4
 7b8:	0d c0       	rjmp	.+26     	; 0x7d4 <vfprintf+0x272>
 7ba:	fb 2d       	mov	r31, r11
 7bc:	f4 60       	ori	r31, 0x04	; 4
 7be:	bf 2e       	mov	r11, r31
 7c0:	09 c0       	rjmp	.+18     	; 0x7d4 <vfprintf+0x272>
 7c2:	34 fe       	sbrs	r3, 4
 7c4:	0a c0       	rjmp	.+20     	; 0x7da <vfprintf+0x278>
 7c6:	29 2f       	mov	r18, r25
 7c8:	26 60       	ori	r18, 0x06	; 6
 7ca:	b2 2e       	mov	r11, r18
 7cc:	06 c0       	rjmp	.+12     	; 0x7da <vfprintf+0x278>
 7ce:	28 e0       	ldi	r18, 0x08	; 8
 7d0:	30 e0       	ldi	r19, 0x00	; 0
 7d2:	05 c0       	rjmp	.+10     	; 0x7de <vfprintf+0x27c>
 7d4:	20 e1       	ldi	r18, 0x10	; 16
 7d6:	30 e0       	ldi	r19, 0x00	; 0
 7d8:	02 c0       	rjmp	.+4      	; 0x7de <vfprintf+0x27c>
 7da:	20 e1       	ldi	r18, 0x10	; 16
 7dc:	32 e0       	ldi	r19, 0x02	; 2
 7de:	f8 01       	movw	r30, r16
 7e0:	b7 fe       	sbrs	r11, 7
 7e2:	07 c0       	rjmp	.+14     	; 0x7f2 <vfprintf+0x290>
 7e4:	60 81       	ld	r22, Z
 7e6:	71 81       	ldd	r23, Z+1	; 0x01
 7e8:	82 81       	ldd	r24, Z+2	; 0x02
 7ea:	93 81       	ldd	r25, Z+3	; 0x03
 7ec:	0c 5f       	subi	r16, 0xFC	; 252
 7ee:	1f 4f       	sbci	r17, 0xFF	; 255
 7f0:	06 c0       	rjmp	.+12     	; 0x7fe <vfprintf+0x29c>
 7f2:	60 81       	ld	r22, Z
 7f4:	71 81       	ldd	r23, Z+1	; 0x01
 7f6:	80 e0       	ldi	r24, 0x00	; 0
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	0e 5f       	subi	r16, 0xFE	; 254
 7fc:	1f 4f       	sbci	r17, 0xFF	; 255
 7fe:	a3 01       	movw	r20, r6
 800:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__ultoa_invert>
 804:	88 2e       	mov	r8, r24
 806:	86 18       	sub	r8, r6
 808:	fb 2d       	mov	r31, r11
 80a:	ff 77       	andi	r31, 0x7F	; 127
 80c:	3f 2e       	mov	r3, r31
 80e:	36 fe       	sbrs	r3, 6
 810:	0d c0       	rjmp	.+26     	; 0x82c <vfprintf+0x2ca>
 812:	23 2d       	mov	r18, r3
 814:	2e 7f       	andi	r18, 0xFE	; 254
 816:	a2 2e       	mov	r10, r18
 818:	89 14       	cp	r8, r9
 81a:	58 f4       	brcc	.+22     	; 0x832 <vfprintf+0x2d0>
 81c:	34 fe       	sbrs	r3, 4
 81e:	0b c0       	rjmp	.+22     	; 0x836 <vfprintf+0x2d4>
 820:	32 fc       	sbrc	r3, 2
 822:	09 c0       	rjmp	.+18     	; 0x836 <vfprintf+0x2d4>
 824:	83 2d       	mov	r24, r3
 826:	8e 7e       	andi	r24, 0xEE	; 238
 828:	a8 2e       	mov	r10, r24
 82a:	05 c0       	rjmp	.+10     	; 0x836 <vfprintf+0x2d4>
 82c:	b8 2c       	mov	r11, r8
 82e:	a3 2c       	mov	r10, r3
 830:	03 c0       	rjmp	.+6      	; 0x838 <vfprintf+0x2d6>
 832:	b8 2c       	mov	r11, r8
 834:	01 c0       	rjmp	.+2      	; 0x838 <vfprintf+0x2d6>
 836:	b9 2c       	mov	r11, r9
 838:	a4 fe       	sbrs	r10, 4
 83a:	0f c0       	rjmp	.+30     	; 0x85a <vfprintf+0x2f8>
 83c:	fe 01       	movw	r30, r28
 83e:	e8 0d       	add	r30, r8
 840:	f1 1d       	adc	r31, r1
 842:	80 81       	ld	r24, Z
 844:	80 33       	cpi	r24, 0x30	; 48
 846:	21 f4       	brne	.+8      	; 0x850 <vfprintf+0x2ee>
 848:	9a 2d       	mov	r25, r10
 84a:	99 7e       	andi	r25, 0xE9	; 233
 84c:	a9 2e       	mov	r10, r25
 84e:	09 c0       	rjmp	.+18     	; 0x862 <vfprintf+0x300>
 850:	a2 fe       	sbrs	r10, 2
 852:	06 c0       	rjmp	.+12     	; 0x860 <vfprintf+0x2fe>
 854:	b3 94       	inc	r11
 856:	b3 94       	inc	r11
 858:	04 c0       	rjmp	.+8      	; 0x862 <vfprintf+0x300>
 85a:	8a 2d       	mov	r24, r10
 85c:	86 78       	andi	r24, 0x86	; 134
 85e:	09 f0       	breq	.+2      	; 0x862 <vfprintf+0x300>
 860:	b3 94       	inc	r11
 862:	a3 fc       	sbrc	r10, 3
 864:	11 c0       	rjmp	.+34     	; 0x888 <vfprintf+0x326>
 866:	a0 fe       	sbrs	r10, 0
 868:	06 c0       	rjmp	.+12     	; 0x876 <vfprintf+0x314>
 86a:	b2 14       	cp	r11, r2
 86c:	88 f4       	brcc	.+34     	; 0x890 <vfprintf+0x32e>
 86e:	28 0c       	add	r2, r8
 870:	92 2c       	mov	r9, r2
 872:	9b 18       	sub	r9, r11
 874:	0e c0       	rjmp	.+28     	; 0x892 <vfprintf+0x330>
 876:	b2 14       	cp	r11, r2
 878:	60 f4       	brcc	.+24     	; 0x892 <vfprintf+0x330>
 87a:	b6 01       	movw	r22, r12
 87c:	80 e2       	ldi	r24, 0x20	; 32
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	0e 94 a8 04 	call	0x950	; 0x950 <fputc>
 884:	b3 94       	inc	r11
 886:	f7 cf       	rjmp	.-18     	; 0x876 <vfprintf+0x314>
 888:	b2 14       	cp	r11, r2
 88a:	18 f4       	brcc	.+6      	; 0x892 <vfprintf+0x330>
 88c:	2b 18       	sub	r2, r11
 88e:	02 c0       	rjmp	.+4      	; 0x894 <vfprintf+0x332>
 890:	98 2c       	mov	r9, r8
 892:	21 2c       	mov	r2, r1
 894:	a4 fe       	sbrs	r10, 4
 896:	10 c0       	rjmp	.+32     	; 0x8b8 <vfprintf+0x356>
 898:	b6 01       	movw	r22, r12
 89a:	80 e3       	ldi	r24, 0x30	; 48
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	0e 94 a8 04 	call	0x950	; 0x950 <fputc>
 8a2:	a2 fe       	sbrs	r10, 2
 8a4:	17 c0       	rjmp	.+46     	; 0x8d4 <vfprintf+0x372>
 8a6:	a1 fc       	sbrc	r10, 1
 8a8:	03 c0       	rjmp	.+6      	; 0x8b0 <vfprintf+0x34e>
 8aa:	88 e7       	ldi	r24, 0x78	; 120
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <vfprintf+0x352>
 8b0:	88 e5       	ldi	r24, 0x58	; 88
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	b6 01       	movw	r22, r12
 8b6:	0c c0       	rjmp	.+24     	; 0x8d0 <vfprintf+0x36e>
 8b8:	8a 2d       	mov	r24, r10
 8ba:	86 78       	andi	r24, 0x86	; 134
 8bc:	59 f0       	breq	.+22     	; 0x8d4 <vfprintf+0x372>
 8be:	a1 fe       	sbrs	r10, 1
 8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <vfprintf+0x364>
 8c2:	8b e2       	ldi	r24, 0x2B	; 43
 8c4:	01 c0       	rjmp	.+2      	; 0x8c8 <vfprintf+0x366>
 8c6:	80 e2       	ldi	r24, 0x20	; 32
 8c8:	a7 fc       	sbrc	r10, 7
 8ca:	8d e2       	ldi	r24, 0x2D	; 45
 8cc:	b6 01       	movw	r22, r12
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	0e 94 a8 04 	call	0x950	; 0x950 <fputc>
 8d4:	89 14       	cp	r8, r9
 8d6:	38 f4       	brcc	.+14     	; 0x8e6 <vfprintf+0x384>
 8d8:	b6 01       	movw	r22, r12
 8da:	80 e3       	ldi	r24, 0x30	; 48
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	0e 94 a8 04 	call	0x950	; 0x950 <fputc>
 8e2:	9a 94       	dec	r9
 8e4:	f7 cf       	rjmp	.-18     	; 0x8d4 <vfprintf+0x372>
 8e6:	8a 94       	dec	r8
 8e8:	f3 01       	movw	r30, r6
 8ea:	e8 0d       	add	r30, r8
 8ec:	f1 1d       	adc	r31, r1
 8ee:	80 81       	ld	r24, Z
 8f0:	b6 01       	movw	r22, r12
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	0e 94 a8 04 	call	0x950	; 0x950 <fputc>
 8f8:	81 10       	cpse	r8, r1
 8fa:	f5 cf       	rjmp	.-22     	; 0x8e6 <vfprintf+0x384>
 8fc:	22 20       	and	r2, r2
 8fe:	09 f4       	brne	.+2      	; 0x902 <__stack+0x3>
 900:	42 ce       	rjmp	.-892    	; 0x586 <vfprintf+0x24>
 902:	b6 01       	movw	r22, r12
 904:	80 e2       	ldi	r24, 0x20	; 32
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	0e 94 a8 04 	call	0x950	; 0x950 <fputc>
 90c:	2a 94       	dec	r2
 90e:	f6 cf       	rjmp	.-20     	; 0x8fc <vfprintf+0x39a>
 910:	f6 01       	movw	r30, r12
 912:	86 81       	ldd	r24, Z+6	; 0x06
 914:	97 81       	ldd	r25, Z+7	; 0x07
 916:	02 c0       	rjmp	.+4      	; 0x91c <__stack+0x1d>
 918:	8f ef       	ldi	r24, 0xFF	; 255
 91a:	9f ef       	ldi	r25, 0xFF	; 255
 91c:	2b 96       	adiw	r28, 0x0b	; 11
 91e:	e2 e1       	ldi	r30, 0x12	; 18
 920:	0c 94 5e 05 	jmp	0xabc	; 0xabc <__epilogue_restores__>

00000924 <strnlen_P>:
 924:	fc 01       	movw	r30, r24
 926:	05 90       	lpm	r0, Z+
 928:	61 50       	subi	r22, 0x01	; 1
 92a:	70 40       	sbci	r23, 0x00	; 0
 92c:	01 10       	cpse	r0, r1
 92e:	d8 f7       	brcc	.-10     	; 0x926 <strnlen_P+0x2>
 930:	80 95       	com	r24
 932:	90 95       	com	r25
 934:	8e 0f       	add	r24, r30
 936:	9f 1f       	adc	r25, r31
 938:	08 95       	ret

0000093a <strnlen>:
 93a:	fc 01       	movw	r30, r24
 93c:	61 50       	subi	r22, 0x01	; 1
 93e:	70 40       	sbci	r23, 0x00	; 0
 940:	01 90       	ld	r0, Z+
 942:	01 10       	cpse	r0, r1
 944:	d8 f7       	brcc	.-10     	; 0x93c <strnlen+0x2>
 946:	80 95       	com	r24
 948:	90 95       	com	r25
 94a:	8e 0f       	add	r24, r30
 94c:	9f 1f       	adc	r25, r31
 94e:	08 95       	ret

00000950 <fputc>:
 950:	0f 93       	push	r16
 952:	1f 93       	push	r17
 954:	cf 93       	push	r28
 956:	df 93       	push	r29
 958:	fb 01       	movw	r30, r22
 95a:	23 81       	ldd	r18, Z+3	; 0x03
 95c:	21 fd       	sbrc	r18, 1
 95e:	03 c0       	rjmp	.+6      	; 0x966 <fputc+0x16>
 960:	8f ef       	ldi	r24, 0xFF	; 255
 962:	9f ef       	ldi	r25, 0xFF	; 255
 964:	2c c0       	rjmp	.+88     	; 0x9be <fputc+0x6e>
 966:	22 ff       	sbrs	r18, 2
 968:	16 c0       	rjmp	.+44     	; 0x996 <fputc+0x46>
 96a:	46 81       	ldd	r20, Z+6	; 0x06
 96c:	57 81       	ldd	r21, Z+7	; 0x07
 96e:	24 81       	ldd	r18, Z+4	; 0x04
 970:	35 81       	ldd	r19, Z+5	; 0x05
 972:	42 17       	cp	r20, r18
 974:	53 07       	cpc	r21, r19
 976:	44 f4       	brge	.+16     	; 0x988 <fputc+0x38>
 978:	a0 81       	ld	r26, Z
 97a:	b1 81       	ldd	r27, Z+1	; 0x01
 97c:	9d 01       	movw	r18, r26
 97e:	2f 5f       	subi	r18, 0xFF	; 255
 980:	3f 4f       	sbci	r19, 0xFF	; 255
 982:	31 83       	std	Z+1, r19	; 0x01
 984:	20 83       	st	Z, r18
 986:	8c 93       	st	X, r24
 988:	26 81       	ldd	r18, Z+6	; 0x06
 98a:	37 81       	ldd	r19, Z+7	; 0x07
 98c:	2f 5f       	subi	r18, 0xFF	; 255
 98e:	3f 4f       	sbci	r19, 0xFF	; 255
 990:	37 83       	std	Z+7, r19	; 0x07
 992:	26 83       	std	Z+6, r18	; 0x06
 994:	14 c0       	rjmp	.+40     	; 0x9be <fputc+0x6e>
 996:	8b 01       	movw	r16, r22
 998:	ec 01       	movw	r28, r24
 99a:	fb 01       	movw	r30, r22
 99c:	00 84       	ldd	r0, Z+8	; 0x08
 99e:	f1 85       	ldd	r31, Z+9	; 0x09
 9a0:	e0 2d       	mov	r30, r0
 9a2:	09 95       	icall
 9a4:	89 2b       	or	r24, r25
 9a6:	e1 f6       	brne	.-72     	; 0x960 <fputc+0x10>
 9a8:	d8 01       	movw	r26, r16
 9aa:	16 96       	adiw	r26, 0x06	; 6
 9ac:	8d 91       	ld	r24, X+
 9ae:	9c 91       	ld	r25, X
 9b0:	17 97       	sbiw	r26, 0x07	; 7
 9b2:	01 96       	adiw	r24, 0x01	; 1
 9b4:	17 96       	adiw	r26, 0x07	; 7
 9b6:	9c 93       	st	X, r25
 9b8:	8e 93       	st	-X, r24
 9ba:	16 97       	sbiw	r26, 0x06	; 6
 9bc:	ce 01       	movw	r24, r28
 9be:	df 91       	pop	r29
 9c0:	cf 91       	pop	r28
 9c2:	1f 91       	pop	r17
 9c4:	0f 91       	pop	r16
 9c6:	08 95       	ret

000009c8 <__ultoa_invert>:
 9c8:	fa 01       	movw	r30, r20
 9ca:	aa 27       	eor	r26, r26
 9cc:	28 30       	cpi	r18, 0x08	; 8
 9ce:	51 f1       	breq	.+84     	; 0xa24 <__ultoa_invert+0x5c>
 9d0:	20 31       	cpi	r18, 0x10	; 16
 9d2:	81 f1       	breq	.+96     	; 0xa34 <__ultoa_invert+0x6c>
 9d4:	e8 94       	clt
 9d6:	6f 93       	push	r22
 9d8:	6e 7f       	andi	r22, 0xFE	; 254
 9da:	6e 5f       	subi	r22, 0xFE	; 254
 9dc:	7f 4f       	sbci	r23, 0xFF	; 255
 9de:	8f 4f       	sbci	r24, 0xFF	; 255
 9e0:	9f 4f       	sbci	r25, 0xFF	; 255
 9e2:	af 4f       	sbci	r26, 0xFF	; 255
 9e4:	b1 e0       	ldi	r27, 0x01	; 1
 9e6:	3e d0       	rcall	.+124    	; 0xa64 <__ultoa_invert+0x9c>
 9e8:	b4 e0       	ldi	r27, 0x04	; 4
 9ea:	3c d0       	rcall	.+120    	; 0xa64 <__ultoa_invert+0x9c>
 9ec:	67 0f       	add	r22, r23
 9ee:	78 1f       	adc	r23, r24
 9f0:	89 1f       	adc	r24, r25
 9f2:	9a 1f       	adc	r25, r26
 9f4:	a1 1d       	adc	r26, r1
 9f6:	68 0f       	add	r22, r24
 9f8:	79 1f       	adc	r23, r25
 9fa:	8a 1f       	adc	r24, r26
 9fc:	91 1d       	adc	r25, r1
 9fe:	a1 1d       	adc	r26, r1
 a00:	6a 0f       	add	r22, r26
 a02:	71 1d       	adc	r23, r1
 a04:	81 1d       	adc	r24, r1
 a06:	91 1d       	adc	r25, r1
 a08:	a1 1d       	adc	r26, r1
 a0a:	20 d0       	rcall	.+64     	; 0xa4c <__ultoa_invert+0x84>
 a0c:	09 f4       	brne	.+2      	; 0xa10 <__ultoa_invert+0x48>
 a0e:	68 94       	set
 a10:	3f 91       	pop	r19
 a12:	2a e0       	ldi	r18, 0x0A	; 10
 a14:	26 9f       	mul	r18, r22
 a16:	11 24       	eor	r1, r1
 a18:	30 19       	sub	r19, r0
 a1a:	30 5d       	subi	r19, 0xD0	; 208
 a1c:	31 93       	st	Z+, r19
 a1e:	de f6       	brtc	.-74     	; 0x9d6 <__ultoa_invert+0xe>
 a20:	cf 01       	movw	r24, r30
 a22:	08 95       	ret
 a24:	46 2f       	mov	r20, r22
 a26:	47 70       	andi	r20, 0x07	; 7
 a28:	40 5d       	subi	r20, 0xD0	; 208
 a2a:	41 93       	st	Z+, r20
 a2c:	b3 e0       	ldi	r27, 0x03	; 3
 a2e:	0f d0       	rcall	.+30     	; 0xa4e <__ultoa_invert+0x86>
 a30:	c9 f7       	brne	.-14     	; 0xa24 <__ultoa_invert+0x5c>
 a32:	f6 cf       	rjmp	.-20     	; 0xa20 <__ultoa_invert+0x58>
 a34:	46 2f       	mov	r20, r22
 a36:	4f 70       	andi	r20, 0x0F	; 15
 a38:	40 5d       	subi	r20, 0xD0	; 208
 a3a:	4a 33       	cpi	r20, 0x3A	; 58
 a3c:	18 f0       	brcs	.+6      	; 0xa44 <__ultoa_invert+0x7c>
 a3e:	49 5d       	subi	r20, 0xD9	; 217
 a40:	31 fd       	sbrc	r19, 1
 a42:	40 52       	subi	r20, 0x20	; 32
 a44:	41 93       	st	Z+, r20
 a46:	02 d0       	rcall	.+4      	; 0xa4c <__ultoa_invert+0x84>
 a48:	a9 f7       	brne	.-22     	; 0xa34 <__ultoa_invert+0x6c>
 a4a:	ea cf       	rjmp	.-44     	; 0xa20 <__ultoa_invert+0x58>
 a4c:	b4 e0       	ldi	r27, 0x04	; 4
 a4e:	a6 95       	lsr	r26
 a50:	97 95       	ror	r25
 a52:	87 95       	ror	r24
 a54:	77 95       	ror	r23
 a56:	67 95       	ror	r22
 a58:	ba 95       	dec	r27
 a5a:	c9 f7       	brne	.-14     	; 0xa4e <__ultoa_invert+0x86>
 a5c:	00 97       	sbiw	r24, 0x00	; 0
 a5e:	61 05       	cpc	r22, r1
 a60:	71 05       	cpc	r23, r1
 a62:	08 95       	ret
 a64:	9b 01       	movw	r18, r22
 a66:	ac 01       	movw	r20, r24
 a68:	0a 2e       	mov	r0, r26
 a6a:	06 94       	lsr	r0
 a6c:	57 95       	ror	r21
 a6e:	47 95       	ror	r20
 a70:	37 95       	ror	r19
 a72:	27 95       	ror	r18
 a74:	ba 95       	dec	r27
 a76:	c9 f7       	brne	.-14     	; 0xa6a <__ultoa_invert+0xa2>
 a78:	62 0f       	add	r22, r18
 a7a:	73 1f       	adc	r23, r19
 a7c:	84 1f       	adc	r24, r20
 a7e:	95 1f       	adc	r25, r21
 a80:	a0 1d       	adc	r26, r0
 a82:	08 95       	ret

00000a84 <__prologue_saves__>:
 a84:	2f 92       	push	r2
 a86:	3f 92       	push	r3
 a88:	4f 92       	push	r4
 a8a:	5f 92       	push	r5
 a8c:	6f 92       	push	r6
 a8e:	7f 92       	push	r7
 a90:	8f 92       	push	r8
 a92:	9f 92       	push	r9
 a94:	af 92       	push	r10
 a96:	bf 92       	push	r11
 a98:	cf 92       	push	r12
 a9a:	df 92       	push	r13
 a9c:	ef 92       	push	r14
 a9e:	ff 92       	push	r15
 aa0:	0f 93       	push	r16
 aa2:	1f 93       	push	r17
 aa4:	cf 93       	push	r28
 aa6:	df 93       	push	r29
 aa8:	cd b7       	in	r28, 0x3d	; 61
 aaa:	de b7       	in	r29, 0x3e	; 62
 aac:	ca 1b       	sub	r28, r26
 aae:	db 0b       	sbc	r29, r27
 ab0:	0f b6       	in	r0, 0x3f	; 63
 ab2:	f8 94       	cli
 ab4:	de bf       	out	0x3e, r29	; 62
 ab6:	0f be       	out	0x3f, r0	; 63
 ab8:	cd bf       	out	0x3d, r28	; 61
 aba:	09 94       	ijmp

00000abc <__epilogue_restores__>:
 abc:	2a 88       	ldd	r2, Y+18	; 0x12
 abe:	39 88       	ldd	r3, Y+17	; 0x11
 ac0:	48 88       	ldd	r4, Y+16	; 0x10
 ac2:	5f 84       	ldd	r5, Y+15	; 0x0f
 ac4:	6e 84       	ldd	r6, Y+14	; 0x0e
 ac6:	7d 84       	ldd	r7, Y+13	; 0x0d
 ac8:	8c 84       	ldd	r8, Y+12	; 0x0c
 aca:	9b 84       	ldd	r9, Y+11	; 0x0b
 acc:	aa 84       	ldd	r10, Y+10	; 0x0a
 ace:	b9 84       	ldd	r11, Y+9	; 0x09
 ad0:	c8 84       	ldd	r12, Y+8	; 0x08
 ad2:	df 80       	ldd	r13, Y+7	; 0x07
 ad4:	ee 80       	ldd	r14, Y+6	; 0x06
 ad6:	fd 80       	ldd	r15, Y+5	; 0x05
 ad8:	0c 81       	ldd	r16, Y+4	; 0x04
 ada:	1b 81       	ldd	r17, Y+3	; 0x03
 adc:	aa 81       	ldd	r26, Y+2	; 0x02
 ade:	b9 81       	ldd	r27, Y+1	; 0x01
 ae0:	ce 0f       	add	r28, r30
 ae2:	d1 1d       	adc	r29, r1
 ae4:	0f b6       	in	r0, 0x3f	; 63
 ae6:	f8 94       	cli
 ae8:	de bf       	out	0x3e, r29	; 62
 aea:	0f be       	out	0x3f, r0	; 63
 aec:	cd bf       	out	0x3d, r28	; 61
 aee:	ed 01       	movw	r28, r26
 af0:	08 95       	ret

00000af2 <_exit>:
 af2:	f8 94       	cli

00000af4 <__stop_program>:
 af4:	ff cf       	rjmp	.-2      	; 0xaf4 <__stop_program>
