
serial_connection.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ca  00800100  0000146a  0000151e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000146a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000034  008002ca  008002ca  000016e8  2**0
                  ALLOC
  3 .eeprom       00000017  00810000  00810000  000016e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  000016ff  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000175c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000260  00000000  00000000  000017a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002453  00000000  00000000  00001a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000dce  00000000  00000000  00003e53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001187  00000000  00000000  00004c21  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000554  00000000  00000000  00005da8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000086d  00000000  00000000  000062fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001135  00000000  00000000  00006b69  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000180  00000000  00000000  00007c9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 19 01 	jmp	0x232	; 0x232 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e6       	ldi	r30, 0x6A	; 106
      7c:	f4 e1       	ldi	r31, 0x14	; 20
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 3c       	cpi	r26, 0xCA	; 202
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	aa ec       	ldi	r26, 0xCA	; 202
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ae 3f       	cpi	r26, 0xFE	; 254
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 71 05 	call	0xae2	; 0xae2 <main>
      9e:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_16>:
uint16_t timer_value;
int distance_cm;
uint8_t error;

ISR (TIMER0_OVF_vect)
{
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	0f b6       	in	r0, 0x3f	; 63
      ac:	0f 92       	push	r0
      ae:	11 24       	eor	r1, r1
      b0:	8f 93       	push	r24
      b2:	9f 93       	push	r25
	if(rising_edge==1) //Check if there was echo
      b4:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <rising_edge>
      b8:	81 30       	cpi	r24, 0x01	; 1
      ba:	99 f4       	brne	.+38     	; 0xe2 <__vector_16+0x3c>
	{
		timer_value++;
      bc:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <timer_value>
      c0:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <timer_value+0x1>
      c4:	01 96       	adiw	r24, 0x01	; 1
      c6:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <timer_value+0x1>
      ca:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <timer_value>
		/*Check if isnt out of range*/
		if(timer_value > 91)
      ce:	8c 35       	cpi	r24, 0x5C	; 92
      d0:	91 05       	cpc	r25, r1
      d2:	38 f0       	brcs	.+14     	; 0xe2 <__vector_16+0x3c>
		{
			working = 0;
      d4:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <working>
			rising_edge = 0;
      d8:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <rising_edge>
			error = 1;
      dc:	81 e0       	ldi	r24, 0x01	; 1
      de:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <error>
		}
	}
}
      e2:	9f 91       	pop	r25
      e4:	8f 91       	pop	r24
      e6:	0f 90       	pop	r0
      e8:	0f be       	out	0x3f, r0	; 63
      ea:	0f 90       	pop	r0
      ec:	1f 90       	pop	r1
      ee:	18 95       	reti

000000f0 <__vector_2>:
ISR (INT1_vect)
{
      f0:	1f 92       	push	r1
      f2:	0f 92       	push	r0
      f4:	0f b6       	in	r0, 0x3f	; 63
      f6:	0f 92       	push	r0
      f8:	11 24       	eor	r1, r1
      fa:	2f 93       	push	r18
      fc:	3f 93       	push	r19
      fe:	6f 93       	push	r22
     100:	7f 93       	push	r23
     102:	8f 93       	push	r24
     104:	9f 93       	push	r25
     106:	af 93       	push	r26
     108:	bf 93       	push	r27
	if(working==1) //Check if echo is high, start timer
     10a:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <working>
     10e:	81 30       	cpi	r24, 0x01	; 1
     110:	31 f5       	brne	.+76     	; 0x15e <__vector_2+0x6e>
	{
		if(rising_edge==0)
     112:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <rising_edge>
     116:	81 11       	cpse	r24, r1
     118:	09 c0       	rjmp	.+18     	; 0x12c <__vector_2+0x3c>
		{
			rising_edge=1;
     11a:	81 e0       	ldi	r24, 0x01	; 1
     11c:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <rising_edge>
			TCNT0 = 0;
     120:	16 bc       	out	0x26, r1	; 38
			timer_value = 0;
     122:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <timer_value+0x1>
     126:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <timer_value>
     12a:	19 c0       	rjmp	.+50     	; 0x15e <__vector_2+0x6e>
		}
		else //Check if echo turned low, calculate distance
		{
			rising_edge = 0;
     12c:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <rising_edge>
			distance_cm = (timer_value*256 + TCNT0)/58;
     130:	86 b5       	in	r24, 0x26	; 38
     132:	20 e0       	ldi	r18, 0x00	; 0
     134:	30 e0       	ldi	r19, 0x00	; 0
     136:	30 91 cd 02 	lds	r19, 0x02CD	; 0x8002cd <timer_value>
     13a:	28 0f       	add	r18, r24
     13c:	31 1d       	adc	r19, r1
     13e:	af e9       	ldi	r26, 0x9F	; 159
     140:	b6 e4       	ldi	r27, 0x46	; 70
     142:	0e 94 8a 05 	call	0xb14	; 0xb14 <__umulhisi3>
     146:	92 95       	swap	r25
     148:	82 95       	swap	r24
     14a:	8f 70       	andi	r24, 0x0F	; 15
     14c:	89 27       	eor	r24, r25
     14e:	9f 70       	andi	r25, 0x0F	; 15
     150:	89 27       	eor	r24, r25
     152:	90 93 d2 02 	sts	0x02D2, r25	; 0x8002d2 <distance_cm+0x1>
     156:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <distance_cm>
			working = 0;
     15a:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <working>
		}
	}
}
     15e:	bf 91       	pop	r27
     160:	af 91       	pop	r26
     162:	9f 91       	pop	r25
     164:	8f 91       	pop	r24
     166:	7f 91       	pop	r23
     168:	6f 91       	pop	r22
     16a:	3f 91       	pop	r19
     16c:	2f 91       	pop	r18
     16e:	0f 90       	pop	r0
     170:	0f be       	out	0x3f, r0	; 63
     172:	0f 90       	pop	r0
     174:	1f 90       	pop	r1
     176:	18 95       	reti

00000178 <SCH_Add_Task>:
         {
            SCH_Delete_Task(Index);
         }
      }
   }
}
     178:	0f 93       	push	r16
     17a:	1f 93       	push	r17
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	8c 01       	movw	r16, r24
     182:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <SCH_tasks_G>
     186:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <SCH_tasks_G+0x1>
     18a:	89 2b       	or	r24, r25
     18c:	81 f0       	breq	.+32     	; 0x1ae <SCH_Add_Task+0x36>
     18e:	e3 ed       	ldi	r30, 0xD3	; 211
     190:	f2 e0       	ldi	r31, 0x02	; 2
     192:	21 e0       	ldi	r18, 0x01	; 1
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	82 2f       	mov	r24, r18
     198:	e9 01       	movw	r28, r18
     19a:	a7 81       	ldd	r26, Z+7	; 0x07
     19c:	b0 85       	ldd	r27, Z+8	; 0x08
     19e:	2f 5f       	subi	r18, 0xFF	; 255
     1a0:	3f 4f       	sbci	r19, 0xFF	; 255
     1a2:	37 96       	adiw	r30, 0x07	; 7
     1a4:	ab 2b       	or	r26, r27
     1a6:	b9 f7       	brne	.-18     	; 0x196 <SCH_Add_Task+0x1e>
     1a8:	85 30       	cpi	r24, 0x05	; 5
     1aa:	21 f4       	brne	.+8      	; 0x1b4 <SCH_Add_Task+0x3c>
     1ac:	15 c0       	rjmp	.+42     	; 0x1d8 <SCH_Add_Task+0x60>
     1ae:	c0 e0       	ldi	r28, 0x00	; 0
     1b0:	d0 e0       	ldi	r29, 0x00	; 0
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	fe 01       	movw	r30, r28
     1b6:	ee 0f       	add	r30, r30
     1b8:	ff 1f       	adc	r31, r31
     1ba:	ee 0f       	add	r30, r30
     1bc:	ff 1f       	adc	r31, r31
     1be:	ee 0f       	add	r30, r30
     1c0:	ff 1f       	adc	r31, r31
     1c2:	ec 1b       	sub	r30, r28
     1c4:	fd 0b       	sbc	r31, r29
     1c6:	ed 52       	subi	r30, 0x2D	; 45
     1c8:	fd 4f       	sbci	r31, 0xFD	; 253
     1ca:	11 83       	std	Z+1, r17	; 0x01
     1cc:	00 83       	st	Z, r16
     1ce:	73 83       	std	Z+3, r23	; 0x03
     1d0:	62 83       	std	Z+2, r22	; 0x02
     1d2:	55 83       	std	Z+5, r21	; 0x05
     1d4:	44 83       	std	Z+4, r20	; 0x04
     1d6:	16 82       	std	Z+6, r1	; 0x06
     1d8:	df 91       	pop	r29
     1da:	cf 91       	pop	r28
     1dc:	1f 91       	pop	r17
     1de:	0f 91       	pop	r16
     1e0:	08 95       	ret

000001e2 <SCH_Delete_Task>:
     1e2:	27 e0       	ldi	r18, 0x07	; 7
     1e4:	82 9f       	mul	r24, r18
     1e6:	c0 01       	movw	r24, r0
     1e8:	11 24       	eor	r1, r1
     1ea:	fc 01       	movw	r30, r24
     1ec:	ed 52       	subi	r30, 0x2D	; 45
     1ee:	fd 4f       	sbci	r31, 0xFD	; 253
     1f0:	11 82       	std	Z+1, r1	; 0x01
     1f2:	10 82       	st	Z, r1
     1f4:	13 82       	std	Z+3, r1	; 0x03
     1f6:	12 82       	std	Z+2, r1	; 0x02
     1f8:	15 82       	std	Z+5, r1	; 0x05
     1fa:	14 82       	std	Z+4, r1	; 0x04
     1fc:	16 82       	std	Z+6, r1	; 0x06
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	08 95       	ret

00000202 <SCH_Init_T1>:
  You must call this function before using the scheduler.  

-*------------------------------------------------------------------*/

void SCH_Init_T1(void)
{
     202:	cf 93       	push	r28
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
     204:	c0 e0       	ldi	r28, 0x00	; 0
   {
      SCH_Delete_Task(i);
     206:	8c 2f       	mov	r24, r28
     208:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <SCH_Delete_Task>

void SCH_Init_T1(void)
{
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
     20c:	cf 5f       	subi	r28, 0xFF	; 255
     20e:	c5 30       	cpi	r28, 0x05	; 5
     210:	d1 f7       	brne	.-12     	; 0x206 <SCH_Init_T1+0x4>

   // Set up Timer 1
   // Values for 1ms and 10ms ticks are provided for various crystals

   // Hier moet de timer periode worden aangepast ....!
   OCR1A = (uint16_t)625;   		     // 10ms = (256/16.000.000) * 625
     212:	81 e7       	ldi	r24, 0x71	; 113
     214:	92 e0       	ldi	r25, 0x02	; 2
     216:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     21a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
   TCCR1B = (1 << CS12) | (1 << WGM12);  // prescale op 64, top counter = value OCR1A (CTC mode)
     21e:	8c e0       	ldi	r24, 0x0C	; 12
     220:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
   TIMSK1 = 1 << OCIE1A;   		     // Timer 1 Output Compare A Match Interrupt Enable
     224:	82 e0       	ldi	r24, 0x02	; 2
     226:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
}
     22a:	cf 91       	pop	r28
     22c:	08 95       	ret

0000022e <SCH_Start>:
 
-*------------------------------------------------------------------*/

void SCH_Start(void)
{
      sei();
     22e:	78 94       	sei
     230:	08 95       	ret

00000232 <__vector_11>:
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
     232:	1f 92       	push	r1
     234:	0f 92       	push	r0
     236:	0f b6       	in	r0, 0x3f	; 63
     238:	0f 92       	push	r0
     23a:	11 24       	eor	r1, r1
     23c:	2f 93       	push	r18
     23e:	3f 93       	push	r19
     240:	8f 93       	push	r24
     242:	9f 93       	push	r25
     244:	af 93       	push	r26
     246:	bf 93       	push	r27
     248:	ef 93       	push	r30
     24a:	ff 93       	push	r31
     24c:	e3 ed       	ldi	r30, 0xD3	; 211
     24e:	f2 e0       	ldi	r31, 0x02	; 2
     250:	26 ef       	ldi	r18, 0xF6	; 246
     252:	32 e0       	ldi	r19, 0x02	; 2
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
     254:	80 81       	ld	r24, Z
     256:	91 81       	ldd	r25, Z+1	; 0x01
     258:	89 2b       	or	r24, r25
     25a:	91 f0       	breq	.+36     	; 0x280 <__vector_11+0x4e>
      {
         if(SCH_tasks_G[Index].Delay == 0)
     25c:	82 81       	ldd	r24, Z+2	; 0x02
     25e:	93 81       	ldd	r25, Z+3	; 0x03
     260:	00 97       	sbiw	r24, 0x00	; 0
     262:	59 f4       	brne	.+22     	; 0x27a <__vector_11+0x48>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
     264:	86 81       	ldd	r24, Z+6	; 0x06
     266:	8f 5f       	subi	r24, 0xFF	; 255
     268:	86 83       	std	Z+6, r24	; 0x06

            if(SCH_tasks_G[Index].Period)
     26a:	84 81       	ldd	r24, Z+4	; 0x04
     26c:	95 81       	ldd	r25, Z+5	; 0x05
     26e:	00 97       	sbiw	r24, 0x00	; 0
     270:	39 f0       	breq	.+14     	; 0x280 <__vector_11+0x4e>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
     272:	01 97       	sbiw	r24, 0x01	; 1
     274:	93 83       	std	Z+3, r25	; 0x03
     276:	82 83       	std	Z+2, r24	; 0x02
     278:	03 c0       	rjmp	.+6      	; 0x280 <__vector_11+0x4e>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
     27a:	01 97       	sbiw	r24, 0x01	; 1
     27c:	93 83       	std	Z+3, r25	; 0x03
     27e:	82 83       	std	Z+2, r24	; 0x02
     280:	37 96       	adiw	r30, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
     282:	e2 17       	cp	r30, r18
     284:	f3 07       	cpc	r31, r19
     286:	31 f7       	brne	.-52     	; 0x254 <__vector_11+0x22>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
     288:	ff 91       	pop	r31
     28a:	ef 91       	pop	r30
     28c:	bf 91       	pop	r27
     28e:	af 91       	pop	r26
     290:	9f 91       	pop	r25
     292:	8f 91       	pop	r24
     294:	3f 91       	pop	r19
     296:	2f 91       	pop	r18
     298:	0f 90       	pop	r0
     29a:	0f be       	out	0x3f, r0	; 63
     29c:	0f 90       	pop	r0
     29e:	1f 90       	pop	r1
     2a0:	18 95       	reti

000002a2 <ser_init>:
}

void ser_writeln(char* s) {
	ser_write(s);
	ser_transmit('\r');
	ser_transmit('\n');
     2a2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     2a6:	87 e6       	ldi	r24, 0x67	; 103
     2a8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     2ac:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     2b0:	88 e1       	ldi	r24, 0x18	; 24
     2b2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     2b6:	86 e0       	ldi	r24, 0x06	; 6
     2b8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	91 e0       	ldi	r25, 0x01	; 1
     2c0:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <__iob+0x3>
     2c4:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <__iob+0x2>
     2c8:	08 95       	ret

000002ca <ser_transmit>:
     2ca:	e0 ec       	ldi	r30, 0xC0	; 192
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	90 81       	ld	r25, Z
     2d0:	95 ff       	sbrs	r25, 5
     2d2:	fd cf       	rjmp	.-6      	; 0x2ce <ser_transmit+0x4>
     2d4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     2d8:	08 95       	ret

000002da <ser_stdio_putchar>:
     2da:	cf 93       	push	r28
     2dc:	c8 2f       	mov	r28, r24
     2de:	8a 30       	cpi	r24, 0x0A	; 10
     2e0:	19 f4       	brne	.+6      	; 0x2e8 <ser_stdio_putchar+0xe>
     2e2:	8d e0       	ldi	r24, 0x0D	; 13
     2e4:	0e 94 65 01 	call	0x2ca	; 0x2ca <ser_transmit>
     2e8:	8c 2f       	mov	r24, r28
     2ea:	0e 94 65 01 	call	0x2ca	; 0x2ca <ser_transmit>
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <ser_receive>:
     2f2:	e0 ec       	ldi	r30, 0xC0	; 192
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	80 81       	ld	r24, Z
     2f8:	88 23       	and	r24, r24
     2fa:	ec f7       	brge	.-6      	; 0x2f6 <ser_receive+0x4>
     2fc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     300:	08 95       	ret

00000302 <ser_readln>:
}

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
     302:	af 92       	push	r10
     304:	bf 92       	push	r11
     306:	cf 92       	push	r12
     308:	df 92       	push	r13
     30a:	ef 92       	push	r14
     30c:	ff 92       	push	r15
     30e:	0f 93       	push	r16
     310:	1f 93       	push	r17
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	6c 01       	movw	r12, r24
     318:	d4 2f       	mov	r29, r20
     31a:	5c 01       	movw	r10, r24
	int i=0;
     31c:	00 e0       	ldi	r16, 0x00	; 0
     31e:	10 e0       	ldi	r17, 0x00	; 0
		if (echo) ser_transmit(c);
		if (c=='\r') {
			if (echo) ser_transmit('\n');
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
     320:	7b 01       	movw	r14, r22
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	e8 1a       	sub	r14, r24
     326:	f1 08       	sbc	r15, r1
// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
	int i=0;

	while(1) {
		uint8_t c = ser_receive();
     328:	0e 94 79 01 	call	0x2f2	; 0x2f2 <ser_receive>
     32c:	c8 2f       	mov	r28, r24
		if (echo) ser_transmit(c);
     32e:	d1 11       	cpse	r29, r1
     330:	0e 94 65 01 	call	0x2ca	; 0x2ca <ser_transmit>
		if (c=='\r') {
     334:	cd 30       	cpi	r28, 0x0D	; 13
     336:	31 f4       	brne	.+12     	; 0x344 <ser_readln+0x42>
			if (echo) ser_transmit('\n');
     338:	dd 23       	and	r29, r29
     33a:	69 f0       	breq	.+26     	; 0x356 <ser_readln+0x54>
     33c:	8a e0       	ldi	r24, 0x0A	; 10
     33e:	0e 94 65 01 	call	0x2ca	; 0x2ca <ser_transmit>
     342:	09 c0       	rjmp	.+18     	; 0x356 <ser_readln+0x54>
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
     344:	0e 15       	cp	r16, r14
     346:	1f 05       	cpc	r17, r15
     348:	7c f7       	brge	.-34     	; 0x328 <ser_readln+0x26>
			buf[i++]=c;
     34a:	0f 5f       	subi	r16, 0xFF	; 255
     34c:	1f 4f       	sbci	r17, 0xFF	; 255
     34e:	f5 01       	movw	r30, r10
     350:	c1 93       	st	Z+, r28
     352:	5f 01       	movw	r10, r30
     354:	e9 cf       	rjmp	.-46     	; 0x328 <ser_readln+0x26>
		}
	}
	buf[i]='\0';
     356:	f6 01       	movw	r30, r12
     358:	e0 0f       	add	r30, r16
     35a:	f1 1f       	adc	r31, r17
     35c:	10 82       	st	Z, r1
}
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	1f 91       	pop	r17
     364:	0f 91       	pop	r16
     366:	ff 90       	pop	r15
     368:	ef 90       	pop	r14
     36a:	df 90       	pop	r13
     36c:	cf 90       	pop	r12
     36e:	bf 90       	pop	r11
     370:	af 90       	pop	r10
     372:	08 95       	ret

00000374 <initEEPROM>:
int getNumericLightValue()
{
	int sensorValue = readLight()/128;
	
	return sensorValue;
}
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	28 97       	sbiw	r28, 0x08	; 8
     37e:	0f b6       	in	r0, 0x3f	; 63
     380:	f8 94       	cli
     382:	de bf       	out	0x3e, r29	; 62
     384:	0f be       	out	0x3f, r0	; 63
     386:	cd bf       	out	0x3d, r28	; 61
     388:	84 e0       	ldi	r24, 0x04	; 4
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0e 94 9c 09 	call	0x1338	; 0x1338 <eeprom_read_word>
     390:	88 23       	and	r24, r24
     392:	09 f4       	brne	.+2      	; 0x396 <initEEPROM+0x22>
     394:	41 c0       	rjmp	.+130    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     396:	88 e0       	ldi	r24, 0x08	; 8
     398:	ee e0       	ldi	r30, 0x0E	; 14
     39a:	f1 e0       	ldi	r31, 0x01	; 1
     39c:	de 01       	movw	r26, r28
     39e:	11 96       	adiw	r26, 0x01	; 1
     3a0:	01 90       	ld	r0, Z+
     3a2:	0d 92       	st	X+, r0
     3a4:	8a 95       	dec	r24
     3a6:	e1 f7       	brne	.-8      	; 0x3a0 <initEEPROM+0x2c>
     3a8:	4a e0       	ldi	r20, 0x0A	; 10
     3aa:	50 e0       	ldi	r21, 0x00	; 0
     3ac:	6d e0       	ldi	r22, 0x0D	; 13
     3ae:	70 e0       	ldi	r23, 0x00	; 0
     3b0:	ce 01       	movw	r24, r28
     3b2:	01 96       	adiw	r24, 0x01	; 1
     3b4:	0e 94 a2 09 	call	0x1344	; 0x1344 <eeprom_write_block>
     3b8:	61 e0       	ldi	r22, 0x01	; 1
     3ba:	70 e0       	ldi	r23, 0x00	; 0
     3bc:	82 e0       	ldi	r24, 0x02	; 2
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	0e 94 ba 09 	call	0x1374	; 0x1374 <eeprom_write_word>
     3c4:	60 e0       	ldi	r22, 0x00	; 0
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	89 e0       	ldi	r24, 0x09	; 9
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	0e 94 ba 09 	call	0x1374	; 0x1374 <eeprom_write_word>
     3d0:	60 e5       	ldi	r22, 0x50	; 80
     3d2:	70 e0       	ldi	r23, 0x00	; 0
     3d4:	8b e0       	ldi	r24, 0x0B	; 11
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	0e 94 ba 09 	call	0x1374	; 0x1374 <eeprom_write_word>
     3dc:	6f ed       	ldi	r22, 0xDF	; 223
     3de:	70 e0       	ldi	r23, 0x00	; 0
     3e0:	87 e0       	ldi	r24, 0x07	; 7
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	0e 94 ba 09 	call	0x1374	; 0x1374 <eeprom_write_word>
     3e8:	6f ee       	ldi	r22, 0xEF	; 239
     3ea:	70 e0       	ldi	r23, 0x00	; 0
     3ec:	85 e0       	ldi	r24, 0x05	; 5
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	0e 94 ba 09 	call	0x1374	; 0x1374 <eeprom_write_word>
     3f4:	6f ee       	ldi	r22, 0xEF	; 239
     3f6:	70 e0       	ldi	r23, 0x00	; 0
     3f8:	85 e0       	ldi	r24, 0x05	; 5
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	0e 94 ba 09 	call	0x1374	; 0x1374 <eeprom_write_word>
     400:	66 e9       	ldi	r22, 0x96	; 150
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	0e 94 ba 09 	call	0x1374	; 0x1374 <eeprom_write_word>
     40c:	60 e0       	ldi	r22, 0x00	; 0
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	84 e0       	ldi	r24, 0x04	; 4
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	0e 94 ba 09 	call	0x1374	; 0x1374 <eeprom_write_word>
     418:	28 96       	adiw	r28, 0x08	; 8
     41a:	0f b6       	in	r0, 0x3f	; 63
     41c:	f8 94       	cli
     41e:	de bf       	out	0x3e, r29	; 62
     420:	0f be       	out	0x3f, r0	; 63
     422:	cd bf       	out	0x3d, r28	; 61
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	08 95       	ret

0000042a <setMode>:
     42a:	bc 01       	movw	r22, r24
     42c:	82 e0       	ldi	r24, 0x02	; 2
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0e 94 ba 09 	call	0x1374	; 0x1374 <eeprom_write_word>
     434:	08 95       	ret

00000436 <setTempMin>:
     436:	bc 01       	movw	r22, r24
     438:	89 e0       	ldi	r24, 0x09	; 9
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	0e 94 ba 09 	call	0x1374	; 0x1374 <eeprom_write_word>
     440:	08 95       	ret

00000442 <setTempMax>:
     442:	bc 01       	movw	r22, r24
     444:	8b e0       	ldi	r24, 0x0B	; 11
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	0e 94 ba 09 	call	0x1374	; 0x1374 <eeprom_write_word>
     44c:	08 95       	ret

0000044e <setLightMin>:
     44e:	bc 01       	movw	r22, r24
     450:	87 e0       	ldi	r24, 0x07	; 7
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	0e 94 ba 09 	call	0x1374	; 0x1374 <eeprom_write_word>
     458:	08 95       	ret

0000045a <setLightMax>:
     45a:	bc 01       	movw	r22, r24
     45c:	87 e0       	ldi	r24, 0x07	; 7
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	0e 94 ba 09 	call	0x1374	; 0x1374 <eeprom_write_word>
     464:	08 95       	ret

00000466 <setDeviceName>:
     466:	fc 01       	movw	r30, r24
     468:	01 90       	ld	r0, Z+
     46a:	00 20       	and	r0, r0
     46c:	e9 f7       	brne	.-6      	; 0x468 <setDeviceName+0x2>
     46e:	31 97       	sbiw	r30, 0x01	; 1
     470:	e8 1b       	sub	r30, r24
     472:	f9 0b       	sbc	r31, r25
     474:	3b 97       	sbiw	r30, 0x0b	; 11
     476:	4c f0       	brlt	.+18     	; 0x48a <setDeviceName+0x24>
     478:	86 e1       	ldi	r24, 0x16	; 22
     47a:	91 e0       	ldi	r25, 0x01	; 1
     47c:	9f 93       	push	r25
     47e:	8f 93       	push	r24
     480:	0e 94 db 06 	call	0xdb6	; 0xdb6 <printf>
     484:	0f 90       	pop	r0
     486:	0f 90       	pop	r0
     488:	08 95       	ret
     48a:	4a e0       	ldi	r20, 0x0A	; 10
     48c:	50 e0       	ldi	r21, 0x00	; 0
     48e:	6d e0       	ldi	r22, 0x0D	; 13
     490:	70 e0       	ldi	r23, 0x00	; 0
     492:	0e 94 a2 09 	call	0x1344	; 0x1344 <eeprom_write_block>
     496:	86 e2       	ldi	r24, 0x26	; 38
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	9f 93       	push	r25
     49c:	8f 93       	push	r24
     49e:	0e 94 db 06 	call	0xdb6	; 0xdb6 <printf>
     4a2:	0f 90       	pop	r0
     4a4:	0f 90       	pop	r0
     4a6:	08 95       	ret

000004a8 <setDistanceMax>:
     4a8:	bc 01       	movw	r22, r24
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	0e 94 ba 09 	call	0x1374	; 0x1374 <eeprom_write_word>
     4b2:	08 95       	ret

000004b4 <getDeviceName>:
     4b4:	ef 92       	push	r14
     4b6:	ff 92       	push	r15
     4b8:	0f 93       	push	r16
     4ba:	1f 93       	push	r17
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	cd b7       	in	r28, 0x3d	; 61
     4c2:	de b7       	in	r29, 0x3e	; 62
     4c4:	2a 97       	sbiw	r28, 0x0a	; 10
     4c6:	0f b6       	in	r0, 0x3f	; 63
     4c8:	f8 94       	cli
     4ca:	de bf       	out	0x3e, r29	; 62
     4cc:	0f be       	out	0x3f, r0	; 63
     4ce:	cd bf       	out	0x3d, r28	; 61
     4d0:	7c 01       	movw	r14, r24
     4d2:	8b 01       	movw	r16, r22
     4d4:	4a e0       	ldi	r20, 0x0A	; 10
     4d6:	50 e0       	ldi	r21, 0x00	; 0
     4d8:	6d e0       	ldi	r22, 0x0D	; 13
     4da:	70 e0       	ldi	r23, 0x00	; 0
     4dc:	ce 01       	movw	r24, r28
     4de:	01 96       	adiw	r24, 0x01	; 1
     4e0:	0e 94 8c 09 	call	0x1318	; 0x1318 <eeprom_read_block>
     4e4:	a8 01       	movw	r20, r16
     4e6:	41 50       	subi	r20, 0x01	; 1
     4e8:	51 09       	sbc	r21, r1
     4ea:	be 01       	movw	r22, r28
     4ec:	6f 5f       	subi	r22, 0xFF	; 255
     4ee:	7f 4f       	sbci	r23, 0xFF	; 255
     4f0:	c7 01       	movw	r24, r14
     4f2:	0e 94 cc 06 	call	0xd98	; 0xd98 <strncpy>
     4f6:	0e 0d       	add	r16, r14
     4f8:	1f 1d       	adc	r17, r15
     4fa:	f8 01       	movw	r30, r16
     4fc:	31 97       	sbiw	r30, 0x01	; 1
     4fe:	10 82       	st	Z, r1
     500:	2a 96       	adiw	r28, 0x0a	; 10
     502:	0f b6       	in	r0, 0x3f	; 63
     504:	f8 94       	cli
     506:	de bf       	out	0x3e, r29	; 62
     508:	0f be       	out	0x3f, r0	; 63
     50a:	cd bf       	out	0x3d, r28	; 61
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	1f 91       	pop	r17
     512:	0f 91       	pop	r16
     514:	ff 90       	pop	r15
     516:	ef 90       	pop	r14
     518:	08 95       	ret

0000051a <get_config>:
     51a:	4f 92       	push	r4
     51c:	5f 92       	push	r5
     51e:	6f 92       	push	r6
     520:	7f 92       	push	r7
     522:	8f 92       	push	r8
     524:	9f 92       	push	r9
     526:	af 92       	push	r10
     528:	bf 92       	push	r11
     52a:	cf 92       	push	r12
     52c:	df 92       	push	r13
     52e:	ef 92       	push	r14
     530:	ff 92       	push	r15
     532:	0f 93       	push	r16
     534:	1f 93       	push	r17
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	cd b7       	in	r28, 0x3d	; 61
     53c:	de b7       	in	r29, 0x3e	; 62
     53e:	2a 97       	sbiw	r28, 0x0a	; 10
     540:	0f b6       	in	r0, 0x3f	; 63
     542:	f8 94       	cli
     544:	de bf       	out	0x3e, r29	; 62
     546:	0f be       	out	0x3f, r0	; 63
     548:	cd bf       	out	0x3d, r28	; 61
     54a:	82 e0       	ldi	r24, 0x02	; 2
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	0e 94 9c 09 	call	0x1338	; 0x1338 <eeprom_read_word>
     552:	f8 2e       	mov	r15, r24
     554:	e9 2e       	mov	r14, r25
     556:	8b e0       	ldi	r24, 0x0B	; 11
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	0e 94 9c 09 	call	0x1338	; 0x1338 <eeprom_read_word>
     55e:	b8 2e       	mov	r11, r24
     560:	a9 2e       	mov	r10, r25
     562:	89 e0       	ldi	r24, 0x09	; 9
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	0e 94 9c 09 	call	0x1338	; 0x1338 <eeprom_read_word>
     56a:	d8 2e       	mov	r13, r24
     56c:	c9 2e       	mov	r12, r25
     56e:	85 e0       	ldi	r24, 0x05	; 5
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	0e 94 9c 09 	call	0x1338	; 0x1338 <eeprom_read_word>
     576:	78 2e       	mov	r7, r24
     578:	69 2e       	mov	r6, r25
     57a:	87 e0       	ldi	r24, 0x07	; 7
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	0e 94 9c 09 	call	0x1338	; 0x1338 <eeprom_read_word>
     582:	98 2e       	mov	r9, r24
     584:	89 2e       	mov	r8, r25
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	0e 94 9c 09 	call	0x1338	; 0x1338 <eeprom_read_word>
     58e:	58 2e       	mov	r5, r24
     590:	49 2e       	mov	r4, r25
     592:	6a e0       	ldi	r22, 0x0A	; 10
     594:	70 e0       	ldi	r23, 0x00	; 0
     596:	8e 01       	movw	r16, r28
     598:	0f 5f       	subi	r16, 0xFF	; 255
     59a:	1f 4f       	sbci	r17, 0xFF	; 255
     59c:	c8 01       	movw	r24, r16
     59e:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <getDeviceName>
     5a2:	89 81       	ldd	r24, Y+1	; 0x01
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	0e 94 f1 06 	call	0xde2	; 0xde2 <putchar>
     5aa:	4f 92       	push	r4
     5ac:	5f 92       	push	r5
     5ae:	6f 92       	push	r6
     5b0:	7f 92       	push	r7
     5b2:	8f 92       	push	r8
     5b4:	9f 92       	push	r9
     5b6:	af 92       	push	r10
     5b8:	bf 92       	push	r11
     5ba:	cf 92       	push	r12
     5bc:	df 92       	push	r13
     5be:	ef 92       	push	r14
     5c0:	ff 92       	push	r15
     5c2:	1f 93       	push	r17
     5c4:	0f 93       	push	r16
     5c6:	85 e0       	ldi	r24, 0x05	; 5
     5c8:	8f 93       	push	r24
     5ca:	89 e3       	ldi	r24, 0x39	; 57
     5cc:	8f 93       	push	r24
     5ce:	8b e2       	ldi	r24, 0x2B	; 43
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	9f 93       	push	r25
     5d4:	8f 93       	push	r24
     5d6:	0e 94 db 06 	call	0xdb6	; 0xdb6 <printf>
     5da:	0f b6       	in	r0, 0x3f	; 63
     5dc:	f8 94       	cli
     5de:	de bf       	out	0x3e, r29	; 62
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	cd bf       	out	0x3d, r28	; 61
     5e4:	2a 96       	adiw	r28, 0x0a	; 10
     5e6:	0f b6       	in	r0, 0x3f	; 63
     5e8:	f8 94       	cli
     5ea:	de bf       	out	0x3e, r29	; 62
     5ec:	0f be       	out	0x3f, r0	; 63
     5ee:	cd bf       	out	0x3d, r28	; 61
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	1f 91       	pop	r17
     5f6:	0f 91       	pop	r16
     5f8:	ff 90       	pop	r15
     5fa:	ef 90       	pop	r14
     5fc:	df 90       	pop	r13
     5fe:	cf 90       	pop	r12
     600:	bf 90       	pop	r11
     602:	af 90       	pop	r10
     604:	9f 90       	pop	r9
     606:	8f 90       	pop	r8
     608:	7f 90       	pop	r7
     60a:	6f 90       	pop	r6
     60c:	5f 90       	pop	r5
     60e:	4f 90       	pop	r4
     610:	08 95       	ret

00000612 <panelUp>:
     612:	8e e4       	ldi	r24, 0x4E	; 78
     614:	91 e0       	ldi	r25, 0x01	; 1
     616:	9f 93       	push	r25
     618:	8f 93       	push	r24
     61a:	0e 94 db 06 	call	0xdb6	; 0xdb6 <printf>
     61e:	0f 90       	pop	r0
     620:	0f 90       	pop	r0
     622:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <__data_end>
     626:	90 91 cb 02 	lds	r25, 0x02CB	; 0x8002cb <__data_end+0x1>
     62a:	01 97       	sbiw	r24, 0x01	; 1
     62c:	e1 f4       	brne	.+56     	; 0x666 <panelUp+0x54>
     62e:	28 98       	cbi	0x05, 0	; 5
     630:	29 9a       	sbi	0x05, 1	; 5
     632:	25 e0       	ldi	r18, 0x05	; 5
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	94 e0       	ldi	r25, 0x04	; 4
     638:	85 b1       	in	r24, 0x05	; 5
     63a:	89 27       	eor	r24, r25
     63c:	85 b9       	out	0x05, r24	; 5
     63e:	4f ef       	ldi	r20, 0xFF	; 255
     640:	53 ed       	ldi	r21, 0xD3	; 211
     642:	80 e3       	ldi	r24, 0x30	; 48
     644:	41 50       	subi	r20, 0x01	; 1
     646:	50 40       	sbci	r21, 0x00	; 0
     648:	80 40       	sbci	r24, 0x00	; 0
     64a:	e1 f7       	brne	.-8      	; 0x644 <panelUp+0x32>
     64c:	00 c0       	rjmp	.+0      	; 0x64e <panelUp+0x3c>
     64e:	00 00       	nop
     650:	21 50       	subi	r18, 0x01	; 1
     652:	31 09       	sbc	r19, r1
     654:	89 f7       	brne	.-30     	; 0x638 <panelUp+0x26>
     656:	2a 98       	cbi	0x05, 2	; 5
     658:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <__data_end+0x1>
     65c:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <__data_end>
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	08 95       	ret
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	08 95       	ret

0000066c <panelDown>:
     66c:	8e e5       	ldi	r24, 0x5E	; 94
     66e:	91 e0       	ldi	r25, 0x01	; 1
     670:	9f 93       	push	r25
     672:	8f 93       	push	r24
     674:	0e 94 db 06 	call	0xdb6	; 0xdb6 <printf>
     678:	60 91 ca 02 	lds	r22, 0x02CA	; 0x8002ca <__data_end>
     67c:	70 91 cb 02 	lds	r23, 0x02CB	; 0x8002cb <__data_end+0x1>
     680:	0f 90       	pop	r0
     682:	0f 90       	pop	r0
     684:	61 15       	cp	r22, r1
     686:	71 05       	cpc	r23, r1
     688:	e1 f4       	brne	.+56     	; 0x6c2 <panelDown+0x56>
     68a:	29 98       	cbi	0x05, 1	; 5
     68c:	28 9a       	sbi	0x05, 0	; 5
     68e:	25 e0       	ldi	r18, 0x05	; 5
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	44 e0       	ldi	r20, 0x04	; 4
     694:	95 b1       	in	r25, 0x05	; 5
     696:	94 27       	eor	r25, r20
     698:	95 b9       	out	0x05, r25	; 5
     69a:	5f ef       	ldi	r21, 0xFF	; 255
     69c:	83 ed       	ldi	r24, 0xD3	; 211
     69e:	90 e3       	ldi	r25, 0x30	; 48
     6a0:	51 50       	subi	r21, 0x01	; 1
     6a2:	80 40       	sbci	r24, 0x00	; 0
     6a4:	90 40       	sbci	r25, 0x00	; 0
     6a6:	e1 f7       	brne	.-8      	; 0x6a0 <panelDown+0x34>
     6a8:	00 c0       	rjmp	.+0      	; 0x6aa <panelDown+0x3e>
     6aa:	00 00       	nop
     6ac:	21 50       	subi	r18, 0x01	; 1
     6ae:	31 09       	sbc	r19, r1
     6b0:	89 f7       	brne	.-30     	; 0x694 <panelDown+0x28>
     6b2:	2a 98       	cbi	0x05, 2	; 5
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <__data_end+0x1>
     6bc:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <__data_end>
     6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <panelDown+0x5a>
     6c2:	61 e0       	ldi	r22, 0x01	; 1
     6c4:	70 e0       	ldi	r23, 0x00	; 0
     6c6:	cb 01       	movw	r24, r22
     6c8:	08 95       	ret

000006ca <initPanel>:
     6ca:	87 e0       	ldi	r24, 0x07	; 7
     6cc:	84 b9       	out	0x04, r24	; 4
     6ce:	85 b9       	out	0x05, r24	; 5
     6d0:	2f ef       	ldi	r18, 0xFF	; 255
     6d2:	83 ec       	ldi	r24, 0xC3	; 195
     6d4:	99 e0       	ldi	r25, 0x09	; 9
     6d6:	21 50       	subi	r18, 0x01	; 1
     6d8:	80 40       	sbci	r24, 0x00	; 0
     6da:	90 40       	sbci	r25, 0x00	; 0
     6dc:	e1 f7       	brne	.-8      	; 0x6d6 <initPanel+0xc>
     6de:	00 c0       	rjmp	.+0      	; 0x6e0 <initPanel+0x16>
     6e0:	00 00       	nop
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	85 b9       	out	0x05, r24	; 5
     6e6:	08 95       	ret

000006e8 <adc_init>:
     6e8:	ec e7       	ldi	r30, 0x7C	; 124
     6ea:	f0 e0       	ldi	r31, 0x00	; 0
     6ec:	80 81       	ld	r24, Z
     6ee:	80 66       	ori	r24, 0x60	; 96
     6f0:	80 83       	st	Z, r24
     6f2:	87 e8       	ldi	r24, 0x87	; 135
     6f4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     6f8:	08 95       	ret

000006fa <adc_read>:
     6fa:	ea e7       	ldi	r30, 0x7A	; 122
     6fc:	f0 e0       	ldi	r31, 0x00	; 0
     6fe:	80 81       	ld	r24, Z
     700:	80 64       	ori	r24, 0x40	; 64
     702:	80 83       	st	Z, r24
     704:	80 81       	ld	r24, Z
     706:	86 fd       	sbrc	r24, 6
     708:	fd cf       	rjmp	.-6      	; 0x704 <adc_read+0xa>
     70a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	08 95       	ret

00000712 <readLight>:
     712:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     716:	80 36       	cpi	r24, 0x60	; 96
     718:	31 f0       	breq	.+12     	; 0x726 <readLight+0x14>
     71a:	ec e7       	ldi	r30, 0x7C	; 124
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	10 82       	st	Z, r1
     720:	80 81       	ld	r24, Z
     722:	80 66       	ori	r24, 0x60	; 96
     724:	80 83       	st	Z, r24
     726:	0e 94 7d 03 	call	0x6fa	; 0x6fa <adc_read>
     72a:	9c 01       	movw	r18, r24
     72c:	ad ec       	ldi	r26, 0xCD	; 205
     72e:	bc ec       	ldi	r27, 0xCC	; 204
     730:	0e 94 8a 05 	call	0xb14	; 0xb14 <__umulhisi3>
     734:	96 95       	lsr	r25
     736:	87 95       	ror	r24
     738:	96 95       	lsr	r25
     73a:	87 95       	ror	r24
     73c:	96 95       	lsr	r25
     73e:	87 95       	ror	r24
     740:	08 95       	ret

00000742 <getLight>:
     742:	0e 94 89 03 	call	0x712	; 0x712 <readLight>
     746:	0e 94 89 03 	call	0x712	; 0x712 <readLight>
     74a:	9f 93       	push	r25
     74c:	8f 93       	push	r24
     74e:	80 e7       	ldi	r24, 0x70	; 112
     750:	91 e0       	ldi	r25, 0x01	; 1
     752:	9f 93       	push	r25
     754:	8f 93       	push	r24
     756:	0e 94 db 06 	call	0xdb6	; 0xdb6 <printf>
     75a:	0f 90       	pop	r0
     75c:	0f 90       	pop	r0
     75e:	0f 90       	pop	r0
     760:	0f 90       	pop	r0
     762:	08 95       	ret

00000764 <init_timer>:


void init_timer()
{
	
	TCCR0A = (1 << WGM00) | (1 << COM0A1);
     764:	81 e8       	ldi	r24, 0x81	; 129
     766:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);
     768:	83 e0       	ldi	r24, 0x03	; 3
     76a:	85 bd       	out	0x25, r24	; 37
	OCR0A = 0;
     76c:	17 bc       	out	0x27, r1	; 39
     76e:	08 95       	ret

00000770 <readTemperature>:
}

uint16_t readTemperature()
{
	//zet refs0 en adlar en zet pin 0 en 1 aan (3)
	ADMUX = 0;
     770:	ec e7       	ldi	r30, 0x7C	; 124
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0) | (1 << ADLAR) | (1 << MUX1) | (1 << MUX0);
     776:	80 81       	ld	r24, Z
     778:	83 66       	ori	r24, 0x63	; 99
     77a:	80 83       	st	Z, r24
	
	return adc_read() - 18;
     77c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <adc_read>
}
     780:	42 97       	sbiw	r24, 0x12	; 18
     782:	08 95       	ret

00000784 <getTemperature>:
	int sensorInput;    //The variable we will use to store the sensor input
	double temp;        //The variable we will use to store temperature in degrees.


	// put your main code here, to run repeatedly:
	sensorInput = readTemperature();    //read the analog sensor and store it
     784:	0e 94 b8 03 	call	0x770	; 0x770 <readTemperature>
	temp = sensorInput - 22;

	printf("Temp       : %i \n \r", (int)sensorInput);
     788:	9f 93       	push	r25
     78a:	8f 93       	push	r24
     78c:	84 e8       	ldi	r24, 0x84	; 132
     78e:	91 e0       	ldi	r25, 0x01	; 1
     790:	9f 93       	push	r25
     792:	8f 93       	push	r24
     794:	0e 94 db 06 	call	0xdb6	; 0xdb6 <printf>
}
     798:	0f 90       	pop	r0
     79a:	0f 90       	pop	r0
     79c:	0f 90       	pop	r0
     79e:	0f 90       	pop	r0
     7a0:	08 95       	ret

000007a2 <run>:
	SRAMMode = eeprom_read_word(&Mode);
	printf("2 %i");
}

void run()
{
     7a2:	ef 92       	push	r14
     7a4:	ff 92       	push	r15
     7a6:	0f 93       	push	r16
     7a8:	1f 93       	push	r17
     7aa:	cf 93       	push	r28
     7ac:	df 93       	push	r29
	uint8_t temp = readTemperature();
     7ae:	0e 94 b8 03 	call	0x770	; 0x770 <readTemperature>
     7b2:	ec 01       	movw	r28, r24
	uint16_t SRAMTempMin;
	uint16_t SRAMTempMax;
	
	getTemperature();
     7b4:	0e 94 c2 03 	call	0x784	; 0x784 <getTemperature>
	SRAMTempMin = eeprom_read_word(&TempMin);
     7b8:	89 e0       	ldi	r24, 0x09	; 9
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	0e 94 9c 09 	call	0x1338	; 0x1338 <eeprom_read_word>
     7c0:	7c 01       	movw	r14, r24
	SRAMTempMax = eeprom_read_word(&TempMax);
     7c2:	8b e0       	ldi	r24, 0x0B	; 11
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	0e 94 9c 09 	call	0x1338	; 0x1338 <eeprom_read_word>
     7ca:	8c 01       	movw	r16, r24
     7cc:	dd 27       	eor	r29, r29
	
	printf("huidig: %i, eeprom: %i \n\r", temp, SRAMTempMax);
     7ce:	1f 93       	push	r17
     7d0:	8f 93       	push	r24
     7d2:	df 93       	push	r29
     7d4:	cf 93       	push	r28
     7d6:	88 e9       	ldi	r24, 0x98	; 152
     7d8:	91 e0       	ldi	r25, 0x01	; 1
     7da:	9f 93       	push	r25
     7dc:	8f 93       	push	r24
     7de:	0e 94 db 06 	call	0xdb6	; 0xdb6 <printf>
	
	//Check for climate change
	if (temp > SRAMTempMax) {
     7e2:	0f 90       	pop	r0
     7e4:	0f 90       	pop	r0
     7e6:	0f 90       	pop	r0
     7e8:	0f 90       	pop	r0
     7ea:	0f 90       	pop	r0
     7ec:	0f 90       	pop	r0
     7ee:	0c 17       	cp	r16, r28
     7f0:	1d 07       	cpc	r17, r29
     7f2:	18 f4       	brcc	.+6      	; 0x7fa <run+0x58>
		panelUp();
     7f4:	0e 94 09 03 	call	0x612	; 0x612 <panelUp>
     7f8:	05 c0       	rjmp	.+10     	; 0x804 <run+0x62>
	} else if (temp < SRAMTempMin) {
     7fa:	ce 15       	cp	r28, r14
     7fc:	df 05       	cpc	r29, r15
     7fe:	10 f4       	brcc	.+4      	; 0x804 <run+0x62>
		panelDown();
     800:	0e 94 36 03 	call	0x66c	; 0x66c <panelDown>
	
	//Light?!
	uint16_t SRAMLightMin;
	uint16_t SRAMLightMax;
	
	SRAMLightMax = eeprom_read_word(&LightThresholdMax);
     804:	85 e0       	ldi	r24, 0x05	; 5
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	0e 94 9c 09 	call	0x1338	; 0x1338 <eeprom_read_word>
     80c:	ec 01       	movw	r28, r24
	SRAMLightMin = eeprom_read_word(&LightThresholdMin);
     80e:	87 e0       	ldi	r24, 0x07	; 7
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	0e 94 9c 09 	call	0x1338	; 0x1338 <eeprom_read_word>
     816:	8c 01       	movw	r16, r24
	
	uint16_t isManual;
	isManual = eeprom_read_word(&Mode);
     818:	82 e0       	ldi	r24, 0x02	; 2
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	0e 94 9c 09 	call	0x1338	; 0x1338 <eeprom_read_word>
	if (isManual) {
     820:	89 2b       	or	r24, r25
     822:	79 f0       	breq	.+30     	; 0x842 <run+0xa0>
		if (readLight() > SRAMLightMax) {
     824:	0e 94 89 03 	call	0x712	; 0x712 <readLight>
     828:	c8 17       	cp	r28, r24
     82a:	d9 07       	cpc	r29, r25
     82c:	18 f4       	brcc	.+6      	; 0x834 <run+0x92>
			panelDown();
     82e:	0e 94 36 03 	call	0x66c	; 0x66c <panelDown>
     832:	07 c0       	rjmp	.+14     	; 0x842 <run+0xa0>
			} else if(readLight() < SRAMLightMin) {
     834:	0e 94 89 03 	call	0x712	; 0x712 <readLight>
     838:	80 17       	cp	r24, r16
     83a:	91 07       	cpc	r25, r17
     83c:	10 f4       	brcc	.+4      	; 0x842 <run+0xa0>
			panelUp();
     83e:	0e 94 09 03 	call	0x612	; 0x612 <panelUp>
		}	
	}
}
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	1f 91       	pop	r17
     848:	0f 91       	pop	r16
     84a:	ff 90       	pop	r15
     84c:	ef 90       	pop	r14
     84e:	08 95       	ret

00000850 <deleteEnd>:
	ADMUX = 0;
	ADMUX |= (1 << REFS0) | (1 << ADLAR) | (1 << MUX1) | (1 << MUX0);
	
	return adc_read() - 18;
}
void deleteEnd (char* myStr){
     850:	dc 01       	movw	r26, r24
	char *del = &myStr[strlen(myStr)];
     852:	fc 01       	movw	r30, r24
     854:	01 90       	ld	r0, Z+
     856:	00 20       	and	r0, r0
     858:	e9 f7       	brne	.-6      	; 0x854 <deleteEnd+0x4>
     85a:	31 97       	sbiw	r30, 0x01	; 1

	while (del > myStr && *del != '/') {
     85c:	8e 17       	cp	r24, r30
     85e:	9f 07       	cpc	r25, r31
     860:	80 f4       	brcc	.+32     	; 0x882 <deleteEnd+0x32>
     862:	80 81       	ld	r24, Z
     864:	8f 32       	cpi	r24, 0x2F	; 47
     866:	69 f0       	breq	.+26     	; 0x882 <deleteEnd+0x32>
		del--;
		
		if (*del== ':') {
     868:	92 91       	ld	r25, -Z
     86a:	9a 33       	cpi	r25, 0x3A	; 58
     86c:	29 f4       	brne	.+10     	; 0x878 <deleteEnd+0x28>
			*del= '\0';
     86e:	10 82       	st	Z, r1
	return adc_read() - 18;
}
void deleteEnd (char* myStr){
	char *del = &myStr[strlen(myStr)];

	while (del > myStr && *del != '/') {
     870:	ae 17       	cp	r26, r30
     872:	bf 07       	cpc	r27, r31
     874:	c8 f3       	brcs	.-14     	; 0x868 <deleteEnd+0x18>
     876:	08 95       	ret
     878:	ae 17       	cp	r26, r30
     87a:	bf 07       	cpc	r27, r31
     87c:	10 f4       	brcc	.+4      	; 0x882 <deleteEnd+0x32>
     87e:	9f 32       	cpi	r25, 0x2F	; 47
     880:	99 f7       	brne	.-26     	; 0x868 <deleteEnd+0x18>
     882:	08 95       	ret

00000884 <listen>:
	return;
}


void listen()
{
     884:	cf 92       	push	r12
     886:	df 92       	push	r13
     888:	ef 92       	push	r14
     88a:	ff 92       	push	r15
     88c:	0f 93       	push	r16
     88e:	1f 93       	push	r17
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	cd b7       	in	r28, 0x3d	; 61
     896:	de b7       	in	r29, 0x3e	; 62
     898:	a8 97       	sbiw	r28, 0x28	; 40
     89a:	0f b6       	in	r0, 0x3f	; 63
     89c:	f8 94       	cli
     89e:	de bf       	out	0x3e, r29	; 62
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	cd bf       	out	0x3d, r28	; 61
	char input[40];

	ser_readln(input, sizeof(input), 1);
     8a4:	41 e0       	ldi	r20, 0x01	; 1
     8a6:	50 e0       	ldi	r21, 0x00	; 0
     8a8:	68 e2       	ldi	r22, 0x28	; 40
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	ce 01       	movw	r24, r28
     8ae:	01 96       	adiw	r24, 0x01	; 1
     8b0:	0e 94 81 01 	call	0x302	; 0x302 <ser_readln>

	const char delimiter = ':';
	char *value;
	
	value = strchr(input, delimiter);
     8b4:	6a e3       	ldi	r22, 0x3A	; 58
     8b6:	70 e0       	ldi	r23, 0x00	; 0
     8b8:	ce 01       	movw	r24, r28
     8ba:	01 96       	adiw	r24, 0x01	; 1
     8bc:	0e 94 b8 06 	call	0xd70	; 0xd70 <strchr>
	value++; //remove spacer from string
     8c0:	8c 01       	movw	r16, r24
     8c2:	0f 5f       	subi	r16, 0xFF	; 255
     8c4:	1f 4f       	sbci	r17, 0xFF	; 255
	deleteEnd(input);
     8c6:	ce 01       	movw	r24, r28
     8c8:	01 96       	adiw	r24, 0x01	; 1
     8ca:	0e 94 28 04 	call	0x850	; 0x850 <deleteEnd>
	int newValue;
	newValue = strtol(value, NULL, 10);
     8ce:	4a e0       	ldi	r20, 0x0A	; 10
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	c8 01       	movw	r24, r16
     8d8:	0e 94 99 05 	call	0xb32	; 0xb32 <strtol>
     8dc:	6b 01       	movw	r12, r22
     8de:	7c 01       	movw	r14, r24

	if(strcmp(&input, 			"get_temperature") == 0) {
     8e0:	62 eb       	ldi	r22, 0xB2	; 178
     8e2:	71 e0       	ldi	r23, 0x01	; 1
     8e4:	ce 01       	movw	r24, r28
     8e6:	01 96       	adiw	r24, 0x01	; 1
     8e8:	0e 94 c3 06 	call	0xd86	; 0xd86 <strcmp>
     8ec:	89 2b       	or	r24, r25
     8ee:	19 f4       	brne	.+6      	; 0x8f6 <listen+0x72>
		getTemperature();
     8f0:	0e 94 c2 03 	call	0x784	; 0x784 <getTemperature>
     8f4:	e7 c0       	rjmp	.+462    	; 0xac4 <__stack+0x1c5>
	} else if (strcmp(&input, 	"get_light") == 0) {
     8f6:	62 ec       	ldi	r22, 0xC2	; 194
     8f8:	71 e0       	ldi	r23, 0x01	; 1
     8fa:	ce 01       	movw	r24, r28
     8fc:	01 96       	adiw	r24, 0x01	; 1
     8fe:	0e 94 c3 06 	call	0xd86	; 0xd86 <strcmp>
     902:	89 2b       	or	r24, r25
     904:	19 f4       	brne	.+6      	; 0x90c <__stack+0xd>
		getLight();
     906:	0e 94 a1 03 	call	0x742	; 0x742 <getLight>
     90a:	dc c0       	rjmp	.+440    	; 0xac4 <__stack+0x1c5>
	} else if (strcmp(&input, 	"get_distance") == 0) {
     90c:	6c ec       	ldi	r22, 0xCC	; 204
     90e:	71 e0       	ldi	r23, 0x01	; 1
     910:	ce 01       	movw	r24, r28
     912:	01 96       	adiw	r24, 0x01	; 1
     914:	0e 94 c3 06 	call	0xd86	; 0xd86 <strcmp>
     918:	89 2b       	or	r24, r25
     91a:	09 f4       	brne	.+2      	; 0x91e <__stack+0x1f>
     91c:	d3 c0       	rjmp	.+422    	; 0xac4 <__stack+0x1c5>
		//distance = getDistance();
		//printf("2 %i\n\r", distance);
	} else if (strcmp(&input, 	"panel_out") == 0) {
     91e:	69 ed       	ldi	r22, 0xD9	; 217
     920:	71 e0       	ldi	r23, 0x01	; 1
     922:	ce 01       	movw	r24, r28
     924:	01 96       	adiw	r24, 0x01	; 1
     926:	0e 94 c3 06 	call	0xd86	; 0xd86 <strcmp>
     92a:	89 2b       	or	r24, r25
     92c:	59 f4       	brne	.+22     	; 0x944 <__stack+0x45>
		panelDown();
     92e:	0e 94 36 03 	call	0x66c	; 0x66c <panelDown>
		printf("2 \n\r");
     932:	86 e2       	ldi	r24, 0x26	; 38
     934:	91 e0       	ldi	r25, 0x01	; 1
     936:	9f 93       	push	r25
     938:	8f 93       	push	r24
     93a:	0e 94 db 06 	call	0xdb6	; 0xdb6 <printf>
     93e:	0f 90       	pop	r0
     940:	0f 90       	pop	r0
     942:	c0 c0       	rjmp	.+384    	; 0xac4 <__stack+0x1c5>
	} else if (strcmp(&input, 	"panel_in") == 0) {
     944:	63 ee       	ldi	r22, 0xE3	; 227
     946:	71 e0       	ldi	r23, 0x01	; 1
     948:	ce 01       	movw	r24, r28
     94a:	01 96       	adiw	r24, 0x01	; 1
     94c:	0e 94 c3 06 	call	0xd86	; 0xd86 <strcmp>
     950:	89 2b       	or	r24, r25
     952:	59 f4       	brne	.+22     	; 0x96a <__stack+0x6b>
		panelUp();
     954:	0e 94 09 03 	call	0x612	; 0x612 <panelUp>
		printf("2 \n\r");
     958:	86 e2       	ldi	r24, 0x26	; 38
     95a:	91 e0       	ldi	r25, 0x01	; 1
     95c:	9f 93       	push	r25
     95e:	8f 93       	push	r24
     960:	0e 94 db 06 	call	0xdb6	; 0xdb6 <printf>
     964:	0f 90       	pop	r0
     966:	0f 90       	pop	r0
     968:	ad c0       	rjmp	.+346    	; 0xac4 <__stack+0x1c5>
	} else if (strcmp(&input, 	"set_light_threshold_minimum") == 0) {
     96a:	6c ee       	ldi	r22, 0xEC	; 236
     96c:	71 e0       	ldi	r23, 0x01	; 1
     96e:	ce 01       	movw	r24, r28
     970:	01 96       	adiw	r24, 0x01	; 1
     972:	0e 94 c3 06 	call	0xd86	; 0xd86 <strcmp>
     976:	89 2b       	or	r24, r25
     978:	61 f4       	brne	.+24     	; 0x992 <__stack+0x93>
		setLightMin(newValue);
     97a:	c6 01       	movw	r24, r12
     97c:	0e 94 27 02 	call	0x44e	; 0x44e <setLightMin>
		printf("2 \n\r");
     980:	86 e2       	ldi	r24, 0x26	; 38
     982:	91 e0       	ldi	r25, 0x01	; 1
     984:	9f 93       	push	r25
     986:	8f 93       	push	r24
     988:	0e 94 db 06 	call	0xdb6	; 0xdb6 <printf>
     98c:	0f 90       	pop	r0
     98e:	0f 90       	pop	r0
     990:	99 c0       	rjmp	.+306    	; 0xac4 <__stack+0x1c5>
	} else if (strcmp(&input, 	"set_light_threshold_maximum") == 0) {
     992:	68 e0       	ldi	r22, 0x08	; 8
     994:	72 e0       	ldi	r23, 0x02	; 2
     996:	ce 01       	movw	r24, r28
     998:	01 96       	adiw	r24, 0x01	; 1
     99a:	0e 94 c3 06 	call	0xd86	; 0xd86 <strcmp>
     99e:	89 2b       	or	r24, r25
     9a0:	61 f4       	brne	.+24     	; 0x9ba <__stack+0xbb>
		setLightMax(newValue);
     9a2:	c6 01       	movw	r24, r12
     9a4:	0e 94 2d 02 	call	0x45a	; 0x45a <setLightMax>
		printf("2 \n\r");
     9a8:	86 e2       	ldi	r24, 0x26	; 38
     9aa:	91 e0       	ldi	r25, 0x01	; 1
     9ac:	9f 93       	push	r25
     9ae:	8f 93       	push	r24
     9b0:	0e 94 db 06 	call	0xdb6	; 0xdb6 <printf>
     9b4:	0f 90       	pop	r0
     9b6:	0f 90       	pop	r0
     9b8:	85 c0       	rjmp	.+266    	; 0xac4 <__stack+0x1c5>
	} else if (strcmp(&input, 	"set_temperature_threshold_minimum") == 0) {
     9ba:	64 e2       	ldi	r22, 0x24	; 36
     9bc:	72 e0       	ldi	r23, 0x02	; 2
     9be:	ce 01       	movw	r24, r28
     9c0:	01 96       	adiw	r24, 0x01	; 1
     9c2:	0e 94 c3 06 	call	0xd86	; 0xd86 <strcmp>
     9c6:	89 2b       	or	r24, r25
     9c8:	61 f4       	brne	.+24     	; 0x9e2 <__stack+0xe3>
		setTempMin(newValue);
     9ca:	c6 01       	movw	r24, r12
     9cc:	0e 94 1b 02 	call	0x436	; 0x436 <setTempMin>
		printf("2 \n\r");
     9d0:	86 e2       	ldi	r24, 0x26	; 38
     9d2:	91 e0       	ldi	r25, 0x01	; 1
     9d4:	9f 93       	push	r25
     9d6:	8f 93       	push	r24
     9d8:	0e 94 db 06 	call	0xdb6	; 0xdb6 <printf>
     9dc:	0f 90       	pop	r0
     9de:	0f 90       	pop	r0
     9e0:	71 c0       	rjmp	.+226    	; 0xac4 <__stack+0x1c5>
	} else if (strcmp(&input, 	"set_temperature_threshold_maximum") == 0) {
     9e2:	66 e4       	ldi	r22, 0x46	; 70
     9e4:	72 e0       	ldi	r23, 0x02	; 2
     9e6:	ce 01       	movw	r24, r28
     9e8:	01 96       	adiw	r24, 0x01	; 1
     9ea:	0e 94 c3 06 	call	0xd86	; 0xd86 <strcmp>
     9ee:	89 2b       	or	r24, r25
     9f0:	21 f4       	brne	.+8      	; 0x9fa <__stack+0xfb>
		setTempMax(newValue);
     9f2:	c6 01       	movw	r24, r12
     9f4:	0e 94 21 02 	call	0x442	; 0x442 <setTempMax>
     9f8:	65 c0       	rjmp	.+202    	; 0xac4 <__stack+0x1c5>
	} else if (strcmp(&input, 	"set_max_distance") == 0) {
     9fa:	68 e6       	ldi	r22, 0x68	; 104
     9fc:	72 e0       	ldi	r23, 0x02	; 2
     9fe:	ce 01       	movw	r24, r28
     a00:	01 96       	adiw	r24, 0x01	; 1
     a02:	0e 94 c3 06 	call	0xd86	; 0xd86 <strcmp>
     a06:	89 2b       	or	r24, r25
     a08:	61 f4       	brne	.+24     	; 0xa22 <__stack+0x123>
		setDistanceMax(newValue);
     a0a:	c6 01       	movw	r24, r12
     a0c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <setDistanceMax>
		printf("2 \n\r");
     a10:	86 e2       	ldi	r24, 0x26	; 38
     a12:	91 e0       	ldi	r25, 0x01	; 1
     a14:	9f 93       	push	r25
     a16:	8f 93       	push	r24
     a18:	0e 94 db 06 	call	0xdb6	; 0xdb6 <printf>
     a1c:	0f 90       	pop	r0
     a1e:	0f 90       	pop	r0
     a20:	51 c0       	rjmp	.+162    	; 0xac4 <__stack+0x1c5>
	} else if (strcmp(&input, 	"handshake") == 0) {
     a22:	69 e7       	ldi	r22, 0x79	; 121
     a24:	72 e0       	ldi	r23, 0x02	; 2
     a26:	ce 01       	movw	r24, r28
     a28:	01 96       	adiw	r24, 0x01	; 1
     a2a:	0e 94 c3 06 	call	0xd86	; 0xd86 <strcmp>
     a2e:	89 2b       	or	r24, r25
     a30:	19 f4       	brne	.+6      	; 0xa38 <__stack+0x139>
		get_config();
     a32:	0e 94 8d 02 	call	0x51a	; 0x51a <get_config>
     a36:	46 c0       	rjmp	.+140    	; 0xac4 <__stack+0x1c5>
	} else if (strcmp(&input, 	"set_mode_automatic") == 0) {
     a38:	63 e8       	ldi	r22, 0x83	; 131
     a3a:	72 e0       	ldi	r23, 0x02	; 2
     a3c:	ce 01       	movw	r24, r28
     a3e:	01 96       	adiw	r24, 0x01	; 1
     a40:	0e 94 c3 06 	call	0xd86	; 0xd86 <strcmp>
     a44:	89 2b       	or	r24, r25
     a46:	69 f4       	brne	.+26     	; 0xa62 <__stack+0x163>
		setMode(0);
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	0e 94 15 02 	call	0x42a	; 0x42a <setMode>
		printf("2 \n\r");
     a50:	86 e2       	ldi	r24, 0x26	; 38
     a52:	91 e0       	ldi	r25, 0x01	; 1
     a54:	9f 93       	push	r25
     a56:	8f 93       	push	r24
     a58:	0e 94 db 06 	call	0xdb6	; 0xdb6 <printf>
     a5c:	0f 90       	pop	r0
     a5e:	0f 90       	pop	r0
     a60:	31 c0       	rjmp	.+98     	; 0xac4 <__stack+0x1c5>
	} else if (strcmp(&input, 	"set_mode_manual") == 0) {
     a62:	66 e9       	ldi	r22, 0x96	; 150
     a64:	72 e0       	ldi	r23, 0x02	; 2
     a66:	ce 01       	movw	r24, r28
     a68:	01 96       	adiw	r24, 0x01	; 1
     a6a:	0e 94 c3 06 	call	0xd86	; 0xd86 <strcmp>
     a6e:	89 2b       	or	r24, r25
     a70:	69 f4       	brne	.+26     	; 0xa8c <__stack+0x18d>
		setMode(1);
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	0e 94 15 02 	call	0x42a	; 0x42a <setMode>
		printf("2 \n\r");
     a7a:	86 e2       	ldi	r24, 0x26	; 38
     a7c:	91 e0       	ldi	r25, 0x01	; 1
     a7e:	9f 93       	push	r25
     a80:	8f 93       	push	r24
     a82:	0e 94 db 06 	call	0xdb6	; 0xdb6 <printf>
     a86:	0f 90       	pop	r0
     a88:	0f 90       	pop	r0
     a8a:	1c c0       	rjmp	.+56     	; 0xac4 <__stack+0x1c5>
	} else if (strcmp(&input, "set_device_name") == 0) {
     a8c:	66 ea       	ldi	r22, 0xA6	; 166
     a8e:	72 e0       	ldi	r23, 0x02	; 2
     a90:	ce 01       	movw	r24, r28
     a92:	01 96       	adiw	r24, 0x01	; 1
     a94:	0e 94 c3 06 	call	0xd86	; 0xd86 <strcmp>
     a98:	89 2b       	or	r24, r25
     a9a:	61 f4       	brne	.+24     	; 0xab4 <__stack+0x1b5>
		setDeviceName(value);
     a9c:	c8 01       	movw	r24, r16
     a9e:	0e 94 33 02 	call	0x466	; 0x466 <setDeviceName>
		printf("2 \n\r");
     aa2:	86 e2       	ldi	r24, 0x26	; 38
     aa4:	91 e0       	ldi	r25, 0x01	; 1
     aa6:	9f 93       	push	r25
     aa8:	8f 93       	push	r24
     aaa:	0e 94 db 06 	call	0xdb6	; 0xdb6 <printf>
     aae:	0f 90       	pop	r0
     ab0:	0f 90       	pop	r0
     ab2:	08 c0       	rjmp	.+16     	; 0xac4 <__stack+0x1c5>
	} else {
		printf("4 unkown_command \n\r");
     ab4:	86 eb       	ldi	r24, 0xB6	; 182
     ab6:	92 e0       	ldi	r25, 0x02	; 2
     ab8:	9f 93       	push	r25
     aba:	8f 93       	push	r24
     abc:	0e 94 db 06 	call	0xdb6	; 0xdb6 <printf>
     ac0:	0f 90       	pop	r0
     ac2:	0f 90       	pop	r0
	}
}
     ac4:	a8 96       	adiw	r28, 0x28	; 40
     ac6:	0f b6       	in	r0, 0x3f	; 63
     ac8:	f8 94       	cli
     aca:	de bf       	out	0x3e, r29	; 62
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	cd bf       	out	0x3d, r28	; 61
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	ff 90       	pop	r15
     ada:	ef 90       	pop	r14
     adc:	df 90       	pop	r13
     ade:	cf 90       	pop	r12
     ae0:	08 95       	ret

00000ae2 <main>:
#include "distance_sensor.h"

int main() {
	//https://www.avrfreaks.net/forum/tut-c-using-eeprom-memory-avr-gcc?page=all
	
	ser_init();
     ae2:	0e 94 51 01 	call	0x2a2	; 0x2a2 <ser_init>
	adc_init();
     ae6:	0e 94 74 03 	call	0x6e8	; 0x6e8 <adc_init>
	init_timer();
     aea:	0e 94 b2 03 	call	0x764	; 0x764 <init_timer>
	initPanel();
     aee:	0e 94 65 03 	call	0x6ca	; 0x6ca <initPanel>
	initEEPROM();
     af2:	0e 94 ba 01 	call	0x374	; 0x374 <initEEPROM>
	
	SCH_Init_T1();
     af6:	0e 94 01 01 	call	0x202	; 0x202 <SCH_Init_T1>
	//SCH_Add_Task(listen, 10, 20);
	//SCH_Add_Task(panelDown, 200, 300);
	//SCH_Add_Task(panelUp, 200, 300);
	SCH_Add_Task(run, 10, 10);
     afa:	4a e0       	ldi	r20, 0x0A	; 10
     afc:	50 e0       	ldi	r21, 0x00	; 0
     afe:	6a e0       	ldi	r22, 0x0A	; 10
     b00:	70 e0       	ldi	r23, 0x00	; 0
     b02:	81 ed       	ldi	r24, 0xD1	; 209
     b04:	93 e0       	ldi	r25, 0x03	; 3
     b06:	0e 94 bc 00 	call	0x178	; 0x178 <SCH_Add_Task>
	SCH_Start();
     b0a:	0e 94 17 01 	call	0x22e	; 0x22e <SCH_Start>
	//panelDown();
	//panelUp();
	
	while (1) {
		//SCH_Dispatch_Tasks();
		listen();
     b0e:	0e 94 42 04 	call	0x884	; 0x884 <listen>
     b12:	fd cf       	rjmp	.-6      	; 0xb0e <main+0x2c>

00000b14 <__umulhisi3>:
     b14:	a2 9f       	mul	r26, r18
     b16:	b0 01       	movw	r22, r0
     b18:	b3 9f       	mul	r27, r19
     b1a:	c0 01       	movw	r24, r0
     b1c:	a3 9f       	mul	r26, r19
     b1e:	70 0d       	add	r23, r0
     b20:	81 1d       	adc	r24, r1
     b22:	11 24       	eor	r1, r1
     b24:	91 1d       	adc	r25, r1
     b26:	b2 9f       	mul	r27, r18
     b28:	70 0d       	add	r23, r0
     b2a:	81 1d       	adc	r24, r1
     b2c:	11 24       	eor	r1, r1
     b2e:	91 1d       	adc	r25, r1
     b30:	08 95       	ret

00000b32 <strtol>:
     b32:	a0 e0       	ldi	r26, 0x00	; 0
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	ef e9       	ldi	r30, 0x9F	; 159
     b38:	f5 e0       	ldi	r31, 0x05	; 5
     b3a:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <__prologue_saves__+0x2>
     b3e:	5c 01       	movw	r10, r24
     b40:	6b 01       	movw	r12, r22
     b42:	7a 01       	movw	r14, r20
     b44:	61 15       	cp	r22, r1
     b46:	71 05       	cpc	r23, r1
     b48:	19 f0       	breq	.+6      	; 0xb50 <strtol+0x1e>
     b4a:	fb 01       	movw	r30, r22
     b4c:	91 83       	std	Z+1, r25	; 0x01
     b4e:	80 83       	st	Z, r24
     b50:	e1 14       	cp	r14, r1
     b52:	f1 04       	cpc	r15, r1
     b54:	29 f0       	breq	.+10     	; 0xb60 <strtol+0x2e>
     b56:	c7 01       	movw	r24, r14
     b58:	02 97       	sbiw	r24, 0x02	; 2
     b5a:	83 97       	sbiw	r24, 0x23	; 35
     b5c:	08 f0       	brcs	.+2      	; 0xb60 <strtol+0x2e>
     b5e:	e5 c0       	rjmp	.+458    	; 0xd2a <strtol+0x1f8>
     b60:	e5 01       	movw	r28, r10
     b62:	21 96       	adiw	r28, 0x01	; 1
     b64:	f5 01       	movw	r30, r10
     b66:	10 81       	ld	r17, Z
     b68:	81 2f       	mov	r24, r17
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	0e 94 af 06 	call	0xd5e	; 0xd5e <isspace>
     b70:	89 2b       	or	r24, r25
     b72:	11 f0       	breq	.+4      	; 0xb78 <strtol+0x46>
     b74:	5e 01       	movw	r10, r28
     b76:	f4 cf       	rjmp	.-24     	; 0xb60 <strtol+0x2e>
     b78:	1d 32       	cpi	r17, 0x2D	; 45
     b7a:	29 f4       	brne	.+10     	; 0xb86 <strtol+0x54>
     b7c:	21 96       	adiw	r28, 0x01	; 1
     b7e:	f5 01       	movw	r30, r10
     b80:	11 81       	ldd	r17, Z+1	; 0x01
     b82:	01 e0       	ldi	r16, 0x01	; 1
     b84:	07 c0       	rjmp	.+14     	; 0xb94 <strtol+0x62>
     b86:	1b 32       	cpi	r17, 0x2B	; 43
     b88:	21 f4       	brne	.+8      	; 0xb92 <strtol+0x60>
     b8a:	e5 01       	movw	r28, r10
     b8c:	22 96       	adiw	r28, 0x02	; 2
     b8e:	f5 01       	movw	r30, r10
     b90:	11 81       	ldd	r17, Z+1	; 0x01
     b92:	00 e0       	ldi	r16, 0x00	; 0
     b94:	e1 14       	cp	r14, r1
     b96:	f1 04       	cpc	r15, r1
     b98:	09 f1       	breq	.+66     	; 0xbdc <strtol+0xaa>
     b9a:	f0 e1       	ldi	r31, 0x10	; 16
     b9c:	ef 16       	cp	r14, r31
     b9e:	f1 04       	cpc	r15, r1
     ba0:	29 f4       	brne	.+10     	; 0xbac <strtol+0x7a>
     ba2:	3f c0       	rjmp	.+126    	; 0xc22 <strtol+0xf0>
     ba4:	10 e3       	ldi	r17, 0x30	; 48
     ba6:	e1 14       	cp	r14, r1
     ba8:	f1 04       	cpc	r15, r1
     baa:	21 f1       	breq	.+72     	; 0xbf4 <strtol+0xc2>
     bac:	28 e0       	ldi	r18, 0x08	; 8
     bae:	e2 16       	cp	r14, r18
     bb0:	f1 04       	cpc	r15, r1
     bb2:	01 f1       	breq	.+64     	; 0xbf4 <strtol+0xc2>
     bb4:	54 f4       	brge	.+20     	; 0xbca <strtol+0x98>
     bb6:	e2 e0       	ldi	r30, 0x02	; 2
     bb8:	ee 16       	cp	r14, r30
     bba:	f1 04       	cpc	r15, r1
     bbc:	21 f5       	brne	.+72     	; 0xc06 <strtol+0xd4>
     bbe:	81 2c       	mov	r8, r1
     bc0:	91 2c       	mov	r9, r1
     bc2:	a1 2c       	mov	r10, r1
     bc4:	b0 e4       	ldi	r27, 0x40	; 64
     bc6:	bb 2e       	mov	r11, r27
     bc8:	3e c0       	rjmp	.+124    	; 0xc46 <strtol+0x114>
     bca:	fa e0       	ldi	r31, 0x0A	; 10
     bcc:	ef 16       	cp	r14, r31
     bce:	f1 04       	cpc	r15, r1
     bd0:	39 f0       	breq	.+14     	; 0xbe0 <strtol+0xae>
     bd2:	20 e1       	ldi	r18, 0x10	; 16
     bd4:	e2 16       	cp	r14, r18
     bd6:	f1 04       	cpc	r15, r1
     bd8:	b1 f4       	brne	.+44     	; 0xc06 <strtol+0xd4>
     bda:	30 c0       	rjmp	.+96     	; 0xc3c <strtol+0x10a>
     bdc:	10 33       	cpi	r17, 0x30	; 48
     bde:	19 f1       	breq	.+70     	; 0xc26 <strtol+0xf4>
     be0:	fa e0       	ldi	r31, 0x0A	; 10
     be2:	ef 2e       	mov	r14, r31
     be4:	f1 2c       	mov	r15, r1
     be6:	ac ec       	ldi	r26, 0xCC	; 204
     be8:	8a 2e       	mov	r8, r26
     bea:	98 2c       	mov	r9, r8
     bec:	a8 2c       	mov	r10, r8
     bee:	ac e0       	ldi	r26, 0x0C	; 12
     bf0:	ba 2e       	mov	r11, r26
     bf2:	29 c0       	rjmp	.+82     	; 0xc46 <strtol+0x114>
     bf4:	78 e0       	ldi	r23, 0x08	; 8
     bf6:	e7 2e       	mov	r14, r23
     bf8:	f1 2c       	mov	r15, r1
     bfa:	81 2c       	mov	r8, r1
     bfc:	91 2c       	mov	r9, r1
     bfe:	a1 2c       	mov	r10, r1
     c00:	e0 e1       	ldi	r30, 0x10	; 16
     c02:	be 2e       	mov	r11, r30
     c04:	20 c0       	rjmp	.+64     	; 0xc46 <strtol+0x114>
     c06:	60 e0       	ldi	r22, 0x00	; 0
     c08:	70 e0       	ldi	r23, 0x00	; 0
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	90 e8       	ldi	r25, 0x80	; 128
     c0e:	97 01       	movw	r18, r14
     c10:	0f 2c       	mov	r0, r15
     c12:	00 0c       	add	r0, r0
     c14:	44 0b       	sbc	r20, r20
     c16:	55 0b       	sbc	r21, r21
     c18:	0e 94 cf 09 	call	0x139e	; 0x139e <__udivmodsi4>
     c1c:	49 01       	movw	r8, r18
     c1e:	5a 01       	movw	r10, r20
     c20:	12 c0       	rjmp	.+36     	; 0xc46 <strtol+0x114>
     c22:	10 33       	cpi	r17, 0x30	; 48
     c24:	59 f4       	brne	.+22     	; 0xc3c <strtol+0x10a>
     c26:	88 81       	ld	r24, Y
     c28:	8f 7d       	andi	r24, 0xDF	; 223
     c2a:	88 35       	cpi	r24, 0x58	; 88
     c2c:	09 f0       	breq	.+2      	; 0xc30 <strtol+0xfe>
     c2e:	ba cf       	rjmp	.-140    	; 0xba4 <strtol+0x72>
     c30:	19 81       	ldd	r17, Y+1	; 0x01
     c32:	22 96       	adiw	r28, 0x02	; 2
     c34:	02 60       	ori	r16, 0x02	; 2
     c36:	80 e1       	ldi	r24, 0x10	; 16
     c38:	e8 2e       	mov	r14, r24
     c3a:	f1 2c       	mov	r15, r1
     c3c:	81 2c       	mov	r8, r1
     c3e:	91 2c       	mov	r9, r1
     c40:	a1 2c       	mov	r10, r1
     c42:	68 e0       	ldi	r22, 0x08	; 8
     c44:	b6 2e       	mov	r11, r22
     c46:	40 e0       	ldi	r20, 0x00	; 0
     c48:	60 e0       	ldi	r22, 0x00	; 0
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	cb 01       	movw	r24, r22
     c4e:	27 01       	movw	r4, r14
     c50:	0f 2c       	mov	r0, r15
     c52:	00 0c       	add	r0, r0
     c54:	66 08       	sbc	r6, r6
     c56:	77 08       	sbc	r7, r7
     c58:	fe 01       	movw	r30, r28
     c5a:	50 ed       	ldi	r21, 0xD0	; 208
     c5c:	35 2e       	mov	r3, r21
     c5e:	31 0e       	add	r3, r17
     c60:	29 e0       	ldi	r18, 0x09	; 9
     c62:	23 15       	cp	r18, r3
     c64:	70 f4       	brcc	.+28     	; 0xc82 <strtol+0x150>
     c66:	2f eb       	ldi	r18, 0xBF	; 191
     c68:	21 0f       	add	r18, r17
     c6a:	2a 31       	cpi	r18, 0x1A	; 26
     c6c:	18 f4       	brcc	.+6      	; 0xc74 <strtol+0x142>
     c6e:	39 ec       	ldi	r19, 0xC9	; 201
     c70:	33 2e       	mov	r3, r19
     c72:	06 c0       	rjmp	.+12     	; 0xc80 <strtol+0x14e>
     c74:	2f e9       	ldi	r18, 0x9F	; 159
     c76:	21 0f       	add	r18, r17
     c78:	2a 31       	cpi	r18, 0x1A	; 26
     c7a:	18 f5       	brcc	.+70     	; 0xcc2 <strtol+0x190>
     c7c:	29 ea       	ldi	r18, 0xA9	; 169
     c7e:	32 2e       	mov	r3, r18
     c80:	31 0e       	add	r3, r17
     c82:	23 2d       	mov	r18, r3
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	2e 15       	cp	r18, r14
     c88:	3f 05       	cpc	r19, r15
     c8a:	dc f4       	brge	.+54     	; 0xcc2 <strtol+0x190>
     c8c:	47 fd       	sbrc	r20, 7
     c8e:	16 c0       	rjmp	.+44     	; 0xcbc <strtol+0x18a>
     c90:	86 16       	cp	r8, r22
     c92:	97 06       	cpc	r9, r23
     c94:	a8 06       	cpc	r10, r24
     c96:	b9 06       	cpc	r11, r25
     c98:	70 f0       	brcs	.+28     	; 0xcb6 <strtol+0x184>
     c9a:	a3 01       	movw	r20, r6
     c9c:	92 01       	movw	r18, r4
     c9e:	0e 94 bf 09 	call	0x137e	; 0x137e <__mulsi3>
     ca2:	63 0d       	add	r22, r3
     ca4:	71 1d       	adc	r23, r1
     ca6:	81 1d       	adc	r24, r1
     ca8:	91 1d       	adc	r25, r1
     caa:	61 30       	cpi	r22, 0x01	; 1
     cac:	71 05       	cpc	r23, r1
     cae:	81 05       	cpc	r24, r1
     cb0:	20 e8       	ldi	r18, 0x80	; 128
     cb2:	92 07       	cpc	r25, r18
     cb4:	10 f0       	brcs	.+4      	; 0xcba <strtol+0x188>
     cb6:	4f ef       	ldi	r20, 0xFF	; 255
     cb8:	01 c0       	rjmp	.+2      	; 0xcbc <strtol+0x18a>
     cba:	41 e0       	ldi	r20, 0x01	; 1
     cbc:	21 96       	adiw	r28, 0x01	; 1
     cbe:	10 81       	ld	r17, Z
     cc0:	cb cf       	rjmp	.-106    	; 0xc58 <strtol+0x126>
     cc2:	20 2f       	mov	r18, r16
     cc4:	21 70       	andi	r18, 0x01	; 1
     cc6:	c1 14       	cp	r12, r1
     cc8:	d1 04       	cpc	r13, r1
     cca:	71 f0       	breq	.+28     	; 0xce8 <strtol+0x1b6>
     ccc:	44 23       	and	r20, r20
     cce:	29 f0       	breq	.+10     	; 0xcda <strtol+0x1a8>
     cd0:	21 97       	sbiw	r28, 0x01	; 1
     cd2:	f6 01       	movw	r30, r12
     cd4:	d1 83       	std	Z+1, r29	; 0x01
     cd6:	c0 83       	st	Z, r28
     cd8:	07 c0       	rjmp	.+14     	; 0xce8 <strtol+0x1b6>
     cda:	01 ff       	sbrs	r16, 1
     cdc:	19 c0       	rjmp	.+50     	; 0xd10 <strtol+0x1de>
     cde:	22 97       	sbiw	r28, 0x02	; 2
     ce0:	f6 01       	movw	r30, r12
     ce2:	d1 83       	std	Z+1, r29	; 0x01
     ce4:	c0 83       	st	Z, r28
     ce6:	14 c0       	rjmp	.+40     	; 0xd10 <strtol+0x1de>
     ce8:	47 ff       	sbrs	r20, 7
     cea:	12 c0       	rjmp	.+36     	; 0xd10 <strtol+0x1de>
     cec:	22 23       	and	r18, r18
     cee:	29 f0       	breq	.+10     	; 0xcfa <strtol+0x1c8>
     cf0:	60 e0       	ldi	r22, 0x00	; 0
     cf2:	70 e0       	ldi	r23, 0x00	; 0
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	90 e8       	ldi	r25, 0x80	; 128
     cf8:	04 c0       	rjmp	.+8      	; 0xd02 <strtol+0x1d0>
     cfa:	6f ef       	ldi	r22, 0xFF	; 255
     cfc:	7f ef       	ldi	r23, 0xFF	; 255
     cfe:	8f ef       	ldi	r24, 0xFF	; 255
     d00:	9f e7       	ldi	r25, 0x7F	; 127
     d02:	22 e2       	ldi	r18, 0x22	; 34
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	30 93 fd 02 	sts	0x02FD, r19	; 0x8002fd <errno+0x1>
     d0a:	20 93 fc 02 	sts	0x02FC, r18	; 0x8002fc <errno>
     d0e:	09 c0       	rjmp	.+18     	; 0xd22 <strtol+0x1f0>
     d10:	22 23       	and	r18, r18
     d12:	81 f0       	breq	.+32     	; 0xd34 <strtol+0x202>
     d14:	90 95       	com	r25
     d16:	80 95       	com	r24
     d18:	70 95       	com	r23
     d1a:	61 95       	neg	r22
     d1c:	7f 4f       	sbci	r23, 0xFF	; 255
     d1e:	8f 4f       	sbci	r24, 0xFF	; 255
     d20:	9f 4f       	sbci	r25, 0xFF	; 255
     d22:	46 2f       	mov	r20, r22
     d24:	37 2f       	mov	r19, r23
     d26:	28 2f       	mov	r18, r24
     d28:	12 c0       	rjmp	.+36     	; 0xd4e <strtol+0x21c>
     d2a:	40 e0       	ldi	r20, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	0d c0       	rjmp	.+26     	; 0xd4e <strtol+0x21c>
     d34:	97 ff       	sbrs	r25, 7
     d36:	f5 cf       	rjmp	.-22     	; 0xd22 <strtol+0x1f0>
     d38:	82 e2       	ldi	r24, 0x22	; 34
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <errno+0x1>
     d40:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <errno>
     d44:	6f ef       	ldi	r22, 0xFF	; 255
     d46:	7f ef       	ldi	r23, 0xFF	; 255
     d48:	8f ef       	ldi	r24, 0xFF	; 255
     d4a:	9f e7       	ldi	r25, 0x7F	; 127
     d4c:	ea cf       	rjmp	.-44     	; 0xd22 <strtol+0x1f0>
     d4e:	64 2f       	mov	r22, r20
     d50:	73 2f       	mov	r23, r19
     d52:	82 2f       	mov	r24, r18
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
     d58:	e1 e1       	ldi	r30, 0x11	; 17
     d5a:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <__epilogue_restores__+0x2>

00000d5e <isspace>:
     d5e:	91 11       	cpse	r25, r1
     d60:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__ctype_isfalse>
     d64:	80 32       	cpi	r24, 0x20	; 32
     d66:	19 f0       	breq	.+6      	; 0xd6e <isspace+0x10>
     d68:	89 50       	subi	r24, 0x09	; 9
     d6a:	85 50       	subi	r24, 0x05	; 5
     d6c:	c8 f7       	brcc	.-14     	; 0xd60 <isspace+0x2>
     d6e:	08 95       	ret

00000d70 <strchr>:
     d70:	fc 01       	movw	r30, r24
     d72:	81 91       	ld	r24, Z+
     d74:	86 17       	cp	r24, r22
     d76:	21 f0       	breq	.+8      	; 0xd80 <strchr+0x10>
     d78:	88 23       	and	r24, r24
     d7a:	d9 f7       	brne	.-10     	; 0xd72 <strchr+0x2>
     d7c:	99 27       	eor	r25, r25
     d7e:	08 95       	ret
     d80:	31 97       	sbiw	r30, 0x01	; 1
     d82:	cf 01       	movw	r24, r30
     d84:	08 95       	ret

00000d86 <strcmp>:
     d86:	fb 01       	movw	r30, r22
     d88:	dc 01       	movw	r26, r24
     d8a:	8d 91       	ld	r24, X+
     d8c:	01 90       	ld	r0, Z+
     d8e:	80 19       	sub	r24, r0
     d90:	01 10       	cpse	r0, r1
     d92:	d9 f3       	breq	.-10     	; 0xd8a <strcmp+0x4>
     d94:	99 0b       	sbc	r25, r25
     d96:	08 95       	ret

00000d98 <strncpy>:
     d98:	fb 01       	movw	r30, r22
     d9a:	dc 01       	movw	r26, r24
     d9c:	41 50       	subi	r20, 0x01	; 1
     d9e:	50 40       	sbci	r21, 0x00	; 0
     da0:	48 f0       	brcs	.+18     	; 0xdb4 <strncpy+0x1c>
     da2:	01 90       	ld	r0, Z+
     da4:	0d 92       	st	X+, r0
     da6:	00 20       	and	r0, r0
     da8:	c9 f7       	brne	.-14     	; 0xd9c <strncpy+0x4>
     daa:	01 c0       	rjmp	.+2      	; 0xdae <strncpy+0x16>
     dac:	1d 92       	st	X+, r1
     dae:	41 50       	subi	r20, 0x01	; 1
     db0:	50 40       	sbci	r21, 0x00	; 0
     db2:	e0 f7       	brcc	.-8      	; 0xdac <strncpy+0x14>
     db4:	08 95       	ret

00000db6 <printf>:
     db6:	a0 e0       	ldi	r26, 0x00	; 0
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e1 ee       	ldi	r30, 0xE1	; 225
     dbc:	f6 e0       	ldi	r31, 0x06	; 6
     dbe:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <__prologue_saves__+0x20>
     dc2:	ae 01       	movw	r20, r28
     dc4:	4b 5f       	subi	r20, 0xFB	; 251
     dc6:	5f 4f       	sbci	r21, 0xFF	; 255
     dc8:	fa 01       	movw	r30, r20
     dca:	61 91       	ld	r22, Z+
     dcc:	71 91       	ld	r23, Z+
     dce:	af 01       	movw	r20, r30
     dd0:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <__iob+0x2>
     dd4:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <__iob+0x3>
     dd8:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <vfprintf>
     ddc:	e2 e0       	ldi	r30, 0x02	; 2
     dde:	0c 94 28 0a 	jmp	0x1450	; 0x1450 <__epilogue_restores__+0x20>

00000de2 <putchar>:
     de2:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <__iob+0x2>
     de6:	70 91 f9 02 	lds	r23, 0x02F9	; 0x8002f9 <__iob+0x3>
     dea:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <fputc>
     dee:	08 95       	ret

00000df0 <vfprintf>:
     df0:	ab e0       	ldi	r26, 0x0B	; 11
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	ee ef       	ldi	r30, 0xFE	; 254
     df6:	f6 e0       	ldi	r31, 0x06	; 6
     df8:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__prologue_saves__>
     dfc:	6c 01       	movw	r12, r24
     dfe:	7b 01       	movw	r14, r22
     e00:	8a 01       	movw	r16, r20
     e02:	fc 01       	movw	r30, r24
     e04:	17 82       	std	Z+7, r1	; 0x07
     e06:	16 82       	std	Z+6, r1	; 0x06
     e08:	83 81       	ldd	r24, Z+3	; 0x03
     e0a:	81 ff       	sbrs	r24, 1
     e0c:	cc c1       	rjmp	.+920    	; 0x11a6 <vfprintf+0x3b6>
     e0e:	ce 01       	movw	r24, r28
     e10:	01 96       	adiw	r24, 0x01	; 1
     e12:	3c 01       	movw	r6, r24
     e14:	f6 01       	movw	r30, r12
     e16:	93 81       	ldd	r25, Z+3	; 0x03
     e18:	f7 01       	movw	r30, r14
     e1a:	93 fd       	sbrc	r25, 3
     e1c:	85 91       	lpm	r24, Z+
     e1e:	93 ff       	sbrs	r25, 3
     e20:	81 91       	ld	r24, Z+
     e22:	7f 01       	movw	r14, r30
     e24:	88 23       	and	r24, r24
     e26:	09 f4       	brne	.+2      	; 0xe2a <vfprintf+0x3a>
     e28:	ba c1       	rjmp	.+884    	; 0x119e <vfprintf+0x3ae>
     e2a:	85 32       	cpi	r24, 0x25	; 37
     e2c:	39 f4       	brne	.+14     	; 0xe3c <vfprintf+0x4c>
     e2e:	93 fd       	sbrc	r25, 3
     e30:	85 91       	lpm	r24, Z+
     e32:	93 ff       	sbrs	r25, 3
     e34:	81 91       	ld	r24, Z+
     e36:	7f 01       	movw	r14, r30
     e38:	85 32       	cpi	r24, 0x25	; 37
     e3a:	29 f4       	brne	.+10     	; 0xe46 <vfprintf+0x56>
     e3c:	b6 01       	movw	r22, r12
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <fputc>
     e44:	e7 cf       	rjmp	.-50     	; 0xe14 <vfprintf+0x24>
     e46:	91 2c       	mov	r9, r1
     e48:	21 2c       	mov	r2, r1
     e4a:	31 2c       	mov	r3, r1
     e4c:	ff e1       	ldi	r31, 0x1F	; 31
     e4e:	f3 15       	cp	r31, r3
     e50:	d8 f0       	brcs	.+54     	; 0xe88 <vfprintf+0x98>
     e52:	8b 32       	cpi	r24, 0x2B	; 43
     e54:	79 f0       	breq	.+30     	; 0xe74 <vfprintf+0x84>
     e56:	38 f4       	brcc	.+14     	; 0xe66 <vfprintf+0x76>
     e58:	80 32       	cpi	r24, 0x20	; 32
     e5a:	79 f0       	breq	.+30     	; 0xe7a <vfprintf+0x8a>
     e5c:	83 32       	cpi	r24, 0x23	; 35
     e5e:	a1 f4       	brne	.+40     	; 0xe88 <vfprintf+0x98>
     e60:	23 2d       	mov	r18, r3
     e62:	20 61       	ori	r18, 0x10	; 16
     e64:	1d c0       	rjmp	.+58     	; 0xea0 <vfprintf+0xb0>
     e66:	8d 32       	cpi	r24, 0x2D	; 45
     e68:	61 f0       	breq	.+24     	; 0xe82 <vfprintf+0x92>
     e6a:	80 33       	cpi	r24, 0x30	; 48
     e6c:	69 f4       	brne	.+26     	; 0xe88 <vfprintf+0x98>
     e6e:	23 2d       	mov	r18, r3
     e70:	21 60       	ori	r18, 0x01	; 1
     e72:	16 c0       	rjmp	.+44     	; 0xea0 <vfprintf+0xb0>
     e74:	83 2d       	mov	r24, r3
     e76:	82 60       	ori	r24, 0x02	; 2
     e78:	38 2e       	mov	r3, r24
     e7a:	e3 2d       	mov	r30, r3
     e7c:	e4 60       	ori	r30, 0x04	; 4
     e7e:	3e 2e       	mov	r3, r30
     e80:	2a c0       	rjmp	.+84     	; 0xed6 <vfprintf+0xe6>
     e82:	f3 2d       	mov	r31, r3
     e84:	f8 60       	ori	r31, 0x08	; 8
     e86:	1d c0       	rjmp	.+58     	; 0xec2 <vfprintf+0xd2>
     e88:	37 fc       	sbrc	r3, 7
     e8a:	2d c0       	rjmp	.+90     	; 0xee6 <vfprintf+0xf6>
     e8c:	20 ed       	ldi	r18, 0xD0	; 208
     e8e:	28 0f       	add	r18, r24
     e90:	2a 30       	cpi	r18, 0x0A	; 10
     e92:	40 f0       	brcs	.+16     	; 0xea4 <vfprintf+0xb4>
     e94:	8e 32       	cpi	r24, 0x2E	; 46
     e96:	b9 f4       	brne	.+46     	; 0xec6 <vfprintf+0xd6>
     e98:	36 fc       	sbrc	r3, 6
     e9a:	81 c1       	rjmp	.+770    	; 0x119e <vfprintf+0x3ae>
     e9c:	23 2d       	mov	r18, r3
     e9e:	20 64       	ori	r18, 0x40	; 64
     ea0:	32 2e       	mov	r3, r18
     ea2:	19 c0       	rjmp	.+50     	; 0xed6 <vfprintf+0xe6>
     ea4:	36 fe       	sbrs	r3, 6
     ea6:	06 c0       	rjmp	.+12     	; 0xeb4 <vfprintf+0xc4>
     ea8:	8a e0       	ldi	r24, 0x0A	; 10
     eaa:	98 9e       	mul	r9, r24
     eac:	20 0d       	add	r18, r0
     eae:	11 24       	eor	r1, r1
     eb0:	92 2e       	mov	r9, r18
     eb2:	11 c0       	rjmp	.+34     	; 0xed6 <vfprintf+0xe6>
     eb4:	ea e0       	ldi	r30, 0x0A	; 10
     eb6:	2e 9e       	mul	r2, r30
     eb8:	20 0d       	add	r18, r0
     eba:	11 24       	eor	r1, r1
     ebc:	22 2e       	mov	r2, r18
     ebe:	f3 2d       	mov	r31, r3
     ec0:	f0 62       	ori	r31, 0x20	; 32
     ec2:	3f 2e       	mov	r3, r31
     ec4:	08 c0       	rjmp	.+16     	; 0xed6 <vfprintf+0xe6>
     ec6:	8c 36       	cpi	r24, 0x6C	; 108
     ec8:	21 f4       	brne	.+8      	; 0xed2 <vfprintf+0xe2>
     eca:	83 2d       	mov	r24, r3
     ecc:	80 68       	ori	r24, 0x80	; 128
     ece:	38 2e       	mov	r3, r24
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <vfprintf+0xe6>
     ed2:	88 36       	cpi	r24, 0x68	; 104
     ed4:	41 f4       	brne	.+16     	; 0xee6 <vfprintf+0xf6>
     ed6:	f7 01       	movw	r30, r14
     ed8:	93 fd       	sbrc	r25, 3
     eda:	85 91       	lpm	r24, Z+
     edc:	93 ff       	sbrs	r25, 3
     ede:	81 91       	ld	r24, Z+
     ee0:	7f 01       	movw	r14, r30
     ee2:	81 11       	cpse	r24, r1
     ee4:	b3 cf       	rjmp	.-154    	; 0xe4c <vfprintf+0x5c>
     ee6:	98 2f       	mov	r25, r24
     ee8:	9f 7d       	andi	r25, 0xDF	; 223
     eea:	95 54       	subi	r25, 0x45	; 69
     eec:	93 30       	cpi	r25, 0x03	; 3
     eee:	28 f4       	brcc	.+10     	; 0xefa <vfprintf+0x10a>
     ef0:	0c 5f       	subi	r16, 0xFC	; 252
     ef2:	1f 4f       	sbci	r17, 0xFF	; 255
     ef4:	9f e3       	ldi	r25, 0x3F	; 63
     ef6:	99 83       	std	Y+1, r25	; 0x01
     ef8:	0d c0       	rjmp	.+26     	; 0xf14 <vfprintf+0x124>
     efa:	83 36       	cpi	r24, 0x63	; 99
     efc:	31 f0       	breq	.+12     	; 0xf0a <vfprintf+0x11a>
     efe:	83 37       	cpi	r24, 0x73	; 115
     f00:	71 f0       	breq	.+28     	; 0xf1e <vfprintf+0x12e>
     f02:	83 35       	cpi	r24, 0x53	; 83
     f04:	09 f0       	breq	.+2      	; 0xf08 <vfprintf+0x118>
     f06:	59 c0       	rjmp	.+178    	; 0xfba <vfprintf+0x1ca>
     f08:	21 c0       	rjmp	.+66     	; 0xf4c <vfprintf+0x15c>
     f0a:	f8 01       	movw	r30, r16
     f0c:	80 81       	ld	r24, Z
     f0e:	89 83       	std	Y+1, r24	; 0x01
     f10:	0e 5f       	subi	r16, 0xFE	; 254
     f12:	1f 4f       	sbci	r17, 0xFF	; 255
     f14:	88 24       	eor	r8, r8
     f16:	83 94       	inc	r8
     f18:	91 2c       	mov	r9, r1
     f1a:	53 01       	movw	r10, r6
     f1c:	13 c0       	rjmp	.+38     	; 0xf44 <vfprintf+0x154>
     f1e:	28 01       	movw	r4, r16
     f20:	f2 e0       	ldi	r31, 0x02	; 2
     f22:	4f 0e       	add	r4, r31
     f24:	51 1c       	adc	r5, r1
     f26:	f8 01       	movw	r30, r16
     f28:	a0 80       	ld	r10, Z
     f2a:	b1 80       	ldd	r11, Z+1	; 0x01
     f2c:	36 fe       	sbrs	r3, 6
     f2e:	03 c0       	rjmp	.+6      	; 0xf36 <vfprintf+0x146>
     f30:	69 2d       	mov	r22, r9
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <vfprintf+0x14a>
     f36:	6f ef       	ldi	r22, 0xFF	; 255
     f38:	7f ef       	ldi	r23, 0xFF	; 255
     f3a:	c5 01       	movw	r24, r10
     f3c:	0e 94 e7 08 	call	0x11ce	; 0x11ce <strnlen>
     f40:	4c 01       	movw	r8, r24
     f42:	82 01       	movw	r16, r4
     f44:	f3 2d       	mov	r31, r3
     f46:	ff 77       	andi	r31, 0x7F	; 127
     f48:	3f 2e       	mov	r3, r31
     f4a:	16 c0       	rjmp	.+44     	; 0xf78 <vfprintf+0x188>
     f4c:	28 01       	movw	r4, r16
     f4e:	22 e0       	ldi	r18, 0x02	; 2
     f50:	42 0e       	add	r4, r18
     f52:	51 1c       	adc	r5, r1
     f54:	f8 01       	movw	r30, r16
     f56:	a0 80       	ld	r10, Z
     f58:	b1 80       	ldd	r11, Z+1	; 0x01
     f5a:	36 fe       	sbrs	r3, 6
     f5c:	03 c0       	rjmp	.+6      	; 0xf64 <vfprintf+0x174>
     f5e:	69 2d       	mov	r22, r9
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <vfprintf+0x178>
     f64:	6f ef       	ldi	r22, 0xFF	; 255
     f66:	7f ef       	ldi	r23, 0xFF	; 255
     f68:	c5 01       	movw	r24, r10
     f6a:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <strnlen_P>
     f6e:	4c 01       	movw	r8, r24
     f70:	f3 2d       	mov	r31, r3
     f72:	f0 68       	ori	r31, 0x80	; 128
     f74:	3f 2e       	mov	r3, r31
     f76:	82 01       	movw	r16, r4
     f78:	33 fc       	sbrc	r3, 3
     f7a:	1b c0       	rjmp	.+54     	; 0xfb2 <vfprintf+0x1c2>
     f7c:	82 2d       	mov	r24, r2
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	88 16       	cp	r8, r24
     f82:	99 06       	cpc	r9, r25
     f84:	b0 f4       	brcc	.+44     	; 0xfb2 <vfprintf+0x1c2>
     f86:	b6 01       	movw	r22, r12
     f88:	80 e2       	ldi	r24, 0x20	; 32
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <fputc>
     f90:	2a 94       	dec	r2
     f92:	f4 cf       	rjmp	.-24     	; 0xf7c <vfprintf+0x18c>
     f94:	f5 01       	movw	r30, r10
     f96:	37 fc       	sbrc	r3, 7
     f98:	85 91       	lpm	r24, Z+
     f9a:	37 fe       	sbrs	r3, 7
     f9c:	81 91       	ld	r24, Z+
     f9e:	5f 01       	movw	r10, r30
     fa0:	b6 01       	movw	r22, r12
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <fputc>
     fa8:	21 10       	cpse	r2, r1
     faa:	2a 94       	dec	r2
     fac:	21 e0       	ldi	r18, 0x01	; 1
     fae:	82 1a       	sub	r8, r18
     fb0:	91 08       	sbc	r9, r1
     fb2:	81 14       	cp	r8, r1
     fb4:	91 04       	cpc	r9, r1
     fb6:	71 f7       	brne	.-36     	; 0xf94 <vfprintf+0x1a4>
     fb8:	e8 c0       	rjmp	.+464    	; 0x118a <vfprintf+0x39a>
     fba:	84 36       	cpi	r24, 0x64	; 100
     fbc:	11 f0       	breq	.+4      	; 0xfc2 <vfprintf+0x1d2>
     fbe:	89 36       	cpi	r24, 0x69	; 105
     fc0:	41 f5       	brne	.+80     	; 0x1012 <vfprintf+0x222>
     fc2:	f8 01       	movw	r30, r16
     fc4:	37 fe       	sbrs	r3, 7
     fc6:	07 c0       	rjmp	.+14     	; 0xfd6 <vfprintf+0x1e6>
     fc8:	60 81       	ld	r22, Z
     fca:	71 81       	ldd	r23, Z+1	; 0x01
     fcc:	82 81       	ldd	r24, Z+2	; 0x02
     fce:	93 81       	ldd	r25, Z+3	; 0x03
     fd0:	0c 5f       	subi	r16, 0xFC	; 252
     fd2:	1f 4f       	sbci	r17, 0xFF	; 255
     fd4:	08 c0       	rjmp	.+16     	; 0xfe6 <vfprintf+0x1f6>
     fd6:	60 81       	ld	r22, Z
     fd8:	71 81       	ldd	r23, Z+1	; 0x01
     fda:	07 2e       	mov	r0, r23
     fdc:	00 0c       	add	r0, r0
     fde:	88 0b       	sbc	r24, r24
     fe0:	99 0b       	sbc	r25, r25
     fe2:	0e 5f       	subi	r16, 0xFE	; 254
     fe4:	1f 4f       	sbci	r17, 0xFF	; 255
     fe6:	f3 2d       	mov	r31, r3
     fe8:	ff 76       	andi	r31, 0x6F	; 111
     fea:	3f 2e       	mov	r3, r31
     fec:	97 ff       	sbrs	r25, 7
     fee:	09 c0       	rjmp	.+18     	; 0x1002 <vfprintf+0x212>
     ff0:	90 95       	com	r25
     ff2:	80 95       	com	r24
     ff4:	70 95       	com	r23
     ff6:	61 95       	neg	r22
     ff8:	7f 4f       	sbci	r23, 0xFF	; 255
     ffa:	8f 4f       	sbci	r24, 0xFF	; 255
     ffc:	9f 4f       	sbci	r25, 0xFF	; 255
     ffe:	f0 68       	ori	r31, 0x80	; 128
    1000:	3f 2e       	mov	r3, r31
    1002:	2a e0       	ldi	r18, 0x0A	; 10
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	a3 01       	movw	r20, r6
    1008:	0e 94 2e 09 	call	0x125c	; 0x125c <__ultoa_invert>
    100c:	88 2e       	mov	r8, r24
    100e:	86 18       	sub	r8, r6
    1010:	45 c0       	rjmp	.+138    	; 0x109c <vfprintf+0x2ac>
    1012:	85 37       	cpi	r24, 0x75	; 117
    1014:	31 f4       	brne	.+12     	; 0x1022 <vfprintf+0x232>
    1016:	23 2d       	mov	r18, r3
    1018:	2f 7e       	andi	r18, 0xEF	; 239
    101a:	b2 2e       	mov	r11, r18
    101c:	2a e0       	ldi	r18, 0x0A	; 10
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	25 c0       	rjmp	.+74     	; 0x106c <vfprintf+0x27c>
    1022:	93 2d       	mov	r25, r3
    1024:	99 7f       	andi	r25, 0xF9	; 249
    1026:	b9 2e       	mov	r11, r25
    1028:	8f 36       	cpi	r24, 0x6F	; 111
    102a:	c1 f0       	breq	.+48     	; 0x105c <vfprintf+0x26c>
    102c:	18 f4       	brcc	.+6      	; 0x1034 <vfprintf+0x244>
    102e:	88 35       	cpi	r24, 0x58	; 88
    1030:	79 f0       	breq	.+30     	; 0x1050 <vfprintf+0x260>
    1032:	b5 c0       	rjmp	.+362    	; 0x119e <vfprintf+0x3ae>
    1034:	80 37       	cpi	r24, 0x70	; 112
    1036:	19 f0       	breq	.+6      	; 0x103e <vfprintf+0x24e>
    1038:	88 37       	cpi	r24, 0x78	; 120
    103a:	21 f0       	breq	.+8      	; 0x1044 <vfprintf+0x254>
    103c:	b0 c0       	rjmp	.+352    	; 0x119e <vfprintf+0x3ae>
    103e:	e9 2f       	mov	r30, r25
    1040:	e0 61       	ori	r30, 0x10	; 16
    1042:	be 2e       	mov	r11, r30
    1044:	b4 fe       	sbrs	r11, 4
    1046:	0d c0       	rjmp	.+26     	; 0x1062 <vfprintf+0x272>
    1048:	fb 2d       	mov	r31, r11
    104a:	f4 60       	ori	r31, 0x04	; 4
    104c:	bf 2e       	mov	r11, r31
    104e:	09 c0       	rjmp	.+18     	; 0x1062 <vfprintf+0x272>
    1050:	34 fe       	sbrs	r3, 4
    1052:	0a c0       	rjmp	.+20     	; 0x1068 <vfprintf+0x278>
    1054:	29 2f       	mov	r18, r25
    1056:	26 60       	ori	r18, 0x06	; 6
    1058:	b2 2e       	mov	r11, r18
    105a:	06 c0       	rjmp	.+12     	; 0x1068 <vfprintf+0x278>
    105c:	28 e0       	ldi	r18, 0x08	; 8
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	05 c0       	rjmp	.+10     	; 0x106c <vfprintf+0x27c>
    1062:	20 e1       	ldi	r18, 0x10	; 16
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	02 c0       	rjmp	.+4      	; 0x106c <vfprintf+0x27c>
    1068:	20 e1       	ldi	r18, 0x10	; 16
    106a:	32 e0       	ldi	r19, 0x02	; 2
    106c:	f8 01       	movw	r30, r16
    106e:	b7 fe       	sbrs	r11, 7
    1070:	07 c0       	rjmp	.+14     	; 0x1080 <vfprintf+0x290>
    1072:	60 81       	ld	r22, Z
    1074:	71 81       	ldd	r23, Z+1	; 0x01
    1076:	82 81       	ldd	r24, Z+2	; 0x02
    1078:	93 81       	ldd	r25, Z+3	; 0x03
    107a:	0c 5f       	subi	r16, 0xFC	; 252
    107c:	1f 4f       	sbci	r17, 0xFF	; 255
    107e:	06 c0       	rjmp	.+12     	; 0x108c <vfprintf+0x29c>
    1080:	60 81       	ld	r22, Z
    1082:	71 81       	ldd	r23, Z+1	; 0x01
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	0e 5f       	subi	r16, 0xFE	; 254
    108a:	1f 4f       	sbci	r17, 0xFF	; 255
    108c:	a3 01       	movw	r20, r6
    108e:	0e 94 2e 09 	call	0x125c	; 0x125c <__ultoa_invert>
    1092:	88 2e       	mov	r8, r24
    1094:	86 18       	sub	r8, r6
    1096:	fb 2d       	mov	r31, r11
    1098:	ff 77       	andi	r31, 0x7F	; 127
    109a:	3f 2e       	mov	r3, r31
    109c:	36 fe       	sbrs	r3, 6
    109e:	0d c0       	rjmp	.+26     	; 0x10ba <vfprintf+0x2ca>
    10a0:	23 2d       	mov	r18, r3
    10a2:	2e 7f       	andi	r18, 0xFE	; 254
    10a4:	a2 2e       	mov	r10, r18
    10a6:	89 14       	cp	r8, r9
    10a8:	58 f4       	brcc	.+22     	; 0x10c0 <vfprintf+0x2d0>
    10aa:	34 fe       	sbrs	r3, 4
    10ac:	0b c0       	rjmp	.+22     	; 0x10c4 <vfprintf+0x2d4>
    10ae:	32 fc       	sbrc	r3, 2
    10b0:	09 c0       	rjmp	.+18     	; 0x10c4 <vfprintf+0x2d4>
    10b2:	83 2d       	mov	r24, r3
    10b4:	8e 7e       	andi	r24, 0xEE	; 238
    10b6:	a8 2e       	mov	r10, r24
    10b8:	05 c0       	rjmp	.+10     	; 0x10c4 <vfprintf+0x2d4>
    10ba:	b8 2c       	mov	r11, r8
    10bc:	a3 2c       	mov	r10, r3
    10be:	03 c0       	rjmp	.+6      	; 0x10c6 <vfprintf+0x2d6>
    10c0:	b8 2c       	mov	r11, r8
    10c2:	01 c0       	rjmp	.+2      	; 0x10c6 <vfprintf+0x2d6>
    10c4:	b9 2c       	mov	r11, r9
    10c6:	a4 fe       	sbrs	r10, 4
    10c8:	0f c0       	rjmp	.+30     	; 0x10e8 <vfprintf+0x2f8>
    10ca:	fe 01       	movw	r30, r28
    10cc:	e8 0d       	add	r30, r8
    10ce:	f1 1d       	adc	r31, r1
    10d0:	80 81       	ld	r24, Z
    10d2:	80 33       	cpi	r24, 0x30	; 48
    10d4:	21 f4       	brne	.+8      	; 0x10de <vfprintf+0x2ee>
    10d6:	9a 2d       	mov	r25, r10
    10d8:	99 7e       	andi	r25, 0xE9	; 233
    10da:	a9 2e       	mov	r10, r25
    10dc:	09 c0       	rjmp	.+18     	; 0x10f0 <vfprintf+0x300>
    10de:	a2 fe       	sbrs	r10, 2
    10e0:	06 c0       	rjmp	.+12     	; 0x10ee <vfprintf+0x2fe>
    10e2:	b3 94       	inc	r11
    10e4:	b3 94       	inc	r11
    10e6:	04 c0       	rjmp	.+8      	; 0x10f0 <vfprintf+0x300>
    10e8:	8a 2d       	mov	r24, r10
    10ea:	86 78       	andi	r24, 0x86	; 134
    10ec:	09 f0       	breq	.+2      	; 0x10f0 <vfprintf+0x300>
    10ee:	b3 94       	inc	r11
    10f0:	a3 fc       	sbrc	r10, 3
    10f2:	11 c0       	rjmp	.+34     	; 0x1116 <vfprintf+0x326>
    10f4:	a0 fe       	sbrs	r10, 0
    10f6:	06 c0       	rjmp	.+12     	; 0x1104 <vfprintf+0x314>
    10f8:	b2 14       	cp	r11, r2
    10fa:	88 f4       	brcc	.+34     	; 0x111e <vfprintf+0x32e>
    10fc:	28 0c       	add	r2, r8
    10fe:	92 2c       	mov	r9, r2
    1100:	9b 18       	sub	r9, r11
    1102:	0e c0       	rjmp	.+28     	; 0x1120 <vfprintf+0x330>
    1104:	b2 14       	cp	r11, r2
    1106:	60 f4       	brcc	.+24     	; 0x1120 <vfprintf+0x330>
    1108:	b6 01       	movw	r22, r12
    110a:	80 e2       	ldi	r24, 0x20	; 32
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <fputc>
    1112:	b3 94       	inc	r11
    1114:	f7 cf       	rjmp	.-18     	; 0x1104 <vfprintf+0x314>
    1116:	b2 14       	cp	r11, r2
    1118:	18 f4       	brcc	.+6      	; 0x1120 <vfprintf+0x330>
    111a:	2b 18       	sub	r2, r11
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <vfprintf+0x332>
    111e:	98 2c       	mov	r9, r8
    1120:	21 2c       	mov	r2, r1
    1122:	a4 fe       	sbrs	r10, 4
    1124:	10 c0       	rjmp	.+32     	; 0x1146 <vfprintf+0x356>
    1126:	b6 01       	movw	r22, r12
    1128:	80 e3       	ldi	r24, 0x30	; 48
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <fputc>
    1130:	a2 fe       	sbrs	r10, 2
    1132:	17 c0       	rjmp	.+46     	; 0x1162 <vfprintf+0x372>
    1134:	a1 fc       	sbrc	r10, 1
    1136:	03 c0       	rjmp	.+6      	; 0x113e <vfprintf+0x34e>
    1138:	88 e7       	ldi	r24, 0x78	; 120
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <vfprintf+0x352>
    113e:	88 e5       	ldi	r24, 0x58	; 88
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	b6 01       	movw	r22, r12
    1144:	0c c0       	rjmp	.+24     	; 0x115e <vfprintf+0x36e>
    1146:	8a 2d       	mov	r24, r10
    1148:	86 78       	andi	r24, 0x86	; 134
    114a:	59 f0       	breq	.+22     	; 0x1162 <vfprintf+0x372>
    114c:	a1 fe       	sbrs	r10, 1
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <vfprintf+0x364>
    1150:	8b e2       	ldi	r24, 0x2B	; 43
    1152:	01 c0       	rjmp	.+2      	; 0x1156 <vfprintf+0x366>
    1154:	80 e2       	ldi	r24, 0x20	; 32
    1156:	a7 fc       	sbrc	r10, 7
    1158:	8d e2       	ldi	r24, 0x2D	; 45
    115a:	b6 01       	movw	r22, r12
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <fputc>
    1162:	89 14       	cp	r8, r9
    1164:	38 f4       	brcc	.+14     	; 0x1174 <vfprintf+0x384>
    1166:	b6 01       	movw	r22, r12
    1168:	80 e3       	ldi	r24, 0x30	; 48
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <fputc>
    1170:	9a 94       	dec	r9
    1172:	f7 cf       	rjmp	.-18     	; 0x1162 <vfprintf+0x372>
    1174:	8a 94       	dec	r8
    1176:	f3 01       	movw	r30, r6
    1178:	e8 0d       	add	r30, r8
    117a:	f1 1d       	adc	r31, r1
    117c:	80 81       	ld	r24, Z
    117e:	b6 01       	movw	r22, r12
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <fputc>
    1186:	81 10       	cpse	r8, r1
    1188:	f5 cf       	rjmp	.-22     	; 0x1174 <vfprintf+0x384>
    118a:	22 20       	and	r2, r2
    118c:	09 f4       	brne	.+2      	; 0x1190 <vfprintf+0x3a0>
    118e:	42 ce       	rjmp	.-892    	; 0xe14 <vfprintf+0x24>
    1190:	b6 01       	movw	r22, r12
    1192:	80 e2       	ldi	r24, 0x20	; 32
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <fputc>
    119a:	2a 94       	dec	r2
    119c:	f6 cf       	rjmp	.-20     	; 0x118a <vfprintf+0x39a>
    119e:	f6 01       	movw	r30, r12
    11a0:	86 81       	ldd	r24, Z+6	; 0x06
    11a2:	97 81       	ldd	r25, Z+7	; 0x07
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <vfprintf+0x3ba>
    11a6:	8f ef       	ldi	r24, 0xFF	; 255
    11a8:	9f ef       	ldi	r25, 0xFF	; 255
    11aa:	2b 96       	adiw	r28, 0x0b	; 11
    11ac:	e2 e1       	ldi	r30, 0x12	; 18
    11ae:	0c 94 18 0a 	jmp	0x1430	; 0x1430 <__epilogue_restores__>

000011b2 <__ctype_isfalse>:
    11b2:	99 27       	eor	r25, r25
    11b4:	88 27       	eor	r24, r24

000011b6 <__ctype_istrue>:
    11b6:	08 95       	ret

000011b8 <strnlen_P>:
    11b8:	fc 01       	movw	r30, r24
    11ba:	05 90       	lpm	r0, Z+
    11bc:	61 50       	subi	r22, 0x01	; 1
    11be:	70 40       	sbci	r23, 0x00	; 0
    11c0:	01 10       	cpse	r0, r1
    11c2:	d8 f7       	brcc	.-10     	; 0x11ba <strnlen_P+0x2>
    11c4:	80 95       	com	r24
    11c6:	90 95       	com	r25
    11c8:	8e 0f       	add	r24, r30
    11ca:	9f 1f       	adc	r25, r31
    11cc:	08 95       	ret

000011ce <strnlen>:
    11ce:	fc 01       	movw	r30, r24
    11d0:	61 50       	subi	r22, 0x01	; 1
    11d2:	70 40       	sbci	r23, 0x00	; 0
    11d4:	01 90       	ld	r0, Z+
    11d6:	01 10       	cpse	r0, r1
    11d8:	d8 f7       	brcc	.-10     	; 0x11d0 <strnlen+0x2>
    11da:	80 95       	com	r24
    11dc:	90 95       	com	r25
    11de:	8e 0f       	add	r24, r30
    11e0:	9f 1f       	adc	r25, r31
    11e2:	08 95       	ret

000011e4 <fputc>:
    11e4:	0f 93       	push	r16
    11e6:	1f 93       	push	r17
    11e8:	cf 93       	push	r28
    11ea:	df 93       	push	r29
    11ec:	fb 01       	movw	r30, r22
    11ee:	23 81       	ldd	r18, Z+3	; 0x03
    11f0:	21 fd       	sbrc	r18, 1
    11f2:	03 c0       	rjmp	.+6      	; 0x11fa <fputc+0x16>
    11f4:	8f ef       	ldi	r24, 0xFF	; 255
    11f6:	9f ef       	ldi	r25, 0xFF	; 255
    11f8:	2c c0       	rjmp	.+88     	; 0x1252 <fputc+0x6e>
    11fa:	22 ff       	sbrs	r18, 2
    11fc:	16 c0       	rjmp	.+44     	; 0x122a <fputc+0x46>
    11fe:	46 81       	ldd	r20, Z+6	; 0x06
    1200:	57 81       	ldd	r21, Z+7	; 0x07
    1202:	24 81       	ldd	r18, Z+4	; 0x04
    1204:	35 81       	ldd	r19, Z+5	; 0x05
    1206:	42 17       	cp	r20, r18
    1208:	53 07       	cpc	r21, r19
    120a:	44 f4       	brge	.+16     	; 0x121c <fputc+0x38>
    120c:	a0 81       	ld	r26, Z
    120e:	b1 81       	ldd	r27, Z+1	; 0x01
    1210:	9d 01       	movw	r18, r26
    1212:	2f 5f       	subi	r18, 0xFF	; 255
    1214:	3f 4f       	sbci	r19, 0xFF	; 255
    1216:	31 83       	std	Z+1, r19	; 0x01
    1218:	20 83       	st	Z, r18
    121a:	8c 93       	st	X, r24
    121c:	26 81       	ldd	r18, Z+6	; 0x06
    121e:	37 81       	ldd	r19, Z+7	; 0x07
    1220:	2f 5f       	subi	r18, 0xFF	; 255
    1222:	3f 4f       	sbci	r19, 0xFF	; 255
    1224:	37 83       	std	Z+7, r19	; 0x07
    1226:	26 83       	std	Z+6, r18	; 0x06
    1228:	14 c0       	rjmp	.+40     	; 0x1252 <fputc+0x6e>
    122a:	8b 01       	movw	r16, r22
    122c:	ec 01       	movw	r28, r24
    122e:	fb 01       	movw	r30, r22
    1230:	00 84       	ldd	r0, Z+8	; 0x08
    1232:	f1 85       	ldd	r31, Z+9	; 0x09
    1234:	e0 2d       	mov	r30, r0
    1236:	09 95       	icall
    1238:	89 2b       	or	r24, r25
    123a:	e1 f6       	brne	.-72     	; 0x11f4 <fputc+0x10>
    123c:	d8 01       	movw	r26, r16
    123e:	16 96       	adiw	r26, 0x06	; 6
    1240:	8d 91       	ld	r24, X+
    1242:	9c 91       	ld	r25, X
    1244:	17 97       	sbiw	r26, 0x07	; 7
    1246:	01 96       	adiw	r24, 0x01	; 1
    1248:	17 96       	adiw	r26, 0x07	; 7
    124a:	9c 93       	st	X, r25
    124c:	8e 93       	st	-X, r24
    124e:	16 97       	sbiw	r26, 0x06	; 6
    1250:	ce 01       	movw	r24, r28
    1252:	df 91       	pop	r29
    1254:	cf 91       	pop	r28
    1256:	1f 91       	pop	r17
    1258:	0f 91       	pop	r16
    125a:	08 95       	ret

0000125c <__ultoa_invert>:
    125c:	fa 01       	movw	r30, r20
    125e:	aa 27       	eor	r26, r26
    1260:	28 30       	cpi	r18, 0x08	; 8
    1262:	51 f1       	breq	.+84     	; 0x12b8 <__ultoa_invert+0x5c>
    1264:	20 31       	cpi	r18, 0x10	; 16
    1266:	81 f1       	breq	.+96     	; 0x12c8 <__ultoa_invert+0x6c>
    1268:	e8 94       	clt
    126a:	6f 93       	push	r22
    126c:	6e 7f       	andi	r22, 0xFE	; 254
    126e:	6e 5f       	subi	r22, 0xFE	; 254
    1270:	7f 4f       	sbci	r23, 0xFF	; 255
    1272:	8f 4f       	sbci	r24, 0xFF	; 255
    1274:	9f 4f       	sbci	r25, 0xFF	; 255
    1276:	af 4f       	sbci	r26, 0xFF	; 255
    1278:	b1 e0       	ldi	r27, 0x01	; 1
    127a:	3e d0       	rcall	.+124    	; 0x12f8 <__ultoa_invert+0x9c>
    127c:	b4 e0       	ldi	r27, 0x04	; 4
    127e:	3c d0       	rcall	.+120    	; 0x12f8 <__ultoa_invert+0x9c>
    1280:	67 0f       	add	r22, r23
    1282:	78 1f       	adc	r23, r24
    1284:	89 1f       	adc	r24, r25
    1286:	9a 1f       	adc	r25, r26
    1288:	a1 1d       	adc	r26, r1
    128a:	68 0f       	add	r22, r24
    128c:	79 1f       	adc	r23, r25
    128e:	8a 1f       	adc	r24, r26
    1290:	91 1d       	adc	r25, r1
    1292:	a1 1d       	adc	r26, r1
    1294:	6a 0f       	add	r22, r26
    1296:	71 1d       	adc	r23, r1
    1298:	81 1d       	adc	r24, r1
    129a:	91 1d       	adc	r25, r1
    129c:	a1 1d       	adc	r26, r1
    129e:	20 d0       	rcall	.+64     	; 0x12e0 <__ultoa_invert+0x84>
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <__ultoa_invert+0x48>
    12a2:	68 94       	set
    12a4:	3f 91       	pop	r19
    12a6:	2a e0       	ldi	r18, 0x0A	; 10
    12a8:	26 9f       	mul	r18, r22
    12aa:	11 24       	eor	r1, r1
    12ac:	30 19       	sub	r19, r0
    12ae:	30 5d       	subi	r19, 0xD0	; 208
    12b0:	31 93       	st	Z+, r19
    12b2:	de f6       	brtc	.-74     	; 0x126a <__ultoa_invert+0xe>
    12b4:	cf 01       	movw	r24, r30
    12b6:	08 95       	ret
    12b8:	46 2f       	mov	r20, r22
    12ba:	47 70       	andi	r20, 0x07	; 7
    12bc:	40 5d       	subi	r20, 0xD0	; 208
    12be:	41 93       	st	Z+, r20
    12c0:	b3 e0       	ldi	r27, 0x03	; 3
    12c2:	0f d0       	rcall	.+30     	; 0x12e2 <__ultoa_invert+0x86>
    12c4:	c9 f7       	brne	.-14     	; 0x12b8 <__ultoa_invert+0x5c>
    12c6:	f6 cf       	rjmp	.-20     	; 0x12b4 <__ultoa_invert+0x58>
    12c8:	46 2f       	mov	r20, r22
    12ca:	4f 70       	andi	r20, 0x0F	; 15
    12cc:	40 5d       	subi	r20, 0xD0	; 208
    12ce:	4a 33       	cpi	r20, 0x3A	; 58
    12d0:	18 f0       	brcs	.+6      	; 0x12d8 <__ultoa_invert+0x7c>
    12d2:	49 5d       	subi	r20, 0xD9	; 217
    12d4:	31 fd       	sbrc	r19, 1
    12d6:	40 52       	subi	r20, 0x20	; 32
    12d8:	41 93       	st	Z+, r20
    12da:	02 d0       	rcall	.+4      	; 0x12e0 <__ultoa_invert+0x84>
    12dc:	a9 f7       	brne	.-22     	; 0x12c8 <__ultoa_invert+0x6c>
    12de:	ea cf       	rjmp	.-44     	; 0x12b4 <__ultoa_invert+0x58>
    12e0:	b4 e0       	ldi	r27, 0x04	; 4
    12e2:	a6 95       	lsr	r26
    12e4:	97 95       	ror	r25
    12e6:	87 95       	ror	r24
    12e8:	77 95       	ror	r23
    12ea:	67 95       	ror	r22
    12ec:	ba 95       	dec	r27
    12ee:	c9 f7       	brne	.-14     	; 0x12e2 <__ultoa_invert+0x86>
    12f0:	00 97       	sbiw	r24, 0x00	; 0
    12f2:	61 05       	cpc	r22, r1
    12f4:	71 05       	cpc	r23, r1
    12f6:	08 95       	ret
    12f8:	9b 01       	movw	r18, r22
    12fa:	ac 01       	movw	r20, r24
    12fc:	0a 2e       	mov	r0, r26
    12fe:	06 94       	lsr	r0
    1300:	57 95       	ror	r21
    1302:	47 95       	ror	r20
    1304:	37 95       	ror	r19
    1306:	27 95       	ror	r18
    1308:	ba 95       	dec	r27
    130a:	c9 f7       	brne	.-14     	; 0x12fe <__ultoa_invert+0xa2>
    130c:	62 0f       	add	r22, r18
    130e:	73 1f       	adc	r23, r19
    1310:	84 1f       	adc	r24, r20
    1312:	95 1f       	adc	r25, r21
    1314:	a0 1d       	adc	r26, r0
    1316:	08 95       	ret

00001318 <eeprom_read_block>:
    1318:	dc 01       	movw	r26, r24
    131a:	cb 01       	movw	r24, r22

0000131c <eeprom_read_blraw>:
    131c:	fc 01       	movw	r30, r24
    131e:	f9 99       	sbic	0x1f, 1	; 31
    1320:	fe cf       	rjmp	.-4      	; 0x131e <eeprom_read_blraw+0x2>
    1322:	06 c0       	rjmp	.+12     	; 0x1330 <eeprom_read_blraw+0x14>
    1324:	f2 bd       	out	0x22, r31	; 34
    1326:	e1 bd       	out	0x21, r30	; 33
    1328:	f8 9a       	sbi	0x1f, 0	; 31
    132a:	31 96       	adiw	r30, 0x01	; 1
    132c:	00 b4       	in	r0, 0x20	; 32
    132e:	0d 92       	st	X+, r0
    1330:	41 50       	subi	r20, 0x01	; 1
    1332:	50 40       	sbci	r21, 0x00	; 0
    1334:	b8 f7       	brcc	.-18     	; 0x1324 <eeprom_read_blraw+0x8>
    1336:	08 95       	ret

00001338 <eeprom_read_word>:
    1338:	a8 e1       	ldi	r26, 0x18	; 24
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	42 e0       	ldi	r20, 0x02	; 2
    133e:	50 e0       	ldi	r21, 0x00	; 0
    1340:	0c 94 8e 09 	jmp	0x131c	; 0x131c <eeprom_read_blraw>

00001344 <eeprom_write_block>:
    1344:	dc 01       	movw	r26, r24
    1346:	cb 01       	movw	r24, r22
    1348:	03 c0       	rjmp	.+6      	; 0x1350 <eeprom_write_block+0xc>
    134a:	2d 91       	ld	r18, X+
    134c:	0e 94 ad 09 	call	0x135a	; 0x135a <eeprom_write_r18>
    1350:	41 50       	subi	r20, 0x01	; 1
    1352:	50 40       	sbci	r21, 0x00	; 0
    1354:	d0 f7       	brcc	.-12     	; 0x134a <eeprom_write_block+0x6>
    1356:	08 95       	ret

00001358 <eeprom_write_byte>:
    1358:	26 2f       	mov	r18, r22

0000135a <eeprom_write_r18>:
    135a:	f9 99       	sbic	0x1f, 1	; 31
    135c:	fe cf       	rjmp	.-4      	; 0x135a <eeprom_write_r18>
    135e:	1f ba       	out	0x1f, r1	; 31
    1360:	92 bd       	out	0x22, r25	; 34
    1362:	81 bd       	out	0x21, r24	; 33
    1364:	20 bd       	out	0x20, r18	; 32
    1366:	0f b6       	in	r0, 0x3f	; 63
    1368:	f8 94       	cli
    136a:	fa 9a       	sbi	0x1f, 2	; 31
    136c:	f9 9a       	sbi	0x1f, 1	; 31
    136e:	0f be       	out	0x3f, r0	; 63
    1370:	01 96       	adiw	r24, 0x01	; 1
    1372:	08 95       	ret

00001374 <eeprom_write_word>:
    1374:	0e 94 ac 09 	call	0x1358	; 0x1358 <eeprom_write_byte>
    1378:	27 2f       	mov	r18, r23
    137a:	0c 94 ad 09 	jmp	0x135a	; 0x135a <eeprom_write_r18>

0000137e <__mulsi3>:
    137e:	db 01       	movw	r26, r22
    1380:	8f 93       	push	r24
    1382:	9f 93       	push	r25
    1384:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__muluhisi3>
    1388:	bf 91       	pop	r27
    138a:	af 91       	pop	r26
    138c:	a2 9f       	mul	r26, r18
    138e:	80 0d       	add	r24, r0
    1390:	91 1d       	adc	r25, r1
    1392:	a3 9f       	mul	r26, r19
    1394:	90 0d       	add	r25, r0
    1396:	b2 9f       	mul	r27, r18
    1398:	90 0d       	add	r25, r0
    139a:	11 24       	eor	r1, r1
    139c:	08 95       	ret

0000139e <__udivmodsi4>:
    139e:	a1 e2       	ldi	r26, 0x21	; 33
    13a0:	1a 2e       	mov	r1, r26
    13a2:	aa 1b       	sub	r26, r26
    13a4:	bb 1b       	sub	r27, r27
    13a6:	fd 01       	movw	r30, r26
    13a8:	0d c0       	rjmp	.+26     	; 0x13c4 <__udivmodsi4_ep>

000013aa <__udivmodsi4_loop>:
    13aa:	aa 1f       	adc	r26, r26
    13ac:	bb 1f       	adc	r27, r27
    13ae:	ee 1f       	adc	r30, r30
    13b0:	ff 1f       	adc	r31, r31
    13b2:	a2 17       	cp	r26, r18
    13b4:	b3 07       	cpc	r27, r19
    13b6:	e4 07       	cpc	r30, r20
    13b8:	f5 07       	cpc	r31, r21
    13ba:	20 f0       	brcs	.+8      	; 0x13c4 <__udivmodsi4_ep>
    13bc:	a2 1b       	sub	r26, r18
    13be:	b3 0b       	sbc	r27, r19
    13c0:	e4 0b       	sbc	r30, r20
    13c2:	f5 0b       	sbc	r31, r21

000013c4 <__udivmodsi4_ep>:
    13c4:	66 1f       	adc	r22, r22
    13c6:	77 1f       	adc	r23, r23
    13c8:	88 1f       	adc	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	1a 94       	dec	r1
    13ce:	69 f7       	brne	.-38     	; 0x13aa <__udivmodsi4_loop>
    13d0:	60 95       	com	r22
    13d2:	70 95       	com	r23
    13d4:	80 95       	com	r24
    13d6:	90 95       	com	r25
    13d8:	9b 01       	movw	r18, r22
    13da:	ac 01       	movw	r20, r24
    13dc:	bd 01       	movw	r22, r26
    13de:	cf 01       	movw	r24, r30
    13e0:	08 95       	ret

000013e2 <__muluhisi3>:
    13e2:	0e 94 8a 05 	call	0xb14	; 0xb14 <__umulhisi3>
    13e6:	a5 9f       	mul	r26, r21
    13e8:	90 0d       	add	r25, r0
    13ea:	b4 9f       	mul	r27, r20
    13ec:	90 0d       	add	r25, r0
    13ee:	a4 9f       	mul	r26, r20
    13f0:	80 0d       	add	r24, r0
    13f2:	91 1d       	adc	r25, r1
    13f4:	11 24       	eor	r1, r1
    13f6:	08 95       	ret

000013f8 <__prologue_saves__>:
    13f8:	2f 92       	push	r2
    13fa:	3f 92       	push	r3
    13fc:	4f 92       	push	r4
    13fe:	5f 92       	push	r5
    1400:	6f 92       	push	r6
    1402:	7f 92       	push	r7
    1404:	8f 92       	push	r8
    1406:	9f 92       	push	r9
    1408:	af 92       	push	r10
    140a:	bf 92       	push	r11
    140c:	cf 92       	push	r12
    140e:	df 92       	push	r13
    1410:	ef 92       	push	r14
    1412:	ff 92       	push	r15
    1414:	0f 93       	push	r16
    1416:	1f 93       	push	r17
    1418:	cf 93       	push	r28
    141a:	df 93       	push	r29
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
    1420:	ca 1b       	sub	r28, r26
    1422:	db 0b       	sbc	r29, r27
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	f8 94       	cli
    1428:	de bf       	out	0x3e, r29	; 62
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	cd bf       	out	0x3d, r28	; 61
    142e:	09 94       	ijmp

00001430 <__epilogue_restores__>:
    1430:	2a 88       	ldd	r2, Y+18	; 0x12
    1432:	39 88       	ldd	r3, Y+17	; 0x11
    1434:	48 88       	ldd	r4, Y+16	; 0x10
    1436:	5f 84       	ldd	r5, Y+15	; 0x0f
    1438:	6e 84       	ldd	r6, Y+14	; 0x0e
    143a:	7d 84       	ldd	r7, Y+13	; 0x0d
    143c:	8c 84       	ldd	r8, Y+12	; 0x0c
    143e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1440:	aa 84       	ldd	r10, Y+10	; 0x0a
    1442:	b9 84       	ldd	r11, Y+9	; 0x09
    1444:	c8 84       	ldd	r12, Y+8	; 0x08
    1446:	df 80       	ldd	r13, Y+7	; 0x07
    1448:	ee 80       	ldd	r14, Y+6	; 0x06
    144a:	fd 80       	ldd	r15, Y+5	; 0x05
    144c:	0c 81       	ldd	r16, Y+4	; 0x04
    144e:	1b 81       	ldd	r17, Y+3	; 0x03
    1450:	aa 81       	ldd	r26, Y+2	; 0x02
    1452:	b9 81       	ldd	r27, Y+1	; 0x01
    1454:	ce 0f       	add	r28, r30
    1456:	d1 1d       	adc	r29, r1
    1458:	0f b6       	in	r0, 0x3f	; 63
    145a:	f8 94       	cli
    145c:	de bf       	out	0x3e, r29	; 62
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	cd bf       	out	0x3d, r28	; 61
    1462:	ed 01       	movw	r28, r26
    1464:	08 95       	ret

00001466 <_exit>:
    1466:	f8 94       	cli

00001468 <__stop_program>:
    1468:	ff cf       	rjmp	.-2      	; 0x1468 <__stop_program>
